<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://Morn-zh.github.io</id>
    <title>Morn-zh</title>
    <updated>2020-09-15T13:29:31.464Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://Morn-zh.github.io"/>
    <link rel="self" href="https://Morn-zh.github.io/atom.xml"/>
    <subtitle>我等着，等着你</subtitle>
    <logo>https://Morn-zh.github.io/images/avatar.png</logo>
    <icon>https://Morn-zh.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, Morn-zh</rights>
    <entry>
        <title type="html"><![CDATA[gunicorn+gevent部署flask]]></title>
        <id>https://Morn-zh.github.io/post/gunicorngevent-bu-shu-flask/</id>
        <link href="https://Morn-zh.github.io/post/gunicorngevent-bu-shu-flask/">
        </link>
        <updated>2020-09-15T13:22:02.000Z</updated>
        <content type="html"><![CDATA[<p>之前试过用<strong>uwsgi+nginx+supervisor</strong>部署flask项目，最近因为舍友需要，帮着搭建一个flask的api，同样是需要部署上线的，趁此机会尝试另外一种部署方式<strong>gunicorn+gevent</strong></p>
<p>提前说结论，<strong>gunicorn+gevent</strong>部署更加简单</p>
<h1 id="ox00-环境以及文件结构">ox00 环境以及文件结构</h1>
<h2 id="当前环境">当前环境</h2>
<ul>
<li>centos 7.3</li>
<li>python3.8.1</li>
</ul>
<h2 id="文件结构">文件结构</h2>
<p>最终的的文件结构是这样的，其中<strong>myproject</strong>是我们的项目文件，里面包含了虚拟环境的文件夹<strong>venv</strong>，flask的主体文件<strong>main.py</strong>，以及gunicorn的配置文件<strong>gunicorn.conf.py</strong>，具体内容会在后面一一展示</p>
<pre><code>.
└── myproject
    ├── gunicorn.conf.py
    ├── main.py
    └── venv
        ├── bin
        ├── lib
        └── pyvenv.cfg

4 directories, 3 files
</code></pre>
<p>先进入我们的项目文件夹内，假设项目文件位于/home/myproject，进入项目文件并进行后续操作</p>
<pre><code>cd /home/myproject
</code></pre>
<h1 id="ox01-创建虚拟环境">ox01 创建虚拟环境</h1>
<p>为了不污染当前的环境，安装并创建虚拟环境</p>
<h2 id="安装virtualenv">安装virtualenv</h2>
<pre><code>pip install virtualenv
</code></pre>
<p>测试安装是否成功，输入后如果显示所有命令，则成功</p>
<pre><code>virtual -h
</code></pre>
<p>如果显示没有找到该命令，可能需要去配置下环境变量，步骤如下</p>
<pre><code>vim /etc/profile
# 将下面内容添加到文件的最下面,添加内容为python3的安装目录，根据实际情况进行更改
PATH=$PATH:/usr/local/python3/bin

# 更新配置
source /etc/profile
</code></pre>
<h2 id="创建虚拟环境">创建虚拟环境</h2>
<pre><code>virtualenv --python=python3  venv
</code></pre>
<p>其中venv是自定义的，运行后会出现venv的文件夹，之后需要的包都会被安装在里面</p>
<h2 id="激活虚拟环境">激活虚拟环境</h2>
<pre><code>source venv/bin/activate
</code></pre>
<p>激活成功能看到命令行前面出现我们命名的虚拟环境的名字<strong>venv</strong>，此时已经处于虚拟环境中，后续操作<strong>将在虚拟环境中进行</strong></p>
<p>ps：退出虚拟环境的命令</p>
<pre><code>deactivate
</code></pre>
<h1 id="ox02-安装gunicorngevent">ox02 安装gunicorn+gevent</h1>
<p><strong>在虚拟环境中</strong>安装下flask程序中需要用到的库</p>
<p>你说你不知道需要哪些？直接运行下flask不就知道了，依次安装下需要用到的库</p>
<pre><code># main.py 为flask的主体文件，后面会展示
python main.py
</code></pre>
<p>安装今天的主角gunicorn+gevent</p>
<pre><code class="language-bash">pip install gunicorn gevent
</code></pre>
<p>展示下main.py吧，就是最简单的那种falsk程序</p>
<pre><code># main.py
# 文件名main，后面启动时会用到
from flask import Flask

# 变量名app，后面启动时会用到
app = Flask(__name__)


@app.route('/')
def index():
    return 'here is index'

if __name__ == '__main__':
	# 运行在0.0.0.0，端口为9000,端口号会在后面验证是否部署成功时用到
    app.run(debug=True,host = '0.0.0.0',port=9000)
</code></pre>
<h1 id="ox03-配置gunicorn">ox03 配置gunicorn</h1>
<h2 id="创建配置文件">创建配置文件</h2>
<p>创建<strong>gunicorn.conf.py</strong>文件，并且将以下内容<strong>直接复制</strong>进去</p>
<pre><code>vim gunicorn.conf.py
</code></pre>
<pre><code>import multiprocessing
import gevent.monkey
gevent.monkey.patch_all()

workers = multiprocessing.cpu_count()*2    # 定义同时开启的处理请求的进程数量，根据网站流量适当调整
worker_class = &quot;gevent&quot;   # 采用gevent库，支持异步处理请求，提高吞吐量
bind = &quot;0.0.0.0:9000&quot;
daemon = True
# daemon为true意味着开启后台运行，默认为False

# 以下为日志配置，可选内容，选取的话需要在项目文件内载创建个log文件夹，mkdir log
# loglevel = 'debug'
# pidfile = &quot;log/gunicorn.pid&quot;
# accesslog = &quot;log/access.log&quot;
# errorlog = &quot;log/debug.log&quot;

</code></pre>
<h2 id="运行gunicorn">运行gunicorn</h2>
<pre><code>gunicorn main:app -c gunicorn.conf.py
</code></pre>
<h2 id="解释说明">解释说明</h2>
<p>main为flask主体文件名，app为创建flask对象时使用的变量名，gunicorn.conf.py为gunicorn的配置文件</p>
<p>至此，部署完毕，可以试着访问下你的外网ip地址加端口，例:47.100.91.124:9000</p>
<h1 id="ox04-后续">ox04 后续</h1>
<p>因为gunicorn只有启动的选项，需要关闭的话，你可能会用到如下指令</p>
<pre><code>kill $(lsof -i:9000|awk '{if(NR==2)print $2}')
</code></pre>
<p>原理是筛选端口，关闭对应的服务，其中9000就是之前设置的端口号</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[折腾Centos随记]]></title>
        <id>https://Morn-zh.github.io/post/zhe-teng-centos-sui-ji/</id>
        <link href="https://Morn-zh.github.io/post/zhe-teng-centos-sui-ji/">
        </link>
        <updated>2020-09-14T09:22:11.000Z</updated>
        <content type="html"><![CDATA[<p>pkill -f uWSGI -9 杀掉所有进程<br>
cd /etc/yum.repos.d/</p>
<p>生成requirements.txt（虚拟环境下操作）<br>
pip freeze &gt;requirements.txt<br>
pip install -r requirements.txt</p>
<p>docker安装<br>
yum update<br>
yum install -y yum-utils device-mapper-persistent-data lvm2<br>
yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo</p>
<h1 id="gunicorn启动指令">gunicorn启动指令</h1>
<p>gunicorn start:app -c gunicorn.conf.py</p>
<p>kill $(lsof -i:9000|awk '{if(NR==2)print $2}')</p>
<h1 id="创建纯净的虚拟环境">创建纯净的虚拟环境</h1>
<pre><code>vim /etc/profile
# 将下面内容添加到文件的最下面
PATH=$PATH:/usr/local/python3/bin

#是添加的进行生效命令
source /etc/profile
</code></pre>
<p>virtualenv --python=python3  venv</p>
<h1 id="centos换源">centos换源</h1>
<p>mv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup</p>
<p>wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo</p>
<p>yum clean all</p>
<p>yum makecache</p>
<p>yum update</p>
<h1 id="centos7安装python381">centos7安装python3.8.1</h1>
<p>https://blog.csdn.net/wohiusdashi/article/details/89358071</p>
<h1 id="centos7安装mysql">centos7安装mysql</h1>
<p>https://blog.csdn.net/weixin_43616817/article/details/106378512</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hello Gridea]]></title>
        <id>https://Morn-zh.github.io/post/hello-gridea/</id>
        <link href="https://Morn-zh.github.io/post/hello-gridea/">
        </link>
        <updated>2018-12-11T16:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
]]></summary>
        <content type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
<!-- more -->
<p><a href="https://github.com/getgridea/gridea">Github</a><br>
<a href="https://gridea.dev/">Gridea 主页</a><br>
<a href="http://fehey.com/">示例网站</a></p>
<h2 id="特性">特性👇</h2>
<p>📝  你可以使用最酷的 <strong>Markdown</strong> 语法，进行快速创作</p>
<p>🌉  你可以给文章配上精美的封面图和在文章任意位置插入图片</p>
<p>🏷️  你可以对文章进行标签分组</p>
<p>📋  你可以自定义菜单，甚至可以创建外部链接菜单</p>
<p>💻  你可以在 <strong>Windows</strong>，<strong>MacOS</strong> 或 <strong>Linux</strong> 设备上使用此客户端</p>
<p>🌎  你可以使用 <strong>𝖦𝗂𝗍𝗁𝗎𝖻 𝖯𝖺𝗀𝖾𝗌</strong> 或 <strong>Coding Pages</strong> 向世界展示，未来将支持更多平台</p>
<p>💬  你可以进行简单的配置，接入 <a href="https://github.com/gitalk/gitalk">Gitalk</a> 或 <a href="https://github.com/SukkaW/DisqusJS">DisqusJS</a> 评论系统</p>
<p>🇬🇧  你可以使用<strong>中文简体</strong>或<strong>英语</strong></p>
<p>🌁  你可以任意使用应用内默认主题或任意第三方主题，强大的主题自定义能力</p>
<p>🖥  你可以自定义源文件夹，利用 OneDrive、百度网盘、iCloud、Dropbox 等进行多设备同步</p>
<p>🌱 当然 <strong>Gridea</strong> 还很年轻，有很多不足，但请相信，它会不停向前 🏃</p>
<p>未来，它一定会成为你离不开的伙伴</p>
<p>尽情发挥你的才华吧！</p>
<p>😘 Enjoy~</p>
]]></content>
    </entry>
</feed>